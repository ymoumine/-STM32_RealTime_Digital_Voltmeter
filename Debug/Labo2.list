
Labo2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfd8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025c0  0800c1a8  0800c1a8  0001c1a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e768  0800e768  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e768  0800e768  0001e768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e770  0800e770  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e770  0800e770  0001e770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e774  0800e774  0001e774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800e778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005024  200001e8  0800e960  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000520c  0800e960  0002520c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   000173fd  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003685  00000000  00000000  00037658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001450  00000000  00000000  0003ace0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc3  00000000  00000000  0003c130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000254cb  00000000  00000000  0003d0f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e4d  00000000  00000000  000625be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3e6b  00000000  00000000  0007b40b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ac4  00000000  00000000  0015f278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00165d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c190 	.word	0x0800c190

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800c190 	.word	0x0800c190

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <uart2_write>:
uint32_t sensorValue = 0;
float fvoltage = 0;
char msg[100];

int uart2_write(int ch)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & USART_SR_TXE)){}
 8001038:	bf00      	nop
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <uart2_write+0x2c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0f9      	beq.n	800103a <uart2_write+0xa>

	 /*Write to transmit data register*/
	USART2->DR	=  (ch & 0xFF);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <uart2_write+0x2c>)
 800104a:	b2db      	uxtb	r3, r3
 800104c:	6053      	str	r3, [r2, #4]
	return ch;
 800104e:	687b      	ldr	r3, [r7, #4]
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	40004400 	.word	0x40004400

08001060 <__io_putchar>:

int __io_putchar(int ch)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ffe1 	bl	8001030 <uart2_write>
	return ch;
 800106e:	687b      	ldr	r3, [r7, #4]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107c:	f000 ffc6 	bl	800200c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001080:	f000 f83c 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001084:	f000 f950 	bl	8001328 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001088:	f000 f8a4 	bl	80011d4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800108c:	f000 f922 	bl	80012d4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001090:	f000 f8f2 	bl	8001278 <MX_I2C1_Init>

  HAL_ADC_Start(&hadc1);
 8001094:	4810      	ldr	r0, [pc, #64]	; (80010d8 <main+0x60>)
 8001096:	f001 f893 	bl	80021c0 <HAL_ADC_Start>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */
  /* USER CODE BEGIN 2 */

  SSD1306_Init();
 800109a:	f000 facb 	bl	8001634 <SSD1306_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800109e:	f003 fe95 	bl	8004dcc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 80010a2:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <main+0x64>)
 80010a4:	2102      	movs	r1, #2
 80010a6:	2010      	movs	r0, #16
 80010a8:	f003 ff6c 	bl	8004f84 <osMessageQueueNew>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <main+0x68>)
 80010b0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 80010b2:	4a0c      	ldr	r2, [pc, #48]	; (80010e4 <main+0x6c>)
 80010b4:	2100      	movs	r1, #0
 80010b6:	480c      	ldr	r0, [pc, #48]	; (80010e8 <main+0x70>)
 80010b8:	f003 fed2 	bl	8004e60 <osThreadNew>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <main+0x74>)
 80010c0:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 80010c2:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <main+0x78>)
 80010c4:	2100      	movs	r1, #0
 80010c6:	480b      	ldr	r0, [pc, #44]	; (80010f4 <main+0x7c>)
 80010c8:	f003 feca 	bl	8004e60 <osThreadNew>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <main+0x80>)
 80010d0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010d2:	f003 fe9f 	bl	8004e14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <main+0x5e>
 80010d8:	20000204 	.word	0x20000204
 80010dc:	0800e2ec 	.word	0x0800e2ec
 80010e0:	2000035c 	.word	0x2000035c
 80010e4:	0800e2a4 	.word	0x0800e2a4
 80010e8:	080013b1 	.word	0x080013b1
 80010ec:	20000354 	.word	0x20000354
 80010f0:	0800e2c8 	.word	0x0800e2c8
 80010f4:	08001499 	.word	0x08001499
 80010f8:	20000358 	.word	0x20000358

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	; 0x50
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	2234      	movs	r2, #52	; 0x34
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f007 fc05 	bl	800891a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	4b29      	ldr	r3, [pc, #164]	; (80011cc <SystemClock_Config+0xd0>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	4a28      	ldr	r2, [pc, #160]	; (80011cc <SystemClock_Config+0xd0>)
 800112a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112e:	6413      	str	r3, [r2, #64]	; 0x40
 8001130:	4b26      	ldr	r3, [pc, #152]	; (80011cc <SystemClock_Config+0xd0>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800113c:	2300      	movs	r3, #0
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <SystemClock_Config+0xd4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001148:	4a21      	ldr	r2, [pc, #132]	; (80011d0 <SystemClock_Config+0xd4>)
 800114a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <SystemClock_Config+0xd4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800115c:	2302      	movs	r3, #2
 800115e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001160:	2301      	movs	r3, #1
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001164:	2310      	movs	r3, #16
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001168:	2302      	movs	r3, #2
 800116a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800116c:	2300      	movs	r3, #0
 800116e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001170:	2308      	movs	r3, #8
 8001172:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001174:	2340      	movs	r3, #64	; 0x40
 8001176:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001178:	2302      	movs	r3, #2
 800117a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800117c:	2302      	movs	r3, #2
 800117e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001180:	2302      	movs	r3, #2
 8001182:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	4618      	mov	r0, r3
 800118a:	f002 ff41 	bl	8004010 <HAL_RCC_OscConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001194:	f000 f9d4 	bl	8001540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001198:	230f      	movs	r3, #15
 800119a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119c:	2302      	movs	r3, #2
 800119e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	2102      	movs	r1, #2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f002 fbe1 	bl	800397c <HAL_RCC_ClockConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80011c0:	f000 f9be 	bl	8001540 <Error_Handler>
  }
}
 80011c4:	bf00      	nop
 80011c6:	3750      	adds	r7, #80	; 0x50
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40007000 	.word	0x40007000

080011d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011da:	463b      	mov	r3, r7
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011e6:	4b21      	ldr	r3, [pc, #132]	; (800126c <MX_ADC1_Init+0x98>)
 80011e8:	4a21      	ldr	r2, [pc, #132]	; (8001270 <MX_ADC1_Init+0x9c>)
 80011ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <MX_ADC1_Init+0x98>)
 80011ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <MX_ADC1_Init+0x98>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <MX_ADC1_Init+0x98>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001200:	4b1a      	ldr	r3, [pc, #104]	; (800126c <MX_ADC1_Init+0x98>)
 8001202:	2201      	movs	r2, #1
 8001204:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <MX_ADC1_Init+0x98>)
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <MX_ADC1_Init+0x98>)
 8001210:	2200      	movs	r2, #0
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <MX_ADC1_Init+0x98>)
 8001216:	4a17      	ldr	r2, [pc, #92]	; (8001274 <MX_ADC1_Init+0xa0>)
 8001218:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <MX_ADC1_Init+0x98>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <MX_ADC1_Init+0x98>)
 8001222:	2201      	movs	r2, #1
 8001224:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_ADC1_Init+0x98>)
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_ADC1_Init+0x98>)
 8001230:	2201      	movs	r2, #1
 8001232:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <MX_ADC1_Init+0x98>)
 8001236:	f000 ff7f 	bl	8002138 <HAL_ADC_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001240:	f000 f97e 	bl	8001540 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001244:	2300      	movs	r3, #0
 8001246:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001248:	2301      	movs	r3, #1
 800124a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	4619      	mov	r1, r3
 8001254:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_ADC1_Init+0x98>)
 8001256:	f001 f91d 	bl	8002494 <HAL_ADC_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001260:	f000 f96e 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000204 	.word	0x20000204
 8001270:	40012000 	.word	0x40012000
 8001274:	0f000001 	.word	0x0f000001

08001278 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_I2C1_Init+0x50>)
 800127e:	4a13      	ldr	r2, [pc, #76]	; (80012cc <MX_I2C1_Init+0x54>)
 8001280:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_I2C1_Init+0x50>)
 8001284:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <MX_I2C1_Init+0x58>)
 8001286:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_I2C1_Init+0x50>)
 8001296:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800129a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <MX_I2C1_Init+0x50>)
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <MX_I2C1_Init+0x50>)
 80012b6:	f001 fd95 	bl	8002de4 <HAL_I2C_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012c0:	f000 f93e 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	2000024c 	.word	0x2000024c
 80012cc:	40005400 	.word	0x40005400
 80012d0:	00061a80 	.word	0x00061a80

080012d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <MX_USART2_UART_Init+0x50>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 800130c:	f003 f91e 	bl	800454c <HAL_UART_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001316:	f000 f913 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200002a0 	.word	0x200002a0
 8001324:	40004400 	.word	0x40004400

08001328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <MX_GPIO_Init+0x84>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a1d      	ldr	r2, [pc, #116]	; (80013ac <MX_GPIO_Init+0x84>)
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <MX_GPIO_Init+0x84>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_GPIO_Init+0x84>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a16      	ldr	r2, [pc, #88]	; (80013ac <MX_GPIO_Init+0x84>)
 8001354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <MX_GPIO_Init+0x84>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_GPIO_Init+0x84>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a0f      	ldr	r2, [pc, #60]	; (80013ac <MX_GPIO_Init+0x84>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <MX_GPIO_Init+0x84>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_GPIO_Init+0x84>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a08      	ldr	r2, [pc, #32]	; (80013ac <MX_GPIO_Init+0x84>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_GPIO_Init+0x84>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800139e:	bf00      	nop
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40023800 	.word	0x40023800

080013b0 <StartTask2>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
//	  SSD1306_GotoXY (0, 30);
//	  SSD1306_Puts ("MOHIDEEN", &Font_11x18, 1);
//	  SSD1306_UpdateScreen();
//	  HAL_Delay (1000);

	  SSD1306_ScrollRight(0,7);
 80013b8:	2107      	movs	r1, #7
 80013ba:	2000      	movs	r0, #0
 80013bc:	f000 f8c5 	bl	800154a <SSD1306_ScrollRight>
	  HAL_Delay(3000);
 80013c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80013c4:	f000 fe94 	bl	80020f0 <HAL_Delay>
	  SSD1306_ScrollLeft(0,7);
 80013c8:	2107      	movs	r1, #7
 80013ca:	2000      	movs	r0, #0
 80013cc:	f000 f8f3 	bl	80015b6 <SSD1306_ScrollLeft>
	  HAL_Delay(3000);
 80013d0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80013d4:	f000 fe8c 	bl	80020f0 <HAL_Delay>
	  SSD1306_Stopscroll();
 80013d8:	f000 f923 	bl	8001622 <SSD1306_Stopscroll>
	  SSD1306_Clear();
 80013dc:	f000 fb4f 	bl	8001a7e <SSD1306_Clear>
	  SSD1306_GotoXY (35,0);
 80013e0:	2100      	movs	r1, #0
 80013e2:	2023      	movs	r0, #35	; 0x23
 80013e4:	f000 fa90 	bl	8001908 <SSD1306_GotoXY>
	  SSD1306_Puts ("SCORE", &Font_11x18, 1);
 80013e8:	2201      	movs	r2, #1
 80013ea:	4926      	ldr	r1, [pc, #152]	; (8001484 <StartTask2+0xd4>)
 80013ec:	4826      	ldr	r0, [pc, #152]	; (8001488 <StartTask2+0xd8>)
 80013ee:	f000 fb21 	bl	8001a34 <SSD1306_Puts>
  /* Infinite loop */
  for(;;)
  {
	  for ( int x = 1; x <= 10000 ; x++ )
 80013f2:	2301      	movs	r3, #1
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	e03e      	b.n	8001476 <StartTask2+0xc6>
	  	  	{
	  	  		itoa(x, snum, 10);
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	220a      	movs	r2, #10
 80013fe:	4619      	mov	r1, r3
 8001400:	6978      	ldr	r0, [r7, #20]
 8001402:	f006 faab 	bl	800795c <itoa>
	  	  		SSD1306_GotoXY (0, 30);
 8001406:	211e      	movs	r1, #30
 8001408:	2000      	movs	r0, #0
 800140a:	f000 fa7d 	bl	8001908 <SSD1306_GotoXY>
	  	  		SSD1306_Puts ("             ", &Font_16x26, 1);
 800140e:	2201      	movs	r2, #1
 8001410:	491e      	ldr	r1, [pc, #120]	; (800148c <StartTask2+0xdc>)
 8001412:	481f      	ldr	r0, [pc, #124]	; (8001490 <StartTask2+0xe0>)
 8001414:	f000 fb0e 	bl	8001a34 <SSD1306_Puts>
	  	  		SSD1306_UpdateScreen();
 8001418:	f000 f9d0 	bl	80017bc <SSD1306_UpdateScreen>
	  	  		if(x < 10) {
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	2b09      	cmp	r3, #9
 8001420:	dc04      	bgt.n	800142c <StartTask2+0x7c>
	  	  			SSD1306_GotoXY (53, 30);  // 1 DIGIT
 8001422:	211e      	movs	r1, #30
 8001424:	2035      	movs	r0, #53	; 0x35
 8001426:	f000 fa6f 	bl	8001908 <SSD1306_GotoXY>
 800142a:	e014      	b.n	8001456 <StartTask2+0xa6>
	  	  		}
	  	  		else if (x < 100 ) {
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2b63      	cmp	r3, #99	; 0x63
 8001430:	dc04      	bgt.n	800143c <StartTask2+0x8c>
	  	  			SSD1306_GotoXY (45, 30);  // 2 DIGITS
 8001432:	211e      	movs	r1, #30
 8001434:	202d      	movs	r0, #45	; 0x2d
 8001436:	f000 fa67 	bl	8001908 <SSD1306_GotoXY>
 800143a:	e00c      	b.n	8001456 <StartTask2+0xa6>
	  	  		}
	  	  		else if (x < 1000 ) {
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001442:	da04      	bge.n	800144e <StartTask2+0x9e>
	  	  			SSD1306_GotoXY (37, 30);  // 3 DIGITS
 8001444:	211e      	movs	r1, #30
 8001446:	2025      	movs	r0, #37	; 0x25
 8001448:	f000 fa5e 	bl	8001908 <SSD1306_GotoXY>
 800144c:	e003      	b.n	8001456 <StartTask2+0xa6>
	  	  		}
	  	  		else {
	  	  			SSD1306_GotoXY (30, 30);  // 4 DIGIS
 800144e:	211e      	movs	r1, #30
 8001450:	201e      	movs	r0, #30
 8001452:	f000 fa59 	bl	8001908 <SSD1306_GotoXY>
	  	  		}
	  	  		SSD1306_Puts (snum, &Font_16x26, 1);
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	2201      	movs	r2, #1
 800145c:	490b      	ldr	r1, [pc, #44]	; (800148c <StartTask2+0xdc>)
 800145e:	4618      	mov	r0, r3
 8001460:	f000 fae8 	bl	8001a34 <SSD1306_Puts>
	  	  		//SSD1306_Puts ("123", &Font_16x26, 1);
	  	  		SSD1306_UpdateScreen();
 8001464:	f000 f9aa 	bl	80017bc <SSD1306_UpdateScreen>
	  	  		HAL_Delay (500);
 8001468:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800146c:	f000 fe40 	bl	80020f0 <HAL_Delay>
	  for ( int x = 1; x <= 10000 ; x++ )
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	3301      	adds	r3, #1
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f242 7210 	movw	r2, #10000	; 0x2710
 800147c:	4293      	cmp	r3, r2
 800147e:	ddbb      	ble.n	80013f8 <StartTask2+0x48>
 8001480:	e7b7      	b.n	80013f2 <StartTask2+0x42>
 8001482:	bf00      	nop
 8001484:	20000000 	.word	0x20000000
 8001488:	0800c1c4 	.word	0x0800c1c4
 800148c:	20000008 	.word	0x20000008
 8001490:	0800c1cc 	.word	0x0800c1cc
 8001494:	00000000 	.word	0x00000000

08001498 <StartTask03>:
*/


/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
//	HAL_ADC_Start(&hadc1);
//	char msg[100];
	HAL_ADC_Start(&hadc1);
 80014a0:	4821      	ldr	r0, [pc, #132]	; (8001528 <StartTask03+0x90>)
 80014a2:	f000 fe8d 	bl	80021c0 <HAL_ADC_Start>
  /* Infinite loop */
  for(;;)
  {

	  /*1. Start ADC */
	  	 HAL_ADC_Start(&hadc1);
 80014a6:	4820      	ldr	r0, [pc, #128]	; (8001528 <StartTask03+0x90>)
 80014a8:	f000 fe8a 	bl	80021c0 <HAL_ADC_Start>

	  	 /*2. Poll for conversion */
	  	 HAL_ADC_PollForConversion(&hadc1,1);
 80014ac:	2101      	movs	r1, #1
 80014ae:	481e      	ldr	r0, [pc, #120]	; (8001528 <StartTask03+0x90>)
 80014b0:	f000 ff58 	bl	8002364 <HAL_ADC_PollForConversion>

	  	 /*3. Get conversion */
	  	 sensorValue = HAL_ADC_GetValue(&hadc1);
 80014b4:	481c      	ldr	r0, [pc, #112]	; (8001528 <StartTask03+0x90>)
 80014b6:	f000 ffe0 	bl	800247a <HAL_ADC_GetValue>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4a1b      	ldr	r2, [pc, #108]	; (800152c <StartTask03+0x94>)
 80014be:	6013      	str	r3, [r2, #0]
	  	 fvoltage = (float)sensorValue * (3.3/4095.0);
 80014c0:	4b1a      	ldr	r3, [pc, #104]	; (800152c <StartTask03+0x94>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	ee07 3a90 	vmov	s15, r3
 80014c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014cc:	ee17 0a90 	vmov	r0, s15
 80014d0:	f7ff f85a 	bl	8000588 <__aeabi_f2d>
 80014d4:	a312      	add	r3, pc, #72	; (adr r3, 8001520 <StartTask03+0x88>)
 80014d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014da:	f7ff f8ad 	bl	8000638 <__aeabi_dmul>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4610      	mov	r0, r2
 80014e4:	4619      	mov	r1, r3
 80014e6:	f7ff fb9f 	bl	8000c28 <__aeabi_d2f>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4a10      	ldr	r2, [pc, #64]	; (8001530 <StartTask03+0x98>)
 80014ee:	6013      	str	r3, [r2, #0]



	  sprintf(msg, "%.2f V", fvoltage);
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <StartTask03+0x98>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f847 	bl	8000588 <__aeabi_f2d>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	490d      	ldr	r1, [pc, #52]	; (8001534 <StartTask03+0x9c>)
 8001500:	480d      	ldr	r0, [pc, #52]	; (8001538 <StartTask03+0xa0>)
 8001502:	f007 f9a7 	bl	8008854 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001506:	480c      	ldr	r0, [pc, #48]	; (8001538 <StartTask03+0xa0>)
 8001508:	f7fe fed2 	bl	80002b0 <strlen>
 800150c:	4603      	mov	r3, r0
 800150e:	b29a      	uxth	r2, r3
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	4908      	ldr	r1, [pc, #32]	; (8001538 <StartTask03+0xa0>)
 8001516:	4809      	ldr	r0, [pc, #36]	; (800153c <StartTask03+0xa4>)
 8001518:	f003 f868 	bl	80045ec <HAL_UART_Transmit>
	  	 HAL_ADC_Start(&hadc1);
 800151c:	e7c3      	b.n	80014a6 <StartTask03+0xe>
 800151e:	bf00      	nop
 8001520:	e734d9b4 	.word	0xe734d9b4
 8001524:	3f4a680c 	.word	0x3f4a680c
 8001528:	20000204 	.word	0x20000204
 800152c:	200002e8 	.word	0x200002e8
 8001530:	200002ec 	.word	0x200002ec
 8001534:	0800c1dc 	.word	0x0800c1dc
 8001538:	200002f0 	.word	0x200002f0
 800153c:	200002a0 	.word	0x200002a0

08001540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001544:	b672      	cpsid	i
}
 8001546:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001548:	e7fe      	b.n	8001548 <Error_Handler+0x8>

0800154a <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	460a      	mov	r2, r1
 8001554:	71fb      	strb	r3, [r7, #7]
 8001556:	4613      	mov	r3, r2
 8001558:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 800155a:	2226      	movs	r2, #38	; 0x26
 800155c:	2100      	movs	r1, #0
 800155e:	2078      	movs	r0, #120	; 0x78
 8001560:	f000 fb12 	bl	8001b88 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8001564:	2200      	movs	r2, #0
 8001566:	2100      	movs	r1, #0
 8001568:	2078      	movs	r0, #120	; 0x78
 800156a:	f000 fb0d 	bl	8001b88 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	461a      	mov	r2, r3
 8001572:	2100      	movs	r1, #0
 8001574:	2078      	movs	r0, #120	; 0x78
 8001576:	f000 fb07 	bl	8001b88 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	2078      	movs	r0, #120	; 0x78
 8001580:	f000 fb02 	bl	8001b88 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8001584:	79bb      	ldrb	r3, [r7, #6]
 8001586:	461a      	mov	r2, r3
 8001588:	2100      	movs	r1, #0
 800158a:	2078      	movs	r0, #120	; 0x78
 800158c:	f000 fafc 	bl	8001b88 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8001590:	2200      	movs	r2, #0
 8001592:	2100      	movs	r1, #0
 8001594:	2078      	movs	r0, #120	; 0x78
 8001596:	f000 faf7 	bl	8001b88 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 800159a:	22ff      	movs	r2, #255	; 0xff
 800159c:	2100      	movs	r1, #0
 800159e:	2078      	movs	r0, #120	; 0x78
 80015a0:	f000 faf2 	bl	8001b88 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80015a4:	222f      	movs	r2, #47	; 0x2f
 80015a6:	2100      	movs	r1, #0
 80015a8:	2078      	movs	r0, #120	; 0x78
 80015aa:	f000 faed 	bl	8001b88 <ssd1306_I2C_Write>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	460a      	mov	r2, r1
 80015c0:	71fb      	strb	r3, [r7, #7]
 80015c2:	4613      	mov	r3, r2
 80015c4:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 80015c6:	2227      	movs	r2, #39	; 0x27
 80015c8:	2100      	movs	r1, #0
 80015ca:	2078      	movs	r0, #120	; 0x78
 80015cc:	f000 fadc 	bl	8001b88 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80015d0:	2200      	movs	r2, #0
 80015d2:	2100      	movs	r1, #0
 80015d4:	2078      	movs	r0, #120	; 0x78
 80015d6:	f000 fad7 	bl	8001b88 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	461a      	mov	r2, r3
 80015de:	2100      	movs	r1, #0
 80015e0:	2078      	movs	r0, #120	; 0x78
 80015e2:	f000 fad1 	bl	8001b88 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	2078      	movs	r0, #120	; 0x78
 80015ec:	f000 facc 	bl	8001b88 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 80015f0:	79bb      	ldrb	r3, [r7, #6]
 80015f2:	461a      	mov	r2, r3
 80015f4:	2100      	movs	r1, #0
 80015f6:	2078      	movs	r0, #120	; 0x78
 80015f8:	f000 fac6 	bl	8001b88 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	2078      	movs	r0, #120	; 0x78
 8001602:	f000 fac1 	bl	8001b88 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8001606:	22ff      	movs	r2, #255	; 0xff
 8001608:	2100      	movs	r1, #0
 800160a:	2078      	movs	r0, #120	; 0x78
 800160c:	f000 fabc 	bl	8001b88 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8001610:	222f      	movs	r2, #47	; 0x2f
 8001612:	2100      	movs	r1, #0
 8001614:	2078      	movs	r0, #120	; 0x78
 8001616:	f000 fab7 	bl	8001b88 <ssd1306_I2C_Write>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001626:	222e      	movs	r2, #46	; 0x2e
 8001628:	2100      	movs	r1, #0
 800162a:	2078      	movs	r0, #120	; 0x78
 800162c:	f000 faac 	bl	8001b88 <ssd1306_I2C_Write>
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800163a:	f000 fa29 	bl	8001a90 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800163e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001642:	2201      	movs	r2, #1
 8001644:	2178      	movs	r1, #120	; 0x78
 8001646:	485b      	ldr	r0, [pc, #364]	; (80017b4 <SSD1306_Init+0x180>)
 8001648:	f001 fe0e 	bl	8003268 <HAL_I2C_IsDeviceReady>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001652:	2300      	movs	r3, #0
 8001654:	e0a9      	b.n	80017aa <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001656:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800165a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800165c:	e002      	b.n	8001664 <SSD1306_Init+0x30>
		p--;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3b01      	subs	r3, #1
 8001662:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f9      	bne.n	800165e <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800166a:	22ae      	movs	r2, #174	; 0xae
 800166c:	2100      	movs	r1, #0
 800166e:	2078      	movs	r0, #120	; 0x78
 8001670:	f000 fa8a 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001674:	2220      	movs	r2, #32
 8001676:	2100      	movs	r1, #0
 8001678:	2078      	movs	r0, #120	; 0x78
 800167a:	f000 fa85 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800167e:	2210      	movs	r2, #16
 8001680:	2100      	movs	r1, #0
 8001682:	2078      	movs	r0, #120	; 0x78
 8001684:	f000 fa80 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001688:	22b0      	movs	r2, #176	; 0xb0
 800168a:	2100      	movs	r1, #0
 800168c:	2078      	movs	r0, #120	; 0x78
 800168e:	f000 fa7b 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001692:	22c8      	movs	r2, #200	; 0xc8
 8001694:	2100      	movs	r1, #0
 8001696:	2078      	movs	r0, #120	; 0x78
 8001698:	f000 fa76 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800169c:	2200      	movs	r2, #0
 800169e:	2100      	movs	r1, #0
 80016a0:	2078      	movs	r0, #120	; 0x78
 80016a2:	f000 fa71 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80016a6:	2210      	movs	r2, #16
 80016a8:	2100      	movs	r1, #0
 80016aa:	2078      	movs	r0, #120	; 0x78
 80016ac:	f000 fa6c 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80016b0:	2240      	movs	r2, #64	; 0x40
 80016b2:	2100      	movs	r1, #0
 80016b4:	2078      	movs	r0, #120	; 0x78
 80016b6:	f000 fa67 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80016ba:	2281      	movs	r2, #129	; 0x81
 80016bc:	2100      	movs	r1, #0
 80016be:	2078      	movs	r0, #120	; 0x78
 80016c0:	f000 fa62 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80016c4:	22ff      	movs	r2, #255	; 0xff
 80016c6:	2100      	movs	r1, #0
 80016c8:	2078      	movs	r0, #120	; 0x78
 80016ca:	f000 fa5d 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80016ce:	22a1      	movs	r2, #161	; 0xa1
 80016d0:	2100      	movs	r1, #0
 80016d2:	2078      	movs	r0, #120	; 0x78
 80016d4:	f000 fa58 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80016d8:	22a6      	movs	r2, #166	; 0xa6
 80016da:	2100      	movs	r1, #0
 80016dc:	2078      	movs	r0, #120	; 0x78
 80016de:	f000 fa53 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80016e2:	22a8      	movs	r2, #168	; 0xa8
 80016e4:	2100      	movs	r1, #0
 80016e6:	2078      	movs	r0, #120	; 0x78
 80016e8:	f000 fa4e 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80016ec:	223f      	movs	r2, #63	; 0x3f
 80016ee:	2100      	movs	r1, #0
 80016f0:	2078      	movs	r0, #120	; 0x78
 80016f2:	f000 fa49 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80016f6:	22a4      	movs	r2, #164	; 0xa4
 80016f8:	2100      	movs	r1, #0
 80016fa:	2078      	movs	r0, #120	; 0x78
 80016fc:	f000 fa44 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001700:	22d3      	movs	r2, #211	; 0xd3
 8001702:	2100      	movs	r1, #0
 8001704:	2078      	movs	r0, #120	; 0x78
 8001706:	f000 fa3f 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	2078      	movs	r0, #120	; 0x78
 8001710:	f000 fa3a 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001714:	22d5      	movs	r2, #213	; 0xd5
 8001716:	2100      	movs	r1, #0
 8001718:	2078      	movs	r0, #120	; 0x78
 800171a:	f000 fa35 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800171e:	22f0      	movs	r2, #240	; 0xf0
 8001720:	2100      	movs	r1, #0
 8001722:	2078      	movs	r0, #120	; 0x78
 8001724:	f000 fa30 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001728:	22d9      	movs	r2, #217	; 0xd9
 800172a:	2100      	movs	r1, #0
 800172c:	2078      	movs	r0, #120	; 0x78
 800172e:	f000 fa2b 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001732:	2222      	movs	r2, #34	; 0x22
 8001734:	2100      	movs	r1, #0
 8001736:	2078      	movs	r0, #120	; 0x78
 8001738:	f000 fa26 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800173c:	22da      	movs	r2, #218	; 0xda
 800173e:	2100      	movs	r1, #0
 8001740:	2078      	movs	r0, #120	; 0x78
 8001742:	f000 fa21 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001746:	2212      	movs	r2, #18
 8001748:	2100      	movs	r1, #0
 800174a:	2078      	movs	r0, #120	; 0x78
 800174c:	f000 fa1c 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001750:	22db      	movs	r2, #219	; 0xdb
 8001752:	2100      	movs	r1, #0
 8001754:	2078      	movs	r0, #120	; 0x78
 8001756:	f000 fa17 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800175a:	2220      	movs	r2, #32
 800175c:	2100      	movs	r1, #0
 800175e:	2078      	movs	r0, #120	; 0x78
 8001760:	f000 fa12 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001764:	228d      	movs	r2, #141	; 0x8d
 8001766:	2100      	movs	r1, #0
 8001768:	2078      	movs	r0, #120	; 0x78
 800176a:	f000 fa0d 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800176e:	2214      	movs	r2, #20
 8001770:	2100      	movs	r1, #0
 8001772:	2078      	movs	r0, #120	; 0x78
 8001774:	f000 fa08 	bl	8001b88 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001778:	22af      	movs	r2, #175	; 0xaf
 800177a:	2100      	movs	r1, #0
 800177c:	2078      	movs	r0, #120	; 0x78
 800177e:	f000 fa03 	bl	8001b88 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001782:	222e      	movs	r2, #46	; 0x2e
 8001784:	2100      	movs	r1, #0
 8001786:	2078      	movs	r0, #120	; 0x78
 8001788:	f000 f9fe 	bl	8001b88 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800178c:	2000      	movs	r0, #0
 800178e:	f000 f843 	bl	8001818 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001792:	f000 f813 	bl	80017bc <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <SSD1306_Init+0x184>)
 8001798:	2200      	movs	r2, #0
 800179a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <SSD1306_Init+0x184>)
 800179e:	2200      	movs	r2, #0
 80017a0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80017a2:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <SSD1306_Init+0x184>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80017a8:	2301      	movs	r3, #1
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000024c 	.word	0x2000024c
 80017b8:	20000760 	.word	0x20000760

080017bc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80017c2:	2300      	movs	r3, #0
 80017c4:	71fb      	strb	r3, [r7, #7]
 80017c6:	e01d      	b.n	8001804 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	3b50      	subs	r3, #80	; 0x50
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461a      	mov	r2, r3
 80017d0:	2100      	movs	r1, #0
 80017d2:	2078      	movs	r0, #120	; 0x78
 80017d4:	f000 f9d8 	bl	8001b88 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	2078      	movs	r0, #120	; 0x78
 80017de:	f000 f9d3 	bl	8001b88 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80017e2:	2210      	movs	r2, #16
 80017e4:	2100      	movs	r1, #0
 80017e6:	2078      	movs	r0, #120	; 0x78
 80017e8:	f000 f9ce 	bl	8001b88 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	01db      	lsls	r3, r3, #7
 80017f0:	4a08      	ldr	r2, [pc, #32]	; (8001814 <SSD1306_UpdateScreen+0x58>)
 80017f2:	441a      	add	r2, r3
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	2140      	movs	r1, #64	; 0x40
 80017f8:	2078      	movs	r0, #120	; 0x78
 80017fa:	f000 f95f 	bl	8001abc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	3301      	adds	r3, #1
 8001802:	71fb      	strb	r3, [r7, #7]
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	2b07      	cmp	r3, #7
 8001808:	d9de      	bls.n	80017c8 <SSD1306_UpdateScreen+0xc>
	}
}
 800180a:	bf00      	nop
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000360 	.word	0x20000360

08001818 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <SSD1306_Fill+0x14>
 8001828:	2300      	movs	r3, #0
 800182a:	e000      	b.n	800182e <SSD1306_Fill+0x16>
 800182c:	23ff      	movs	r3, #255	; 0xff
 800182e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001832:	4619      	mov	r1, r3
 8001834:	4803      	ldr	r0, [pc, #12]	; (8001844 <SSD1306_Fill+0x2c>)
 8001836:	f007 f870 	bl	800891a <memset>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000360 	.word	0x20000360

08001848 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	80fb      	strh	r3, [r7, #6]
 8001852:	460b      	mov	r3, r1
 8001854:	80bb      	strh	r3, [r7, #4]
 8001856:	4613      	mov	r3, r2
 8001858:	70fb      	strb	r3, [r7, #3]
	if (
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	2b7f      	cmp	r3, #127	; 0x7f
 800185e:	d848      	bhi.n	80018f2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001860:	88bb      	ldrh	r3, [r7, #4]
 8001862:	2b3f      	cmp	r3, #63	; 0x3f
 8001864:	d845      	bhi.n	80018f2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001866:	4b26      	ldr	r3, [pc, #152]	; (8001900 <SSD1306_DrawPixel+0xb8>)
 8001868:	791b      	ldrb	r3, [r3, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d006      	beq.n	800187c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	2b00      	cmp	r3, #0
 8001872:	bf0c      	ite	eq
 8001874:	2301      	moveq	r3, #1
 8001876:	2300      	movne	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d11a      	bne.n	80018b8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001882:	88fa      	ldrh	r2, [r7, #6]
 8001884:	88bb      	ldrh	r3, [r7, #4]
 8001886:	08db      	lsrs	r3, r3, #3
 8001888:	b298      	uxth	r0, r3
 800188a:	4603      	mov	r3, r0
 800188c:	01db      	lsls	r3, r3, #7
 800188e:	4413      	add	r3, r2
 8001890:	4a1c      	ldr	r2, [pc, #112]	; (8001904 <SSD1306_DrawPixel+0xbc>)
 8001892:	5cd3      	ldrb	r3, [r2, r3]
 8001894:	b25a      	sxtb	r2, r3
 8001896:	88bb      	ldrh	r3, [r7, #4]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	2101      	movs	r1, #1
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	b25b      	sxtb	r3, r3
 80018a4:	4313      	orrs	r3, r2
 80018a6:	b259      	sxtb	r1, r3
 80018a8:	88fa      	ldrh	r2, [r7, #6]
 80018aa:	4603      	mov	r3, r0
 80018ac:	01db      	lsls	r3, r3, #7
 80018ae:	4413      	add	r3, r2
 80018b0:	b2c9      	uxtb	r1, r1
 80018b2:	4a14      	ldr	r2, [pc, #80]	; (8001904 <SSD1306_DrawPixel+0xbc>)
 80018b4:	54d1      	strb	r1, [r2, r3]
 80018b6:	e01d      	b.n	80018f4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80018b8:	88fa      	ldrh	r2, [r7, #6]
 80018ba:	88bb      	ldrh	r3, [r7, #4]
 80018bc:	08db      	lsrs	r3, r3, #3
 80018be:	b298      	uxth	r0, r3
 80018c0:	4603      	mov	r3, r0
 80018c2:	01db      	lsls	r3, r3, #7
 80018c4:	4413      	add	r3, r2
 80018c6:	4a0f      	ldr	r2, [pc, #60]	; (8001904 <SSD1306_DrawPixel+0xbc>)
 80018c8:	5cd3      	ldrb	r3, [r2, r3]
 80018ca:	b25a      	sxtb	r2, r3
 80018cc:	88bb      	ldrh	r3, [r7, #4]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	2101      	movs	r1, #1
 80018d4:	fa01 f303 	lsl.w	r3, r1, r3
 80018d8:	b25b      	sxtb	r3, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	b25b      	sxtb	r3, r3
 80018de:	4013      	ands	r3, r2
 80018e0:	b259      	sxtb	r1, r3
 80018e2:	88fa      	ldrh	r2, [r7, #6]
 80018e4:	4603      	mov	r3, r0
 80018e6:	01db      	lsls	r3, r3, #7
 80018e8:	4413      	add	r3, r2
 80018ea:	b2c9      	uxtb	r1, r1
 80018ec:	4a05      	ldr	r2, [pc, #20]	; (8001904 <SSD1306_DrawPixel+0xbc>)
 80018ee:	54d1      	strb	r1, [r2, r3]
 80018f0:	e000      	b.n	80018f4 <SSD1306_DrawPixel+0xac>
		return;
 80018f2:	bf00      	nop
	}
}
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000760 	.word	0x20000760
 8001904:	20000360 	.word	0x20000360

08001908 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	460a      	mov	r2, r1
 8001912:	80fb      	strh	r3, [r7, #6]
 8001914:	4613      	mov	r3, r2
 8001916:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001918:	4a05      	ldr	r2, [pc, #20]	; (8001930 <SSD1306_GotoXY+0x28>)
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800191e:	4a04      	ldr	r2, [pc, #16]	; (8001930 <SSD1306_GotoXY+0x28>)
 8001920:	88bb      	ldrh	r3, [r7, #4]
 8001922:	8053      	strh	r3, [r2, #2]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	20000760 	.word	0x20000760

08001934 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	6039      	str	r1, [r7, #0]
 800193e:	71fb      	strb	r3, [r7, #7]
 8001940:	4613      	mov	r3, r2
 8001942:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001944:	4b3a      	ldr	r3, [pc, #232]	; (8001a30 <SSD1306_Putc+0xfc>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	4413      	add	r3, r2
	if (
 8001950:	2b7f      	cmp	r3, #127	; 0x7f
 8001952:	dc07      	bgt.n	8001964 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001954:	4b36      	ldr	r3, [pc, #216]	; (8001a30 <SSD1306_Putc+0xfc>)
 8001956:	885b      	ldrh	r3, [r3, #2]
 8001958:	461a      	mov	r2, r3
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	785b      	ldrb	r3, [r3, #1]
 800195e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001960:	2b3f      	cmp	r3, #63	; 0x3f
 8001962:	dd01      	ble.n	8001968 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001964:	2300      	movs	r3, #0
 8001966:	e05e      	b.n	8001a26 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	e04b      	b.n	8001a06 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	3b20      	subs	r3, #32
 8001976:	6839      	ldr	r1, [r7, #0]
 8001978:	7849      	ldrb	r1, [r1, #1]
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	4619      	mov	r1, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	440b      	add	r3, r1
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	e030      	b.n	80019f4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d010      	beq.n	80019c4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80019a2:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <SSD1306_Putc+0xfc>)
 80019a4:	881a      	ldrh	r2, [r3, #0]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	b298      	uxth	r0, r3
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <SSD1306_Putc+0xfc>)
 80019b0:	885a      	ldrh	r2, [r3, #2]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	4413      	add	r3, r2
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	79ba      	ldrb	r2, [r7, #6]
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff ff43 	bl	8001848 <SSD1306_DrawPixel>
 80019c2:	e014      	b.n	80019ee <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80019c4:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <SSD1306_Putc+0xfc>)
 80019c6:	881a      	ldrh	r2, [r3, #0]
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	b298      	uxth	r0, r3
 80019d0:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <SSD1306_Putc+0xfc>)
 80019d2:	885a      	ldrh	r2, [r3, #2]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	4413      	add	r3, r2
 80019da:	b299      	uxth	r1, r3
 80019dc:	79bb      	ldrb	r3, [r7, #6]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	bf0c      	ite	eq
 80019e2:	2301      	moveq	r3, #1
 80019e4:	2300      	movne	r3, #0
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	461a      	mov	r2, r3
 80019ea:	f7ff ff2d 	bl	8001848 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	3301      	adds	r3, #1
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d3c8      	bcc.n	8001992 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	3301      	adds	r3, #1
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	785b      	ldrb	r3, [r3, #1]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d3ad      	bcc.n	800196e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001a12:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <SSD1306_Putc+0xfc>)
 8001a14:	881a      	ldrh	r2, [r3, #0]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <SSD1306_Putc+0xfc>)
 8001a22:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001a24:	79fb      	ldrb	r3, [r7, #7]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000760 	.word	0x20000760

08001a34 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001a42:	e012      	b.n	8001a6a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	79fa      	ldrb	r2, [r7, #7]
 8001a4a:	68b9      	ldr	r1, [r7, #8]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff71 	bl	8001934 <SSD1306_Putc>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d002      	beq.n	8001a64 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	e008      	b.n	8001a76 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	3301      	adds	r3, #1
 8001a68:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1e8      	bne.n	8001a44 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	781b      	ldrb	r3, [r3, #0]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001a82:	2000      	movs	r0, #0
 8001a84:	f7ff fec8 	bl	8001818 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001a88:	f7ff fe98 	bl	80017bc <SSD1306_UpdateScreen>
}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <ssd1306_I2C_Init+0x28>)
 8001a98:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a9a:	e002      	b.n	8001aa2 <ssd1306_I2C_Init+0x12>
		p--;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f9      	bne.n	8001a9c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	0003d090 	.word	0x0003d090

08001abc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b0c7      	sub	sp, #284	; 0x11c
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	4608      	mov	r0, r1
 8001ac6:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001aca:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001ace:	600a      	str	r2, [r1, #0]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ad6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001ada:	4622      	mov	r2, r4
 8001adc:	701a      	strb	r2, [r3, #0]
 8001ade:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001ae2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001aee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001af2:	460a      	mov	r2, r1
 8001af4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001af6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001afa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001afe:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b02:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001b06:	7812      	ldrb	r2, [r2, #0]
 8001b08:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b10:	e015      	b.n	8001b3e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001b12:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b16:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b1a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	441a      	add	r2, r3
 8001b22:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b26:	3301      	adds	r3, #1
 8001b28:	7811      	ldrb	r1, [r2, #0]
 8001b2a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b2e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001b32:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001b34:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b38:	3301      	adds	r3, #1
 8001b3a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001b3e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001b48:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001b4c:	8812      	ldrh	r2, [r2, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d8df      	bhi.n	8001b12 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001b52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b56:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b299      	uxth	r1, r3
 8001b5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	200a      	movs	r0, #10
 8001b72:	9000      	str	r0, [sp, #0]
 8001b74:	4803      	ldr	r0, [pc, #12]	; (8001b84 <ssd1306_I2C_WriteMulti+0xc8>)
 8001b76:	f001 fa79 	bl	800306c <HAL_I2C_Master_Transmit>
}
 8001b7a:	bf00      	nop
 8001b7c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd90      	pop	{r4, r7, pc}
 8001b84:	2000024c 	.word	0x2000024c

08001b88 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
 8001b92:	460b      	mov	r3, r1
 8001b94:	71bb      	strb	r3, [r7, #6]
 8001b96:	4613      	mov	r3, r2
 8001b98:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001b9a:	79bb      	ldrb	r3, [r7, #6]
 8001b9c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001b9e:	797b      	ldrb	r3, [r7, #5]
 8001ba0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	b299      	uxth	r1, r3
 8001ba6:	f107 020c 	add.w	r2, r7, #12
 8001baa:	230a      	movs	r3, #10
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2302      	movs	r3, #2
 8001bb0:	4803      	ldr	r0, [pc, #12]	; (8001bc0 <ssd1306_I2C_Write+0x38>)
 8001bb2:	f001 fa5b 	bl	800306c <HAL_I2C_Master_Transmit>
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	2000024c 	.word	0x2000024c

08001bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_MspInit+0x54>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a11      	ldr	r2, [pc, #68]	; (8001c18 <HAL_MspInit+0x54>)
 8001bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <HAL_MspInit+0x54>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_MspInit+0x54>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <HAL_MspInit+0x54>)
 8001bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <HAL_MspInit+0x54>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c02:	2200      	movs	r2, #0
 8001c04:	210f      	movs	r1, #15
 8001c06:	f06f 0001 	mvn.w	r0, #1
 8001c0a:	f000 ff2e 	bl	8002a6a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800

08001c1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a17      	ldr	r2, [pc, #92]	; (8001c98 <HAL_ADC_MspInit+0x7c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d127      	bne.n	8001c8e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <HAL_ADC_MspInit+0x80>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	4a15      	ldr	r2, [pc, #84]	; (8001c9c <HAL_ADC_MspInit+0x80>)
 8001c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4e:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <HAL_ADC_MspInit+0x80>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <HAL_ADC_MspInit+0x80>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a0e      	ldr	r2, [pc, #56]	; (8001c9c <HAL_ADC_MspInit+0x80>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <HAL_ADC_MspInit+0x80>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c76:	2301      	movs	r3, #1
 8001c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c82:	f107 0314 	add.w	r3, r7, #20
 8001c86:	4619      	mov	r1, r3
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <HAL_ADC_MspInit+0x84>)
 8001c8a:	f000 ff17 	bl	8002abc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c8e:	bf00      	nop
 8001c90:	3728      	adds	r7, #40	; 0x28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40012000 	.word	0x40012000
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020000 	.word	0x40020000

08001ca4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <HAL_I2C_MspInit+0x84>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d12b      	bne.n	8001d1e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_I2C_MspInit+0x88>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <HAL_I2C_MspInit+0x88>)
 8001cd0:	f043 0302 	orr.w	r3, r3, #2
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <HAL_I2C_MspInit+0x88>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ce2:	23c0      	movs	r3, #192	; 0xc0
 8001ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce6:	2312      	movs	r3, #18
 8001ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480c      	ldr	r0, [pc, #48]	; (8001d30 <HAL_I2C_MspInit+0x8c>)
 8001cfe:	f000 fedd 	bl	8002abc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_I2C_MspInit+0x88>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	4a08      	ldr	r2, [pc, #32]	; (8001d2c <HAL_I2C_MspInit+0x88>)
 8001d0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d10:	6413      	str	r3, [r2, #64]	; 0x40
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_I2C_MspInit+0x88>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d1e:	bf00      	nop
 8001d20:	3728      	adds	r7, #40	; 0x28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40005400 	.word	0x40005400
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020400 	.word	0x40020400

08001d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	; 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a19      	ldr	r2, [pc, #100]	; (8001db8 <HAL_UART_MspInit+0x84>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d12b      	bne.n	8001dae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <HAL_UART_MspInit+0x88>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a17      	ldr	r2, [pc, #92]	; (8001dbc <HAL_UART_MspInit+0x88>)
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <HAL_UART_MspInit+0x88>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_UART_MspInit+0x88>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a10      	ldr	r2, [pc, #64]	; (8001dbc <HAL_UART_MspInit+0x88>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <HAL_UART_MspInit+0x88>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d8e:	230c      	movs	r3, #12
 8001d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d9e:	2307      	movs	r3, #7
 8001da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	4619      	mov	r1, r3
 8001da8:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <HAL_UART_MspInit+0x8c>)
 8001daa:	f000 fe87 	bl	8002abc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001dae:	bf00      	nop
 8001db0:	3728      	adds	r7, #40	; 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40004400 	.word	0x40004400
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40020000 	.word	0x40020000

08001dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <NMI_Handler+0x4>

08001dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dce:	e7fe      	b.n	8001dce <HardFault_Handler+0x4>

08001dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <MemManage_Handler+0x4>

08001dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dda:	e7fe      	b.n	8001dda <BusFault_Handler+0x4>

08001ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <UsageFault_Handler+0x4>

08001de2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001df4:	f000 f95c 	bl	80020b0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001df8:	f004 fd30 	bl	800685c <xTaskGetSchedulerState>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d001      	beq.n	8001e06 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001e02:	f005 fb19 	bl	8007438 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  return 1;
 8001e0e:	2301      	movs	r3, #1
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <_kill>:

int _kill(int pid, int sig)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e24:	f006 fdcc 	bl	80089c0 <__errno>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2216      	movs	r2, #22
 8001e2c:	601a      	str	r2, [r3, #0]
  return -1;
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_exit>:

void _exit (int status)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e42:	f04f 31ff 	mov.w	r1, #4294967295
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ffe7 	bl	8001e1a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e4c:	e7fe      	b.n	8001e4c <_exit+0x12>

08001e4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	e00a      	b.n	8001e76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e60:	f3af 8000 	nop.w
 8001e64:	4601      	mov	r1, r0
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	60ba      	str	r2, [r7, #8]
 8001e6c:	b2ca      	uxtb	r2, r1
 8001e6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	3301      	adds	r3, #1
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	dbf0      	blt.n	8001e60 <_read+0x12>
  }

  return len;
 8001e7e:	687b      	ldr	r3, [r7, #4]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3718      	adds	r7, #24
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	e009      	b.n	8001eae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	60ba      	str	r2, [r7, #8]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff f8dc 	bl	8001060 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	dbf1      	blt.n	8001e9a <_write+0x12>
  }
  return len;
 8001eb6:	687b      	ldr	r3, [r7, #4]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_close>:

int _close(int file)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ec8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee8:	605a      	str	r2, [r3, #4]
  return 0;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <_isatty>:

int _isatty(int file)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f00:	2301      	movs	r3, #1
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b085      	sub	sp, #20
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	60f8      	str	r0, [r7, #12]
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f30:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <_sbrk+0x5c>)
 8001f32:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <_sbrk+0x60>)
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <_sbrk+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <_sbrk+0x64>)
 8001f46:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <_sbrk+0x68>)
 8001f48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d207      	bcs.n	8001f68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f58:	f006 fd32 	bl	80089c0 <__errno>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	220c      	movs	r2, #12
 8001f60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f62:	f04f 33ff 	mov.w	r3, #4294967295
 8001f66:	e009      	b.n	8001f7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <_sbrk+0x64>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <_sbrk+0x64>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	4a05      	ldr	r2, [pc, #20]	; (8001f8c <_sbrk+0x64>)
 8001f78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20020000 	.word	0x20020000
 8001f88:	00000400 	.word	0x00000400
 8001f8c:	20000768 	.word	0x20000768
 8001f90:	20005210 	.word	0x20005210

08001f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <SystemInit+0x20>)
 8001f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9e:	4a05      	ldr	r2, [pc, #20]	; (8001fb4 <SystemInit+0x20>)
 8001fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fbc:	f7ff ffea 	bl	8001f94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fc0:	480c      	ldr	r0, [pc, #48]	; (8001ff4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fc2:	490d      	ldr	r1, [pc, #52]	; (8001ff8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc8:	e002      	b.n	8001fd0 <LoopCopyDataInit>

08001fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fce:	3304      	adds	r3, #4

08001fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd4:	d3f9      	bcc.n	8001fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fd8:	4c0a      	ldr	r4, [pc, #40]	; (8002004 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fdc:	e001      	b.n	8001fe2 <LoopFillZerobss>

08001fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe0:	3204      	adds	r2, #4

08001fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe4:	d3fb      	bcc.n	8001fde <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001fe6:	f006 fcf1 	bl	80089cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fea:	f7ff f845 	bl	8001078 <main>
  bx  lr    
 8001fee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ff0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001ffc:	0800e778 	.word	0x0800e778
  ldr r2, =_sbss
 8002000:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002004:	2000520c 	.word	0x2000520c

08002008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002008:	e7fe      	b.n	8002008 <ADC_IRQHandler>
	...

0800200c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002010:	4b0e      	ldr	r3, [pc, #56]	; (800204c <HAL_Init+0x40>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0d      	ldr	r2, [pc, #52]	; (800204c <HAL_Init+0x40>)
 8002016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800201a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_Init+0x40>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a0a      	ldr	r2, [pc, #40]	; (800204c <HAL_Init+0x40>)
 8002022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002026:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <HAL_Init+0x40>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a07      	ldr	r2, [pc, #28]	; (800204c <HAL_Init+0x40>)
 800202e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002034:	2003      	movs	r0, #3
 8002036:	f000 fd0d 	bl	8002a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800203a:	200f      	movs	r0, #15
 800203c:	f000 f808 	bl	8002050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002040:	f7ff fdc0 	bl	8001bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023c00 	.word	0x40023c00

08002050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_InitTick+0x54>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <HAL_InitTick+0x58>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	4619      	mov	r1, r3
 8002062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002066:	fbb3 f3f1 	udiv	r3, r3, r1
 800206a:	fbb2 f3f3 	udiv	r3, r2, r3
 800206e:	4618      	mov	r0, r3
 8002070:	f000 fd17 	bl	8002aa2 <HAL_SYSTICK_Config>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e00e      	b.n	800209c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b0f      	cmp	r3, #15
 8002082:	d80a      	bhi.n	800209a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002084:	2200      	movs	r2, #0
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f000 fced 	bl	8002a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002090:	4a06      	ldr	r2, [pc, #24]	; (80020ac <HAL_InitTick+0x5c>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e000      	b.n	800209c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000010 	.word	0x20000010
 80020a8:	20000018 	.word	0x20000018
 80020ac:	20000014 	.word	0x20000014

080020b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_IncTick+0x20>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	461a      	mov	r2, r3
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_IncTick+0x24>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <HAL_IncTick+0x24>)
 80020c2:	6013      	str	r3, [r2, #0]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20000018 	.word	0x20000018
 80020d4:	2000076c 	.word	0x2000076c

080020d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return uwTick;
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <HAL_GetTick+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	2000076c 	.word	0x2000076c

080020f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f8:	f7ff ffee 	bl	80020d8 <HAL_GetTick>
 80020fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002108:	d005      	beq.n	8002116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800210a:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <HAL_Delay+0x44>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4413      	add	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002116:	bf00      	nop
 8002118:	f7ff ffde 	bl	80020d8 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	429a      	cmp	r2, r3
 8002126:	d8f7      	bhi.n	8002118 <HAL_Delay+0x28>
  {
  }
}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000018 	.word	0x20000018

08002138 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e033      	b.n	80021b6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	2b00      	cmp	r3, #0
 8002154:	d109      	bne.n	800216a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff fd60 	bl	8001c1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	2b00      	cmp	r3, #0
 8002174:	d118      	bne.n	80021a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800217e:	f023 0302 	bic.w	r3, r3, #2
 8002182:	f043 0202 	orr.w	r2, r3, #2
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 fab4 	bl	80026f8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f023 0303 	bic.w	r3, r3, #3
 800219e:	f043 0201 	orr.w	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	641a      	str	r2, [r3, #64]	; 0x40
 80021a6:	e001      	b.n	80021ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_ADC_Start+0x1a>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e0b2      	b.n	8002340 <HAL_ADC_Start+0x180>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d018      	beq.n	8002222 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002200:	4b52      	ldr	r3, [pc, #328]	; (800234c <HAL_ADC_Start+0x18c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a52      	ldr	r2, [pc, #328]	; (8002350 <HAL_ADC_Start+0x190>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	0c9a      	lsrs	r2, r3, #18
 800220c:	4613      	mov	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	4413      	add	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002214:	e002      	b.n	800221c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	3b01      	subs	r3, #1
 800221a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f9      	bne.n	8002216 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b01      	cmp	r3, #1
 800222e:	d17a      	bne.n	8002326 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224e:	2b00      	cmp	r3, #0
 8002250:	d007      	beq.n	8002262 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800225a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800226a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800226e:	d106      	bne.n	800227e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	f023 0206 	bic.w	r2, r3, #6
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	645a      	str	r2, [r3, #68]	; 0x44
 800227c:	e002      	b.n	8002284 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800228c:	4b31      	ldr	r3, [pc, #196]	; (8002354 <HAL_ADC_Start+0x194>)
 800228e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002298:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 031f 	and.w	r3, r3, #31
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d12a      	bne.n	80022fc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a2b      	ldr	r2, [pc, #172]	; (8002358 <HAL_ADC_Start+0x198>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d015      	beq.n	80022dc <HAL_ADC_Start+0x11c>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a29      	ldr	r2, [pc, #164]	; (800235c <HAL_ADC_Start+0x19c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d105      	bne.n	80022c6 <HAL_ADC_Start+0x106>
 80022ba:	4b26      	ldr	r3, [pc, #152]	; (8002354 <HAL_ADC_Start+0x194>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a25      	ldr	r2, [pc, #148]	; (8002360 <HAL_ADC_Start+0x1a0>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d136      	bne.n	800233e <HAL_ADC_Start+0x17e>
 80022d0:	4b20      	ldr	r3, [pc, #128]	; (8002354 <HAL_ADC_Start+0x194>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d130      	bne.n	800233e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d129      	bne.n	800233e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	e020      	b.n	800233e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a15      	ldr	r2, [pc, #84]	; (8002358 <HAL_ADC_Start+0x198>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d11b      	bne.n	800233e <HAL_ADC_Start+0x17e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d114      	bne.n	800233e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	e00b      	b.n	800233e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f043 0210 	orr.w	r2, r3, #16
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f043 0201 	orr.w	r2, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	20000010 	.word	0x20000010
 8002350:	431bde83 	.word	0x431bde83
 8002354:	40012300 	.word	0x40012300
 8002358:	40012000 	.word	0x40012000
 800235c:	40012100 	.word	0x40012100
 8002360:	40012200 	.word	0x40012200

08002364 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002380:	d113      	bne.n	80023aa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800238c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002390:	d10b      	bne.n	80023aa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f043 0220 	orr.w	r2, r3, #32
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e063      	b.n	8002472 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80023aa:	f7ff fe95 	bl	80020d8 <HAL_GetTick>
 80023ae:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023b0:	e021      	b.n	80023f6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b8:	d01d      	beq.n	80023f6 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d007      	beq.n	80023d0 <HAL_ADC_PollForConversion+0x6c>
 80023c0:	f7ff fe8a 	bl	80020d8 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d212      	bcs.n	80023f6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d00b      	beq.n	80023f6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f043 0204 	orr.w	r2, r3, #4
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e03d      	b.n	8002472 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b02      	cmp	r3, #2
 8002402:	d1d6      	bne.n	80023b2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0212 	mvn.w	r2, #18
 800240c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d123      	bne.n	8002470 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800242c:	2b00      	cmp	r3, #0
 800242e:	d11f      	bne.n	8002470 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002436:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800243a:	2b00      	cmp	r3, #0
 800243c:	d006      	beq.n	800244c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002448:	2b00      	cmp	r3, #0
 800244a:	d111      	bne.n	8002470 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d105      	bne.n	8002470 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	f043 0201 	orr.w	r2, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x1c>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e113      	b.n	80026d8 <HAL_ADC_ConfigChannel+0x244>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b09      	cmp	r3, #9
 80024be:	d925      	bls.n	800250c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68d9      	ldr	r1, [r3, #12]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	4613      	mov	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4413      	add	r3, r2
 80024d4:	3b1e      	subs	r3, #30
 80024d6:	2207      	movs	r2, #7
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43da      	mvns	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	400a      	ands	r2, r1
 80024e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68d9      	ldr	r1, [r3, #12]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	4603      	mov	r3, r0
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4403      	add	r3, r0
 80024fe:	3b1e      	subs	r3, #30
 8002500:	409a      	lsls	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	e022      	b.n	8002552 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6919      	ldr	r1, [r3, #16]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	b29b      	uxth	r3, r3
 8002518:	461a      	mov	r2, r3
 800251a:	4613      	mov	r3, r2
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	4413      	add	r3, r2
 8002520:	2207      	movs	r2, #7
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43da      	mvns	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	400a      	ands	r2, r1
 800252e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6919      	ldr	r1, [r3, #16]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	4618      	mov	r0, r3
 8002542:	4603      	mov	r3, r0
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	4403      	add	r3, r0
 8002548:	409a      	lsls	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b06      	cmp	r3, #6
 8002558:	d824      	bhi.n	80025a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	3b05      	subs	r3, #5
 800256c:	221f      	movs	r2, #31
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	400a      	ands	r2, r1
 800257a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	b29b      	uxth	r3, r3
 8002588:	4618      	mov	r0, r3
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	3b05      	subs	r3, #5
 8002596:	fa00 f203 	lsl.w	r2, r0, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	430a      	orrs	r2, r1
 80025a0:	635a      	str	r2, [r3, #52]	; 0x34
 80025a2:	e04c      	b.n	800263e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b0c      	cmp	r3, #12
 80025aa:	d824      	bhi.n	80025f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	3b23      	subs	r3, #35	; 0x23
 80025be:	221f      	movs	r2, #31
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43da      	mvns	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	400a      	ands	r2, r1
 80025cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	b29b      	uxth	r3, r3
 80025da:	4618      	mov	r0, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	3b23      	subs	r3, #35	; 0x23
 80025e8:	fa00 f203 	lsl.w	r2, r0, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
 80025f4:	e023      	b.n	800263e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4413      	add	r3, r2
 8002606:	3b41      	subs	r3, #65	; 0x41
 8002608:	221f      	movs	r2, #31
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43da      	mvns	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	400a      	ands	r2, r1
 8002616:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	b29b      	uxth	r3, r3
 8002624:	4618      	mov	r0, r3
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	4413      	add	r3, r2
 8002630:	3b41      	subs	r3, #65	; 0x41
 8002632:	fa00 f203 	lsl.w	r2, r0, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800263e:	4b29      	ldr	r3, [pc, #164]	; (80026e4 <HAL_ADC_ConfigChannel+0x250>)
 8002640:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a28      	ldr	r2, [pc, #160]	; (80026e8 <HAL_ADC_ConfigChannel+0x254>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d10f      	bne.n	800266c <HAL_ADC_ConfigChannel+0x1d8>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b12      	cmp	r3, #18
 8002652:	d10b      	bne.n	800266c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a1d      	ldr	r2, [pc, #116]	; (80026e8 <HAL_ADC_ConfigChannel+0x254>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d12b      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x23a>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a1c      	ldr	r2, [pc, #112]	; (80026ec <HAL_ADC_ConfigChannel+0x258>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d003      	beq.n	8002688 <HAL_ADC_ConfigChannel+0x1f4>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b11      	cmp	r3, #17
 8002686:	d122      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a11      	ldr	r2, [pc, #68]	; (80026ec <HAL_ADC_ConfigChannel+0x258>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d111      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026aa:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_ADC_ConfigChannel+0x25c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a11      	ldr	r2, [pc, #68]	; (80026f4 <HAL_ADC_ConfigChannel+0x260>)
 80026b0:	fba2 2303 	umull	r2, r3, r2, r3
 80026b4:	0c9a      	lsrs	r2, r3, #18
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026c0:	e002      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	3b01      	subs	r3, #1
 80026c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f9      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	40012300 	.word	0x40012300
 80026e8:	40012000 	.word	0x40012000
 80026ec:	10000012 	.word	0x10000012
 80026f0:	20000010 	.word	0x20000010
 80026f4:	431bde83 	.word	0x431bde83

080026f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002700:	4b79      	ldr	r3, [pc, #484]	; (80028e8 <ADC_Init+0x1f0>)
 8002702:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	431a      	orrs	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800272c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6859      	ldr	r1, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	021a      	lsls	r2, r3, #8
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002750:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6859      	ldr	r1, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689a      	ldr	r2, [r3, #8]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002772:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6899      	ldr	r1, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	4a58      	ldr	r2, [pc, #352]	; (80028ec <ADC_Init+0x1f4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d022      	beq.n	80027d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800279e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6899      	ldr	r1, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6899      	ldr	r1, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	e00f      	b.n	80027f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027f4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0202 	bic.w	r2, r2, #2
 8002804:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6899      	ldr	r1, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	7e1b      	ldrb	r3, [r3, #24]
 8002810:	005a      	lsls	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d01b      	beq.n	800285c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002832:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002842:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6859      	ldr	r1, [r3, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	3b01      	subs	r3, #1
 8002850:	035a      	lsls	r2, r3, #13
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	e007      	b.n	800286c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800286a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800287a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	3b01      	subs	r3, #1
 8002888:	051a      	lsls	r2, r3, #20
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6899      	ldr	r1, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028ae:	025a      	lsls	r2, r3, #9
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6899      	ldr	r1, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	029a      	lsls	r2, r3, #10
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	609a      	str	r2, [r3, #8]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	40012300 	.word	0x40012300
 80028ec:	0f000001 	.word	0x0f000001

080028f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <__NVIC_SetPriorityGrouping+0x44>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800290c:	4013      	ands	r3, r2
 800290e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800291c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002922:	4a04      	ldr	r2, [pc, #16]	; (8002934 <__NVIC_SetPriorityGrouping+0x44>)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	60d3      	str	r3, [r2, #12]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800293c:	4b04      	ldr	r3, [pc, #16]	; (8002950 <__NVIC_GetPriorityGrouping+0x18>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	0a1b      	lsrs	r3, r3, #8
 8002942:	f003 0307 	and.w	r3, r3, #7
}
 8002946:	4618      	mov	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	6039      	str	r1, [r7, #0]
 800295e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002964:	2b00      	cmp	r3, #0
 8002966:	db0a      	blt.n	800297e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	b2da      	uxtb	r2, r3
 800296c:	490c      	ldr	r1, [pc, #48]	; (80029a0 <__NVIC_SetPriority+0x4c>)
 800296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002972:	0112      	lsls	r2, r2, #4
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	440b      	add	r3, r1
 8002978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800297c:	e00a      	b.n	8002994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	b2da      	uxtb	r2, r3
 8002982:	4908      	ldr	r1, [pc, #32]	; (80029a4 <__NVIC_SetPriority+0x50>)
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	3b04      	subs	r3, #4
 800298c:	0112      	lsls	r2, r2, #4
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	440b      	add	r3, r1
 8002992:	761a      	strb	r2, [r3, #24]
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	e000e100 	.word	0xe000e100
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b089      	sub	sp, #36	; 0x24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f1c3 0307 	rsb	r3, r3, #7
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	bf28      	it	cs
 80029c6:	2304      	movcs	r3, #4
 80029c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3304      	adds	r3, #4
 80029ce:	2b06      	cmp	r3, #6
 80029d0:	d902      	bls.n	80029d8 <NVIC_EncodePriority+0x30>
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3b03      	subs	r3, #3
 80029d6:	e000      	b.n	80029da <NVIC_EncodePriority+0x32>
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029dc:	f04f 32ff 	mov.w	r2, #4294967295
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43da      	mvns	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	401a      	ands	r2, r3
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f0:	f04f 31ff 	mov.w	r1, #4294967295
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	fa01 f303 	lsl.w	r3, r1, r3
 80029fa:	43d9      	mvns	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a00:	4313      	orrs	r3, r2
         );
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3724      	adds	r7, #36	; 0x24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
	...

08002a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a20:	d301      	bcc.n	8002a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a22:	2301      	movs	r3, #1
 8002a24:	e00f      	b.n	8002a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a26:	4a0a      	ldr	r2, [pc, #40]	; (8002a50 <SysTick_Config+0x40>)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a2e:	210f      	movs	r1, #15
 8002a30:	f04f 30ff 	mov.w	r0, #4294967295
 8002a34:	f7ff ff8e 	bl	8002954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <SysTick_Config+0x40>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a3e:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <SysTick_Config+0x40>)
 8002a40:	2207      	movs	r2, #7
 8002a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	e000e010 	.word	0xe000e010

08002a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7ff ff47 	bl	80028f0 <__NVIC_SetPriorityGrouping>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b086      	sub	sp, #24
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	4603      	mov	r3, r0
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
 8002a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a7c:	f7ff ff5c 	bl	8002938 <__NVIC_GetPriorityGrouping>
 8002a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	6978      	ldr	r0, [r7, #20]
 8002a88:	f7ff ff8e 	bl	80029a8 <NVIC_EncodePriority>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a92:	4611      	mov	r1, r2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff5d 	bl	8002954 <__NVIC_SetPriority>
}
 8002a9a:	bf00      	nop
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ffb0 	bl	8002a10 <SysTick_Config>
 8002ab0:	4603      	mov	r3, r0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b089      	sub	sp, #36	; 0x24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	e165      	b.n	8002da4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ad8:	2201      	movs	r2, #1
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	f040 8154 	bne.w	8002d9e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d005      	beq.n	8002b0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d130      	bne.n	8002b70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	2203      	movs	r2, #3
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b44:	2201      	movs	r2, #1
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	091b      	lsrs	r3, r3, #4
 8002b5a:	f003 0201 	and.w	r2, r3, #1
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d017      	beq.n	8002bac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	2203      	movs	r2, #3
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d123      	bne.n	8002c00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	08da      	lsrs	r2, r3, #3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3208      	adds	r2, #8
 8002bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	220f      	movs	r2, #15
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	08da      	lsrs	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3208      	adds	r2, #8
 8002bfa:	69b9      	ldr	r1, [r7, #24]
 8002bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 0203 	and.w	r2, r3, #3
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 80ae 	beq.w	8002d9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	4b5d      	ldr	r3, [pc, #372]	; (8002dbc <HAL_GPIO_Init+0x300>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	4a5c      	ldr	r2, [pc, #368]	; (8002dbc <HAL_GPIO_Init+0x300>)
 8002c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c50:	6453      	str	r3, [r2, #68]	; 0x44
 8002c52:	4b5a      	ldr	r3, [pc, #360]	; (8002dbc <HAL_GPIO_Init+0x300>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c5e:	4a58      	ldr	r2, [pc, #352]	; (8002dc0 <HAL_GPIO_Init+0x304>)
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	089b      	lsrs	r3, r3, #2
 8002c64:	3302      	adds	r3, #2
 8002c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	220f      	movs	r2, #15
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a4f      	ldr	r2, [pc, #316]	; (8002dc4 <HAL_GPIO_Init+0x308>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d025      	beq.n	8002cd6 <HAL_GPIO_Init+0x21a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a4e      	ldr	r2, [pc, #312]	; (8002dc8 <HAL_GPIO_Init+0x30c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d01f      	beq.n	8002cd2 <HAL_GPIO_Init+0x216>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a4d      	ldr	r2, [pc, #308]	; (8002dcc <HAL_GPIO_Init+0x310>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d019      	beq.n	8002cce <HAL_GPIO_Init+0x212>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a4c      	ldr	r2, [pc, #304]	; (8002dd0 <HAL_GPIO_Init+0x314>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d013      	beq.n	8002cca <HAL_GPIO_Init+0x20e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a4b      	ldr	r2, [pc, #300]	; (8002dd4 <HAL_GPIO_Init+0x318>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d00d      	beq.n	8002cc6 <HAL_GPIO_Init+0x20a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4a      	ldr	r2, [pc, #296]	; (8002dd8 <HAL_GPIO_Init+0x31c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d007      	beq.n	8002cc2 <HAL_GPIO_Init+0x206>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a49      	ldr	r2, [pc, #292]	; (8002ddc <HAL_GPIO_Init+0x320>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d101      	bne.n	8002cbe <HAL_GPIO_Init+0x202>
 8002cba:	2306      	movs	r3, #6
 8002cbc:	e00c      	b.n	8002cd8 <HAL_GPIO_Init+0x21c>
 8002cbe:	2307      	movs	r3, #7
 8002cc0:	e00a      	b.n	8002cd8 <HAL_GPIO_Init+0x21c>
 8002cc2:	2305      	movs	r3, #5
 8002cc4:	e008      	b.n	8002cd8 <HAL_GPIO_Init+0x21c>
 8002cc6:	2304      	movs	r3, #4
 8002cc8:	e006      	b.n	8002cd8 <HAL_GPIO_Init+0x21c>
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e004      	b.n	8002cd8 <HAL_GPIO_Init+0x21c>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	e002      	b.n	8002cd8 <HAL_GPIO_Init+0x21c>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <HAL_GPIO_Init+0x21c>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	69fa      	ldr	r2, [r7, #28]
 8002cda:	f002 0203 	and.w	r2, r2, #3
 8002cde:	0092      	lsls	r2, r2, #2
 8002ce0:	4093      	lsls	r3, r2
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ce8:	4935      	ldr	r1, [pc, #212]	; (8002dc0 <HAL_GPIO_Init+0x304>)
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	089b      	lsrs	r3, r3, #2
 8002cee:	3302      	adds	r3, #2
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cf6:	4b3a      	ldr	r3, [pc, #232]	; (8002de0 <HAL_GPIO_Init+0x324>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d1a:	4a31      	ldr	r2, [pc, #196]	; (8002de0 <HAL_GPIO_Init+0x324>)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d20:	4b2f      	ldr	r3, [pc, #188]	; (8002de0 <HAL_GPIO_Init+0x324>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d44:	4a26      	ldr	r2, [pc, #152]	; (8002de0 <HAL_GPIO_Init+0x324>)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d4a:	4b25      	ldr	r3, [pc, #148]	; (8002de0 <HAL_GPIO_Init+0x324>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	43db      	mvns	r3, r3
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	4013      	ands	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d6e:	4a1c      	ldr	r2, [pc, #112]	; (8002de0 <HAL_GPIO_Init+0x324>)
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d74:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <HAL_GPIO_Init+0x324>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4013      	ands	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d98:	4a11      	ldr	r2, [pc, #68]	; (8002de0 <HAL_GPIO_Init+0x324>)
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	3301      	adds	r3, #1
 8002da2:	61fb      	str	r3, [r7, #28]
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	2b0f      	cmp	r3, #15
 8002da8:	f67f ae96 	bls.w	8002ad8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dac:	bf00      	nop
 8002dae:	bf00      	nop
 8002db0:	3724      	adds	r7, #36	; 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	40013800 	.word	0x40013800
 8002dc4:	40020000 	.word	0x40020000
 8002dc8:	40020400 	.word	0x40020400
 8002dcc:	40020800 	.word	0x40020800
 8002dd0:	40020c00 	.word	0x40020c00
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40021400 	.word	0x40021400
 8002ddc:	40021800 	.word	0x40021800
 8002de0:	40013c00 	.word	0x40013c00

08002de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e12b      	b.n	800304e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe ff4a 	bl	8001ca4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2224      	movs	r2, #36	; 0x24
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0201 	bic.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e48:	f000 fe8a 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
 8002e4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4a81      	ldr	r2, [pc, #516]	; (8003058 <HAL_I2C_Init+0x274>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d807      	bhi.n	8002e68 <HAL_I2C_Init+0x84>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4a80      	ldr	r2, [pc, #512]	; (800305c <HAL_I2C_Init+0x278>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	bf94      	ite	ls
 8002e60:	2301      	movls	r3, #1
 8002e62:	2300      	movhi	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	e006      	b.n	8002e76 <HAL_I2C_Init+0x92>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4a7d      	ldr	r2, [pc, #500]	; (8003060 <HAL_I2C_Init+0x27c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	bf94      	ite	ls
 8002e70:	2301      	movls	r3, #1
 8002e72:	2300      	movhi	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e0e7      	b.n	800304e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4a78      	ldr	r2, [pc, #480]	; (8003064 <HAL_I2C_Init+0x280>)
 8002e82:	fba2 2303 	umull	r2, r3, r2, r3
 8002e86:	0c9b      	lsrs	r3, r3, #18
 8002e88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	4a6a      	ldr	r2, [pc, #424]	; (8003058 <HAL_I2C_Init+0x274>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d802      	bhi.n	8002eb8 <HAL_I2C_Init+0xd4>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	e009      	b.n	8002ecc <HAL_I2C_Init+0xe8>
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ebe:	fb02 f303 	mul.w	r3, r2, r3
 8002ec2:	4a69      	ldr	r2, [pc, #420]	; (8003068 <HAL_I2C_Init+0x284>)
 8002ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec8:	099b      	lsrs	r3, r3, #6
 8002eca:	3301      	adds	r3, #1
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ede:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	495c      	ldr	r1, [pc, #368]	; (8003058 <HAL_I2C_Init+0x274>)
 8002ee8:	428b      	cmp	r3, r1
 8002eea:	d819      	bhi.n	8002f20 <HAL_I2C_Init+0x13c>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1e59      	subs	r1, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002efa:	1c59      	adds	r1, r3, #1
 8002efc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f00:	400b      	ands	r3, r1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <HAL_I2C_Init+0x138>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	1e59      	subs	r1, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f14:	3301      	adds	r3, #1
 8002f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1a:	e051      	b.n	8002fc0 <HAL_I2C_Init+0x1dc>
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	e04f      	b.n	8002fc0 <HAL_I2C_Init+0x1dc>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d111      	bne.n	8002f4c <HAL_I2C_Init+0x168>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	1e58      	subs	r0, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6859      	ldr	r1, [r3, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	440b      	add	r3, r1
 8002f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bf0c      	ite	eq
 8002f44:	2301      	moveq	r3, #1
 8002f46:	2300      	movne	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	e012      	b.n	8002f72 <HAL_I2C_Init+0x18e>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	1e58      	subs	r0, r3, #1
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6859      	ldr	r1, [r3, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	0099      	lsls	r1, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f62:	3301      	adds	r3, #1
 8002f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_I2C_Init+0x196>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e022      	b.n	8002fc0 <HAL_I2C_Init+0x1dc>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10e      	bne.n	8002fa0 <HAL_I2C_Init+0x1bc>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1e58      	subs	r0, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6859      	ldr	r1, [r3, #4]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	440b      	add	r3, r1
 8002f90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f94:	3301      	adds	r3, #1
 8002f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f9e:	e00f      	b.n	8002fc0 <HAL_I2C_Init+0x1dc>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	1e58      	subs	r0, r3, #1
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6859      	ldr	r1, [r3, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	0099      	lsls	r1, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	6809      	ldr	r1, [r1, #0]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69da      	ldr	r2, [r3, #28]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6911      	ldr	r1, [r2, #16]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68d2      	ldr	r2, [r2, #12]
 8002ffa:	4311      	orrs	r1, r2
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	430b      	orrs	r3, r1
 8003002:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695a      	ldr	r2, [r3, #20]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	000186a0 	.word	0x000186a0
 800305c:	001e847f 	.word	0x001e847f
 8003060:	003d08ff 	.word	0x003d08ff
 8003064:	431bde83 	.word	0x431bde83
 8003068:	10624dd3 	.word	0x10624dd3

0800306c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af02      	add	r7, sp, #8
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	607a      	str	r2, [r7, #4]
 8003076:	461a      	mov	r2, r3
 8003078:	460b      	mov	r3, r1
 800307a:	817b      	strh	r3, [r7, #10]
 800307c:	4613      	mov	r3, r2
 800307e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003080:	f7ff f82a 	bl	80020d8 <HAL_GetTick>
 8003084:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b20      	cmp	r3, #32
 8003090:	f040 80e0 	bne.w	8003254 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2319      	movs	r3, #25
 800309a:	2201      	movs	r2, #1
 800309c:	4970      	ldr	r1, [pc, #448]	; (8003260 <HAL_I2C_Master_Transmit+0x1f4>)
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 fa92 	bl	80035c8 <I2C_WaitOnFlagUntilTimeout>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030aa:	2302      	movs	r3, #2
 80030ac:	e0d3      	b.n	8003256 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_I2C_Master_Transmit+0x50>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e0cc      	b.n	8003256 <HAL_I2C_Master_Transmit+0x1ea>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d007      	beq.n	80030e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 0201 	orr.w	r2, r2, #1
 80030e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2221      	movs	r2, #33	; 0x21
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2210      	movs	r2, #16
 80030fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	893a      	ldrh	r2, [r7, #8]
 8003112:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4a50      	ldr	r2, [pc, #320]	; (8003264 <HAL_I2C_Master_Transmit+0x1f8>)
 8003122:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003124:	8979      	ldrh	r1, [r7, #10]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	6a3a      	ldr	r2, [r7, #32]
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f9ca 	bl	80034c4 <I2C_MasterRequestWrite>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e08d      	b.n	8003256 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800313a:	2300      	movs	r3, #0
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003150:	e066      	b.n	8003220 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	6a39      	ldr	r1, [r7, #32]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fb50 	bl	80037fc <I2C_WaitOnTXEFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00d      	beq.n	800317e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	2b04      	cmp	r3, #4
 8003168:	d107      	bne.n	800317a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003178:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e06b      	b.n	8003256 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	781a      	ldrb	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003198:	b29b      	uxth	r3, r3
 800319a:	3b01      	subs	r3, #1
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d11b      	bne.n	80031f4 <HAL_I2C_Master_Transmit+0x188>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d017      	beq.n	80031f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	781a      	ldrb	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	6a39      	ldr	r1, [r7, #32]
 80031f8:	68f8      	ldr	r0, [r7, #12]
 80031fa:	f000 fb47 	bl	800388c <I2C_WaitOnBTFFlagUntilTimeout>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00d      	beq.n	8003220 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	2b04      	cmp	r3, #4
 800320a:	d107      	bne.n	800321c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800321a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e01a      	b.n	8003256 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003224:	2b00      	cmp	r3, #0
 8003226:	d194      	bne.n	8003152 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	e000      	b.n	8003256 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003254:	2302      	movs	r3, #2
  }
}
 8003256:	4618      	mov	r0, r3
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	00100002 	.word	0x00100002
 8003264:	ffff0000 	.word	0xffff0000

08003268 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08a      	sub	sp, #40	; 0x28
 800326c:	af02      	add	r7, sp, #8
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	607a      	str	r2, [r7, #4]
 8003272:	603b      	str	r3, [r7, #0]
 8003274:	460b      	mov	r3, r1
 8003276:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003278:	f7fe ff2e 	bl	80020d8 <HAL_GetTick>
 800327c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b20      	cmp	r3, #32
 800328c:	f040 8111 	bne.w	80034b2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	2319      	movs	r3, #25
 8003296:	2201      	movs	r2, #1
 8003298:	4988      	ldr	r1, [pc, #544]	; (80034bc <HAL_I2C_IsDeviceReady+0x254>)
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 f994 	bl	80035c8 <I2C_WaitOnFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80032a6:	2302      	movs	r3, #2
 80032a8:	e104      	b.n	80034b4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_I2C_IsDeviceReady+0x50>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e0fd      	b.n	80034b4 <HAL_I2C_IsDeviceReady+0x24c>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d007      	beq.n	80032de <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 0201 	orr.w	r2, r2, #1
 80032dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2224      	movs	r2, #36	; 0x24
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4a70      	ldr	r2, [pc, #448]	; (80034c0 <HAL_I2C_IsDeviceReady+0x258>)
 8003300:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003310:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2200      	movs	r2, #0
 800331a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f952 	bl	80035c8 <I2C_WaitOnFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00d      	beq.n	8003346 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003338:	d103      	bne.n	8003342 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003340:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e0b6      	b.n	80034b4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003346:	897b      	ldrh	r3, [r7, #10]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	461a      	mov	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003354:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003356:	f7fe febf 	bl	80020d8 <HAL_GetTick>
 800335a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b02      	cmp	r3, #2
 8003368:	bf0c      	ite	eq
 800336a:	2301      	moveq	r3, #1
 800336c:	2300      	movne	r3, #0
 800336e:	b2db      	uxtb	r3, r3
 8003370:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003380:	bf0c      	ite	eq
 8003382:	2301      	moveq	r3, #1
 8003384:	2300      	movne	r3, #0
 8003386:	b2db      	uxtb	r3, r3
 8003388:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800338a:	e025      	b.n	80033d8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800338c:	f7fe fea4 	bl	80020d8 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d302      	bcc.n	80033a2 <HAL_I2C_IsDeviceReady+0x13a>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d103      	bne.n	80033aa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	22a0      	movs	r2, #160	; 0xa0
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ce:	bf0c      	ite	eq
 80033d0:	2301      	moveq	r3, #1
 80033d2:	2300      	movne	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2ba0      	cmp	r3, #160	; 0xa0
 80033e2:	d005      	beq.n	80033f0 <HAL_I2C_IsDeviceReady+0x188>
 80033e4:	7dfb      	ldrb	r3, [r7, #23]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d102      	bne.n	80033f0 <HAL_I2C_IsDeviceReady+0x188>
 80033ea:	7dbb      	ldrb	r3, [r7, #22]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d0cd      	beq.n	800338c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b02      	cmp	r3, #2
 8003404:	d129      	bne.n	800345a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003414:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003416:	2300      	movs	r3, #0
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	2319      	movs	r3, #25
 8003432:	2201      	movs	r2, #1
 8003434:	4921      	ldr	r1, [pc, #132]	; (80034bc <HAL_I2C_IsDeviceReady+0x254>)
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f8c6 	bl	80035c8 <I2C_WaitOnFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e036      	b.n	80034b4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2220      	movs	r2, #32
 800344a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	e02c      	b.n	80034b4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003468:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003472:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	2319      	movs	r3, #25
 800347a:	2201      	movs	r2, #1
 800347c:	490f      	ldr	r1, [pc, #60]	; (80034bc <HAL_I2C_IsDeviceReady+0x254>)
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 f8a2 	bl	80035c8 <I2C_WaitOnFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e012      	b.n	80034b4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	3301      	adds	r3, #1
 8003492:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	429a      	cmp	r2, r3
 800349a:	f4ff af32 	bcc.w	8003302 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80034b2:	2302      	movs	r3, #2
  }
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3720      	adds	r7, #32
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	00100002 	.word	0x00100002
 80034c0:	ffff0000 	.word	0xffff0000

080034c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b088      	sub	sp, #32
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	460b      	mov	r3, r1
 80034d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d006      	beq.n	80034ee <I2C_MasterRequestWrite+0x2a>
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d003      	beq.n	80034ee <I2C_MasterRequestWrite+0x2a>
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034ec:	d108      	bne.n	8003500 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	e00b      	b.n	8003518 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003504:	2b12      	cmp	r3, #18
 8003506:	d107      	bne.n	8003518 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003516:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f84f 	bl	80035c8 <I2C_WaitOnFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00d      	beq.n	800354c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800353e:	d103      	bne.n	8003548 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003546:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e035      	b.n	80035b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003554:	d108      	bne.n	8003568 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003556:	897b      	ldrh	r3, [r7, #10]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	461a      	mov	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003564:	611a      	str	r2, [r3, #16]
 8003566:	e01b      	b.n	80035a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003568:	897b      	ldrh	r3, [r7, #10]
 800356a:	11db      	asrs	r3, r3, #7
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f003 0306 	and.w	r3, r3, #6
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f063 030f 	orn	r3, r3, #15
 8003578:	b2da      	uxtb	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	490e      	ldr	r1, [pc, #56]	; (80035c0 <I2C_MasterRequestWrite+0xfc>)
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f898 	bl	80036bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e010      	b.n	80035b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003596:	897b      	ldrh	r3, [r7, #10]
 8003598:	b2da      	uxtb	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	4907      	ldr	r1, [pc, #28]	; (80035c4 <I2C_MasterRequestWrite+0x100>)
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 f888 	bl	80036bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	00010008 	.word	0x00010008
 80035c4:	00010002 	.word	0x00010002

080035c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	4613      	mov	r3, r2
 80035d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035d8:	e048      	b.n	800366c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d044      	beq.n	800366c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e2:	f7fe fd79 	bl	80020d8 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d302      	bcc.n	80035f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d139      	bne.n	800366c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	0c1b      	lsrs	r3, r3, #16
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d10d      	bne.n	800361e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	43da      	mvns	r2, r3
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	4013      	ands	r3, r2
 800360e:	b29b      	uxth	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	e00c      	b.n	8003638 <I2C_WaitOnFlagUntilTimeout+0x70>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	43da      	mvns	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	4013      	ands	r3, r2
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	bf0c      	ite	eq
 8003630:	2301      	moveq	r3, #1
 8003632:	2300      	movne	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	429a      	cmp	r2, r3
 800363c:	d116      	bne.n	800366c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e023      	b.n	80036b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	0c1b      	lsrs	r3, r3, #16
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d10d      	bne.n	8003692 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	43da      	mvns	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4013      	ands	r3, r2
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	461a      	mov	r2, r3
 8003690:	e00c      	b.n	80036ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	43da      	mvns	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4013      	ands	r3, r2
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf0c      	ite	eq
 80036a4:	2301      	moveq	r3, #1
 80036a6:	2300      	movne	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d093      	beq.n	80035da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036ca:	e071      	b.n	80037b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036da:	d123      	bne.n	8003724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003710:	f043 0204 	orr.w	r2, r3, #4
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e067      	b.n	80037f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372a:	d041      	beq.n	80037b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372c:	f7fe fcd4 	bl	80020d8 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	d302      	bcc.n	8003742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d136      	bne.n	80037b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	0c1b      	lsrs	r3, r3, #16
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b01      	cmp	r3, #1
 800374a:	d10c      	bne.n	8003766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	43da      	mvns	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4013      	ands	r3, r2
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	bf14      	ite	ne
 800375e:	2301      	movne	r3, #1
 8003760:	2300      	moveq	r3, #0
 8003762:	b2db      	uxtb	r3, r3
 8003764:	e00b      	b.n	800377e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	43da      	mvns	r2, r3
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	4013      	ands	r3, r2
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf14      	ite	ne
 8003778:	2301      	movne	r3, #1
 800377a:	2300      	moveq	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d016      	beq.n	80037b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2220      	movs	r2, #32
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	f043 0220 	orr.w	r2, r3, #32
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e021      	b.n	80037f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	0c1b      	lsrs	r3, r3, #16
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d10c      	bne.n	80037d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	43da      	mvns	r2, r3
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	4013      	ands	r3, r2
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	bf14      	ite	ne
 80037cc:	2301      	movne	r3, #1
 80037ce:	2300      	moveq	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	e00b      	b.n	80037ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	43da      	mvns	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4013      	ands	r3, r2
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	bf14      	ite	ne
 80037e6:	2301      	movne	r3, #1
 80037e8:	2300      	moveq	r3, #0
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f47f af6d 	bne.w	80036cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003808:	e034      	b.n	8003874 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f886 	bl	800391c <I2C_IsAcknowledgeFailed>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e034      	b.n	8003884 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003820:	d028      	beq.n	8003874 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003822:	f7fe fc59 	bl	80020d8 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	429a      	cmp	r2, r3
 8003830:	d302      	bcc.n	8003838 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d11d      	bne.n	8003874 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003842:	2b80      	cmp	r3, #128	; 0x80
 8003844:	d016      	beq.n	8003874 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	f043 0220 	orr.w	r2, r3, #32
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e007      	b.n	8003884 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387e:	2b80      	cmp	r3, #128	; 0x80
 8003880:	d1c3      	bne.n	800380a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003898:	e034      	b.n	8003904 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800389a:	68f8      	ldr	r0, [r7, #12]
 800389c:	f000 f83e 	bl	800391c <I2C_IsAcknowledgeFailed>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e034      	b.n	8003914 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b0:	d028      	beq.n	8003904 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b2:	f7fe fc11 	bl	80020d8 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	68ba      	ldr	r2, [r7, #8]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d302      	bcc.n	80038c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d11d      	bne.n	8003904 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d016      	beq.n	8003904 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	f043 0220 	orr.w	r2, r3, #32
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e007      	b.n	8003914 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	695b      	ldr	r3, [r3, #20]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b04      	cmp	r3, #4
 8003910:	d1c3      	bne.n	800389a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003932:	d11b      	bne.n	800396c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800393c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	f043 0204 	orr.w	r2, r3, #4
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
	...

0800397c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0cc      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003990:	4b68      	ldr	r3, [pc, #416]	; (8003b34 <HAL_RCC_ClockConfig+0x1b8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 030f 	and.w	r3, r3, #15
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d90c      	bls.n	80039b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399e:	4b65      	ldr	r3, [pc, #404]	; (8003b34 <HAL_RCC_ClockConfig+0x1b8>)
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a6:	4b63      	ldr	r3, [pc, #396]	; (8003b34 <HAL_RCC_ClockConfig+0x1b8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0b8      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d020      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039d0:	4b59      	ldr	r3, [pc, #356]	; (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	4a58      	ldr	r2, [pc, #352]	; (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039e8:	4b53      	ldr	r3, [pc, #332]	; (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4a52      	ldr	r2, [pc, #328]	; (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f4:	4b50      	ldr	r3, [pc, #320]	; (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	494d      	ldr	r1, [pc, #308]	; (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d044      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d107      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1a:	4b47      	ldr	r3, [pc, #284]	; (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d119      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e07f      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d003      	beq.n	8003a3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d107      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3a:	4b3f      	ldr	r3, [pc, #252]	; (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d109      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e06f      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4a:	4b3b      	ldr	r3, [pc, #236]	; (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e067      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a5a:	4b37      	ldr	r3, [pc, #220]	; (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f023 0203 	bic.w	r2, r3, #3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	4934      	ldr	r1, [pc, #208]	; (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a6c:	f7fe fb34 	bl	80020d8 <HAL_GetTick>
 8003a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a72:	e00a      	b.n	8003a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a74:	f7fe fb30 	bl	80020d8 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e04f      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8a:	4b2b      	ldr	r3, [pc, #172]	; (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 020c 	and.w	r2, r3, #12
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d1eb      	bne.n	8003a74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a9c:	4b25      	ldr	r3, [pc, #148]	; (8003b34 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d20c      	bcs.n	8003ac4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aaa:	4b22      	ldr	r3, [pc, #136]	; (8003b34 <HAL_RCC_ClockConfig+0x1b8>)
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab2:	4b20      	ldr	r3, [pc, #128]	; (8003b34 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e032      	b.n	8003b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d008      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ad0:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	4916      	ldr	r1, [pc, #88]	; (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d009      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aee:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	490e      	ldr	r1, [pc, #56]	; (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b02:	f000 f855 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8003b06:	4602      	mov	r2, r0
 8003b08:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	091b      	lsrs	r3, r3, #4
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	490a      	ldr	r1, [pc, #40]	; (8003b3c <HAL_RCC_ClockConfig+0x1c0>)
 8003b14:	5ccb      	ldrb	r3, [r1, r3]
 8003b16:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1a:	4a09      	ldr	r2, [pc, #36]	; (8003b40 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b1e:	4b09      	ldr	r3, [pc, #36]	; (8003b44 <HAL_RCC_ClockConfig+0x1c8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fe fa94 	bl	8002050 <HAL_InitTick>

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40023c00 	.word	0x40023c00
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	0800e304 	.word	0x0800e304
 8003b40:	20000010 	.word	0x20000010
 8003b44:	20000014 	.word	0x20000014

08003b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b4c:	4b03      	ldr	r3, [pc, #12]	; (8003b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	20000010 	.word	0x20000010

08003b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b64:	f7ff fff0 	bl	8003b48 <HAL_RCC_GetHCLKFreq>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	0a9b      	lsrs	r3, r3, #10
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	4903      	ldr	r1, [pc, #12]	; (8003b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b76:	5ccb      	ldrb	r3, [r1, r3]
 8003b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40023800 	.word	0x40023800
 8003b84:	0800e314 	.word	0x0800e314

08003b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b8c:	f7ff ffdc 	bl	8003b48 <HAL_RCC_GetHCLKFreq>
 8003b90:	4602      	mov	r2, r0
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	0b5b      	lsrs	r3, r3, #13
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	4903      	ldr	r1, [pc, #12]	; (8003bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	0800e314 	.word	0x0800e314

08003bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb4:	b0ae      	sub	sp, #184	; 0xb8
 8003bb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bd6:	4bcb      	ldr	r3, [pc, #812]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 030c 	and.w	r3, r3, #12
 8003bde:	2b0c      	cmp	r3, #12
 8003be0:	f200 8206 	bhi.w	8003ff0 <HAL_RCC_GetSysClockFreq+0x440>
 8003be4:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <HAL_RCC_GetSysClockFreq+0x3c>)
 8003be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bea:	bf00      	nop
 8003bec:	08003c21 	.word	0x08003c21
 8003bf0:	08003ff1 	.word	0x08003ff1
 8003bf4:	08003ff1 	.word	0x08003ff1
 8003bf8:	08003ff1 	.word	0x08003ff1
 8003bfc:	08003c29 	.word	0x08003c29
 8003c00:	08003ff1 	.word	0x08003ff1
 8003c04:	08003ff1 	.word	0x08003ff1
 8003c08:	08003ff1 	.word	0x08003ff1
 8003c0c:	08003c31 	.word	0x08003c31
 8003c10:	08003ff1 	.word	0x08003ff1
 8003c14:	08003ff1 	.word	0x08003ff1
 8003c18:	08003ff1 	.word	0x08003ff1
 8003c1c:	08003e21 	.word	0x08003e21
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c20:	4bb9      	ldr	r3, [pc, #740]	; (8003f08 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003c26:	e1e7      	b.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c28:	4bb8      	ldr	r3, [pc, #736]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c2e:	e1e3      	b.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c30:	4bb4      	ldr	r3, [pc, #720]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c3c:	4bb1      	ldr	r3, [pc, #708]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d071      	beq.n	8003d2c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c48:	4bae      	ldr	r3, [pc, #696]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	099b      	lsrs	r3, r3, #6
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c54:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003c58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c64:	2300      	movs	r3, #0
 8003c66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c6e:	4622      	mov	r2, r4
 8003c70:	462b      	mov	r3, r5
 8003c72:	f04f 0000 	mov.w	r0, #0
 8003c76:	f04f 0100 	mov.w	r1, #0
 8003c7a:	0159      	lsls	r1, r3, #5
 8003c7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c80:	0150      	lsls	r0, r2, #5
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4621      	mov	r1, r4
 8003c88:	1a51      	subs	r1, r2, r1
 8003c8a:	6439      	str	r1, [r7, #64]	; 0x40
 8003c8c:	4629      	mov	r1, r5
 8003c8e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c92:	647b      	str	r3, [r7, #68]	; 0x44
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	f04f 0300 	mov.w	r3, #0
 8003c9c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003ca0:	4649      	mov	r1, r9
 8003ca2:	018b      	lsls	r3, r1, #6
 8003ca4:	4641      	mov	r1, r8
 8003ca6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003caa:	4641      	mov	r1, r8
 8003cac:	018a      	lsls	r2, r1, #6
 8003cae:	4641      	mov	r1, r8
 8003cb0:	1a51      	subs	r1, r2, r1
 8003cb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cb4:	4649      	mov	r1, r9
 8003cb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003cc8:	4649      	mov	r1, r9
 8003cca:	00cb      	lsls	r3, r1, #3
 8003ccc:	4641      	mov	r1, r8
 8003cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cd2:	4641      	mov	r1, r8
 8003cd4:	00ca      	lsls	r2, r1, #3
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4603      	mov	r3, r0
 8003cdc:	4622      	mov	r2, r4
 8003cde:	189b      	adds	r3, r3, r2
 8003ce0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ce2:	462b      	mov	r3, r5
 8003ce4:	460a      	mov	r2, r1
 8003ce6:	eb42 0303 	adc.w	r3, r2, r3
 8003cea:	637b      	str	r3, [r7, #52]	; 0x34
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	f04f 0300 	mov.w	r3, #0
 8003cf4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003cf8:	4629      	mov	r1, r5
 8003cfa:	024b      	lsls	r3, r1, #9
 8003cfc:	4621      	mov	r1, r4
 8003cfe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d02:	4621      	mov	r1, r4
 8003d04:	024a      	lsls	r2, r1, #9
 8003d06:	4610      	mov	r0, r2
 8003d08:	4619      	mov	r1, r3
 8003d0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d18:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003d1c:	f7fc ffd4 	bl	8000cc8 <__aeabi_uldivmod>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4613      	mov	r3, r2
 8003d26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d2a:	e067      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d2c:	4b75      	ldr	r3, [pc, #468]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	099b      	lsrs	r3, r3, #6
 8003d32:	2200      	movs	r2, #0
 8003d34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d38:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003d3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d44:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d46:	2300      	movs	r3, #0
 8003d48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d4a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003d4e:	4622      	mov	r2, r4
 8003d50:	462b      	mov	r3, r5
 8003d52:	f04f 0000 	mov.w	r0, #0
 8003d56:	f04f 0100 	mov.w	r1, #0
 8003d5a:	0159      	lsls	r1, r3, #5
 8003d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d60:	0150      	lsls	r0, r2, #5
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4621      	mov	r1, r4
 8003d68:	1a51      	subs	r1, r2, r1
 8003d6a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d6c:	4629      	mov	r1, r5
 8003d6e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003d80:	4649      	mov	r1, r9
 8003d82:	018b      	lsls	r3, r1, #6
 8003d84:	4641      	mov	r1, r8
 8003d86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d8a:	4641      	mov	r1, r8
 8003d8c:	018a      	lsls	r2, r1, #6
 8003d8e:	4641      	mov	r1, r8
 8003d90:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d94:	4649      	mov	r1, r9
 8003d96:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003da6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003daa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dae:	4692      	mov	sl, r2
 8003db0:	469b      	mov	fp, r3
 8003db2:	4623      	mov	r3, r4
 8003db4:	eb1a 0303 	adds.w	r3, sl, r3
 8003db8:	623b      	str	r3, [r7, #32]
 8003dba:	462b      	mov	r3, r5
 8003dbc:	eb4b 0303 	adc.w	r3, fp, r3
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003dce:	4629      	mov	r1, r5
 8003dd0:	028b      	lsls	r3, r1, #10
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dd8:	4621      	mov	r1, r4
 8003dda:	028a      	lsls	r2, r1, #10
 8003ddc:	4610      	mov	r0, r2
 8003dde:	4619      	mov	r1, r3
 8003de0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003de4:	2200      	movs	r2, #0
 8003de6:	673b      	str	r3, [r7, #112]	; 0x70
 8003de8:	677a      	str	r2, [r7, #116]	; 0x74
 8003dea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003dee:	f7fc ff6b 	bl	8000cc8 <__aeabi_uldivmod>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4613      	mov	r3, r2
 8003df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dfc:	4b41      	ldr	r3, [pc, #260]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	0c1b      	lsrs	r3, r3, #16
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	3301      	adds	r3, #1
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e1e:	e0eb      	b.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e20:	4b38      	ldr	r3, [pc, #224]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e2c:	4b35      	ldr	r3, [pc, #212]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d06b      	beq.n	8003f10 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e38:	4b32      	ldr	r3, [pc, #200]	; (8003f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	099b      	lsrs	r3, r3, #6
 8003e3e:	2200      	movs	r2, #0
 8003e40:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e4a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	667b      	str	r3, [r7, #100]	; 0x64
 8003e50:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003e54:	4622      	mov	r2, r4
 8003e56:	462b      	mov	r3, r5
 8003e58:	f04f 0000 	mov.w	r0, #0
 8003e5c:	f04f 0100 	mov.w	r1, #0
 8003e60:	0159      	lsls	r1, r3, #5
 8003e62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e66:	0150      	lsls	r0, r2, #5
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4621      	mov	r1, r4
 8003e6e:	1a51      	subs	r1, r2, r1
 8003e70:	61b9      	str	r1, [r7, #24]
 8003e72:	4629      	mov	r1, r5
 8003e74:	eb63 0301 	sbc.w	r3, r3, r1
 8003e78:	61fb      	str	r3, [r7, #28]
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	f04f 0300 	mov.w	r3, #0
 8003e82:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003e86:	4659      	mov	r1, fp
 8003e88:	018b      	lsls	r3, r1, #6
 8003e8a:	4651      	mov	r1, sl
 8003e8c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e90:	4651      	mov	r1, sl
 8003e92:	018a      	lsls	r2, r1, #6
 8003e94:	4651      	mov	r1, sl
 8003e96:	ebb2 0801 	subs.w	r8, r2, r1
 8003e9a:	4659      	mov	r1, fp
 8003e9c:	eb63 0901 	sbc.w	r9, r3, r1
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eb4:	4690      	mov	r8, r2
 8003eb6:	4699      	mov	r9, r3
 8003eb8:	4623      	mov	r3, r4
 8003eba:	eb18 0303 	adds.w	r3, r8, r3
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	462b      	mov	r3, r5
 8003ec2:	eb49 0303 	adc.w	r3, r9, r3
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003ed4:	4629      	mov	r1, r5
 8003ed6:	024b      	lsls	r3, r1, #9
 8003ed8:	4621      	mov	r1, r4
 8003eda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ede:	4621      	mov	r1, r4
 8003ee0:	024a      	lsls	r2, r1, #9
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003eea:	2200      	movs	r2, #0
 8003eec:	65bb      	str	r3, [r7, #88]	; 0x58
 8003eee:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003ef0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ef4:	f7fc fee8 	bl	8000cc8 <__aeabi_uldivmod>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4613      	mov	r3, r2
 8003efe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f02:	e065      	b.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x420>
 8003f04:	40023800 	.word	0x40023800
 8003f08:	00f42400 	.word	0x00f42400
 8003f0c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f10:	4b3d      	ldr	r3, [pc, #244]	; (8004008 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	099b      	lsrs	r3, r3, #6
 8003f16:	2200      	movs	r2, #0
 8003f18:	4618      	mov	r0, r3
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f20:	653b      	str	r3, [r7, #80]	; 0x50
 8003f22:	2300      	movs	r3, #0
 8003f24:	657b      	str	r3, [r7, #84]	; 0x54
 8003f26:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003f2a:	4642      	mov	r2, r8
 8003f2c:	464b      	mov	r3, r9
 8003f2e:	f04f 0000 	mov.w	r0, #0
 8003f32:	f04f 0100 	mov.w	r1, #0
 8003f36:	0159      	lsls	r1, r3, #5
 8003f38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f3c:	0150      	lsls	r0, r2, #5
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4641      	mov	r1, r8
 8003f44:	1a51      	subs	r1, r2, r1
 8003f46:	60b9      	str	r1, [r7, #8]
 8003f48:	4649      	mov	r1, r9
 8003f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003f5c:	4659      	mov	r1, fp
 8003f5e:	018b      	lsls	r3, r1, #6
 8003f60:	4651      	mov	r1, sl
 8003f62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f66:	4651      	mov	r1, sl
 8003f68:	018a      	lsls	r2, r1, #6
 8003f6a:	4651      	mov	r1, sl
 8003f6c:	1a54      	subs	r4, r2, r1
 8003f6e:	4659      	mov	r1, fp
 8003f70:	eb63 0501 	sbc.w	r5, r3, r1
 8003f74:	f04f 0200 	mov.w	r2, #0
 8003f78:	f04f 0300 	mov.w	r3, #0
 8003f7c:	00eb      	lsls	r3, r5, #3
 8003f7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f82:	00e2      	lsls	r2, r4, #3
 8003f84:	4614      	mov	r4, r2
 8003f86:	461d      	mov	r5, r3
 8003f88:	4643      	mov	r3, r8
 8003f8a:	18e3      	adds	r3, r4, r3
 8003f8c:	603b      	str	r3, [r7, #0]
 8003f8e:	464b      	mov	r3, r9
 8003f90:	eb45 0303 	adc.w	r3, r5, r3
 8003f94:	607b      	str	r3, [r7, #4]
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	028b      	lsls	r3, r1, #10
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fac:	4621      	mov	r1, r4
 8003fae:	028a      	lsls	r2, r1, #10
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fb8:	2200      	movs	r2, #0
 8003fba:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fbc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003fbe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fc2:	f7fc fe81 	bl	8000cc8 <__aeabi_uldivmod>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4613      	mov	r3, r2
 8003fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003fd0:	4b0d      	ldr	r3, [pc, #52]	; (8004008 <HAL_RCC_GetSysClockFreq+0x458>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	0f1b      	lsrs	r3, r3, #28
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003fde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fe2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003fee:	e003      	b.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003ff2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003ff6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ff8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	37b8      	adds	r7, #184	; 0xb8
 8004000:	46bd      	mov	sp, r7
 8004002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800
 800400c:	00f42400 	.word	0x00f42400

08004010 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e28d      	b.n	800453e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 8083 	beq.w	8004136 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004030:	4b94      	ldr	r3, [pc, #592]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 030c 	and.w	r3, r3, #12
 8004038:	2b04      	cmp	r3, #4
 800403a:	d019      	beq.n	8004070 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800403c:	4b91      	ldr	r3, [pc, #580]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004044:	2b08      	cmp	r3, #8
 8004046:	d106      	bne.n	8004056 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004048:	4b8e      	ldr	r3, [pc, #568]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004050:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004054:	d00c      	beq.n	8004070 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004056:	4b8b      	ldr	r3, [pc, #556]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800405e:	2b0c      	cmp	r3, #12
 8004060:	d112      	bne.n	8004088 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004062:	4b88      	ldr	r3, [pc, #544]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800406e:	d10b      	bne.n	8004088 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004070:	4b84      	ldr	r3, [pc, #528]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d05b      	beq.n	8004134 <HAL_RCC_OscConfig+0x124>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d157      	bne.n	8004134 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e25a      	b.n	800453e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004090:	d106      	bne.n	80040a0 <HAL_RCC_OscConfig+0x90>
 8004092:	4b7c      	ldr	r3, [pc, #496]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a7b      	ldr	r2, [pc, #492]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 8004098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	e01d      	b.n	80040dc <HAL_RCC_OscConfig+0xcc>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040a8:	d10c      	bne.n	80040c4 <HAL_RCC_OscConfig+0xb4>
 80040aa:	4b76      	ldr	r3, [pc, #472]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a75      	ldr	r2, [pc, #468]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 80040b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	4b73      	ldr	r3, [pc, #460]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a72      	ldr	r2, [pc, #456]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 80040bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e00b      	b.n	80040dc <HAL_RCC_OscConfig+0xcc>
 80040c4:	4b6f      	ldr	r3, [pc, #444]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a6e      	ldr	r2, [pc, #440]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 80040ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	4b6c      	ldr	r3, [pc, #432]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a6b      	ldr	r2, [pc, #428]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 80040d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d013      	beq.n	800410c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7fd fff8 	bl	80020d8 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040ec:	f7fd fff4 	bl	80020d8 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b64      	cmp	r3, #100	; 0x64
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e21f      	b.n	800453e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fe:	4b61      	ldr	r3, [pc, #388]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCC_OscConfig+0xdc>
 800410a:	e014      	b.n	8004136 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410c:	f7fd ffe4 	bl	80020d8 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004114:	f7fd ffe0 	bl	80020d8 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b64      	cmp	r3, #100	; 0x64
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e20b      	b.n	800453e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004126:	4b57      	ldr	r3, [pc, #348]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0x104>
 8004132:	e000      	b.n	8004136 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d06f      	beq.n	8004222 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004142:	4b50      	ldr	r3, [pc, #320]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
 800414a:	2b00      	cmp	r3, #0
 800414c:	d017      	beq.n	800417e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800414e:	4b4d      	ldr	r3, [pc, #308]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004156:	2b08      	cmp	r3, #8
 8004158:	d105      	bne.n	8004166 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800415a:	4b4a      	ldr	r3, [pc, #296]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00b      	beq.n	800417e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004166:	4b47      	ldr	r3, [pc, #284]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800416e:	2b0c      	cmp	r3, #12
 8004170:	d11c      	bne.n	80041ac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004172:	4b44      	ldr	r3, [pc, #272]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d116      	bne.n	80041ac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417e:	4b41      	ldr	r3, [pc, #260]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d005      	beq.n	8004196 <HAL_RCC_OscConfig+0x186>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d001      	beq.n	8004196 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e1d3      	b.n	800453e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004196:	4b3b      	ldr	r3, [pc, #236]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	4937      	ldr	r1, [pc, #220]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041aa:	e03a      	b.n	8004222 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d020      	beq.n	80041f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041b4:	4b34      	ldr	r3, [pc, #208]	; (8004288 <HAL_RCC_OscConfig+0x278>)
 80041b6:	2201      	movs	r2, #1
 80041b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ba:	f7fd ff8d 	bl	80020d8 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041c2:	f7fd ff89 	bl	80020d8 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e1b4      	b.n	800453e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d4:	4b2b      	ldr	r3, [pc, #172]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0f0      	beq.n	80041c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e0:	4b28      	ldr	r3, [pc, #160]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	4925      	ldr	r1, [pc, #148]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	600b      	str	r3, [r1, #0]
 80041f4:	e015      	b.n	8004222 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041f6:	4b24      	ldr	r3, [pc, #144]	; (8004288 <HAL_RCC_OscConfig+0x278>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7fd ff6c 	bl	80020d8 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004204:	f7fd ff68 	bl	80020d8 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e193      	b.n	800453e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004216:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d036      	beq.n	800429c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d016      	beq.n	8004264 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004236:	4b15      	ldr	r3, [pc, #84]	; (800428c <HAL_RCC_OscConfig+0x27c>)
 8004238:	2201      	movs	r2, #1
 800423a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423c:	f7fd ff4c 	bl	80020d8 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004244:	f7fd ff48 	bl	80020d8 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e173      	b.n	800453e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004256:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_OscConfig+0x274>)
 8004258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCC_OscConfig+0x234>
 8004262:	e01b      	b.n	800429c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004264:	4b09      	ldr	r3, [pc, #36]	; (800428c <HAL_RCC_OscConfig+0x27c>)
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426a:	f7fd ff35 	bl	80020d8 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004270:	e00e      	b.n	8004290 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004272:	f7fd ff31 	bl	80020d8 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d907      	bls.n	8004290 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e15c      	b.n	800453e <HAL_RCC_OscConfig+0x52e>
 8004284:	40023800 	.word	0x40023800
 8004288:	42470000 	.word	0x42470000
 800428c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004290:	4b8a      	ldr	r3, [pc, #552]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 8004292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1ea      	bne.n	8004272 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 8097 	beq.w	80043d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042aa:	2300      	movs	r3, #0
 80042ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ae:	4b83      	ldr	r3, [pc, #524]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10f      	bne.n	80042da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ba:	2300      	movs	r3, #0
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	4b7f      	ldr	r3, [pc, #508]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	4a7e      	ldr	r2, [pc, #504]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 80042c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c8:	6413      	str	r3, [r2, #64]	; 0x40
 80042ca:	4b7c      	ldr	r3, [pc, #496]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d6:	2301      	movs	r3, #1
 80042d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042da:	4b79      	ldr	r3, [pc, #484]	; (80044c0 <HAL_RCC_OscConfig+0x4b0>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d118      	bne.n	8004318 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042e6:	4b76      	ldr	r3, [pc, #472]	; (80044c0 <HAL_RCC_OscConfig+0x4b0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a75      	ldr	r2, [pc, #468]	; (80044c0 <HAL_RCC_OscConfig+0x4b0>)
 80042ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f2:	f7fd fef1 	bl	80020d8 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042fa:	f7fd feed 	bl	80020d8 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e118      	b.n	800453e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430c:	4b6c      	ldr	r3, [pc, #432]	; (80044c0 <HAL_RCC_OscConfig+0x4b0>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0f0      	beq.n	80042fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d106      	bne.n	800432e <HAL_RCC_OscConfig+0x31e>
 8004320:	4b66      	ldr	r3, [pc, #408]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	4a65      	ldr	r2, [pc, #404]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 8004326:	f043 0301 	orr.w	r3, r3, #1
 800432a:	6713      	str	r3, [r2, #112]	; 0x70
 800432c:	e01c      	b.n	8004368 <HAL_RCC_OscConfig+0x358>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b05      	cmp	r3, #5
 8004334:	d10c      	bne.n	8004350 <HAL_RCC_OscConfig+0x340>
 8004336:	4b61      	ldr	r3, [pc, #388]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 8004338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433a:	4a60      	ldr	r2, [pc, #384]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 800433c:	f043 0304 	orr.w	r3, r3, #4
 8004340:	6713      	str	r3, [r2, #112]	; 0x70
 8004342:	4b5e      	ldr	r3, [pc, #376]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004346:	4a5d      	ldr	r2, [pc, #372]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	6713      	str	r3, [r2, #112]	; 0x70
 800434e:	e00b      	b.n	8004368 <HAL_RCC_OscConfig+0x358>
 8004350:	4b5a      	ldr	r3, [pc, #360]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 8004352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004354:	4a59      	ldr	r2, [pc, #356]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 8004356:	f023 0301 	bic.w	r3, r3, #1
 800435a:	6713      	str	r3, [r2, #112]	; 0x70
 800435c:	4b57      	ldr	r3, [pc, #348]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 800435e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004360:	4a56      	ldr	r2, [pc, #344]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 8004362:	f023 0304 	bic.w	r3, r3, #4
 8004366:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d015      	beq.n	800439c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004370:	f7fd feb2 	bl	80020d8 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004376:	e00a      	b.n	800438e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004378:	f7fd feae 	bl	80020d8 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	f241 3288 	movw	r2, #5000	; 0x1388
 8004386:	4293      	cmp	r3, r2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e0d7      	b.n	800453e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800438e:	4b4b      	ldr	r3, [pc, #300]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 8004390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0ee      	beq.n	8004378 <HAL_RCC_OscConfig+0x368>
 800439a:	e014      	b.n	80043c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439c:	f7fd fe9c 	bl	80020d8 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a2:	e00a      	b.n	80043ba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043a4:	f7fd fe98 	bl	80020d8 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e0c1      	b.n	800453e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ba:	4b40      	ldr	r3, [pc, #256]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1ee      	bne.n	80043a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043c6:	7dfb      	ldrb	r3, [r7, #23]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d105      	bne.n	80043d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043cc:	4b3b      	ldr	r3, [pc, #236]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	4a3a      	ldr	r2, [pc, #232]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 80043d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 80ad 	beq.w	800453c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043e2:	4b36      	ldr	r3, [pc, #216]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d060      	beq.n	80044b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d145      	bne.n	8004482 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f6:	4b33      	ldr	r3, [pc, #204]	; (80044c4 <HAL_RCC_OscConfig+0x4b4>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fc:	f7fd fe6c 	bl	80020d8 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004404:	f7fd fe68 	bl	80020d8 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e093      	b.n	800453e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004416:	4b29      	ldr	r3, [pc, #164]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	69da      	ldr	r2, [r3, #28]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	019b      	lsls	r3, r3, #6
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004438:	085b      	lsrs	r3, r3, #1
 800443a:	3b01      	subs	r3, #1
 800443c:	041b      	lsls	r3, r3, #16
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	061b      	lsls	r3, r3, #24
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444c:	071b      	lsls	r3, r3, #28
 800444e:	491b      	ldr	r1, [pc, #108]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 8004450:	4313      	orrs	r3, r2
 8004452:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004454:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <HAL_RCC_OscConfig+0x4b4>)
 8004456:	2201      	movs	r2, #1
 8004458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445a:	f7fd fe3d 	bl	80020d8 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004462:	f7fd fe39 	bl	80020d8 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e064      	b.n	800453e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004474:	4b11      	ldr	r3, [pc, #68]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0f0      	beq.n	8004462 <HAL_RCC_OscConfig+0x452>
 8004480:	e05c      	b.n	800453c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004482:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <HAL_RCC_OscConfig+0x4b4>)
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004488:	f7fd fe26 	bl	80020d8 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004490:	f7fd fe22 	bl	80020d8 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e04d      	b.n	800453e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a2:	4b06      	ldr	r3, [pc, #24]	; (80044bc <HAL_RCC_OscConfig+0x4ac>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0x480>
 80044ae:	e045      	b.n	800453c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d107      	bne.n	80044c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e040      	b.n	800453e <HAL_RCC_OscConfig+0x52e>
 80044bc:	40023800 	.word	0x40023800
 80044c0:	40007000 	.word	0x40007000
 80044c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044c8:	4b1f      	ldr	r3, [pc, #124]	; (8004548 <HAL_RCC_OscConfig+0x538>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d030      	beq.n	8004538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d129      	bne.n	8004538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d122      	bne.n	8004538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044f8:	4013      	ands	r3, r2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004500:	4293      	cmp	r3, r2
 8004502:	d119      	bne.n	8004538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450e:	085b      	lsrs	r3, r3, #1
 8004510:	3b01      	subs	r3, #1
 8004512:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004514:	429a      	cmp	r2, r3
 8004516:	d10f      	bne.n	8004538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004524:	429a      	cmp	r2, r3
 8004526:	d107      	bne.n	8004538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004534:	429a      	cmp	r2, r3
 8004536:	d001      	beq.n	800453c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40023800 	.word	0x40023800

0800454c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e042      	b.n	80045e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d106      	bne.n	8004578 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fd fbde 	bl	8001d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2224      	movs	r2, #36	; 0x24
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800458e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f973 	bl	800487c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695a      	ldr	r2, [r3, #20]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08a      	sub	sp, #40	; 0x28
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	603b      	str	r3, [r7, #0]
 80045f8:	4613      	mov	r3, r2
 80045fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b20      	cmp	r3, #32
 800460a:	d175      	bne.n	80046f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_UART_Transmit+0x2c>
 8004612:	88fb      	ldrh	r3, [r7, #6]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e06e      	b.n	80046fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2221      	movs	r2, #33	; 0x21
 8004626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800462a:	f7fd fd55 	bl	80020d8 <HAL_GetTick>
 800462e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	88fa      	ldrh	r2, [r7, #6]
 8004634:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	88fa      	ldrh	r2, [r7, #6]
 800463a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004644:	d108      	bne.n	8004658 <HAL_UART_Transmit+0x6c>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d104      	bne.n	8004658 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	61bb      	str	r3, [r7, #24]
 8004656:	e003      	b.n	8004660 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800465c:	2300      	movs	r3, #0
 800465e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004660:	e02e      	b.n	80046c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2200      	movs	r2, #0
 800466a:	2180      	movs	r1, #128	; 0x80
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f848 	bl	8004702 <UART_WaitOnFlagUntilTimeout>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e03a      	b.n	80046fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10b      	bne.n	80046a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004698:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	3302      	adds	r3, #2
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	e007      	b.n	80046b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	781a      	ldrb	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	3301      	adds	r3, #1
 80046b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1cb      	bne.n	8004662 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2200      	movs	r2, #0
 80046d2:	2140      	movs	r1, #64	; 0x40
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 f814 	bl	8004702 <UART_WaitOnFlagUntilTimeout>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e006      	b.n	80046fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	e000      	b.n	80046fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80046f8:	2302      	movs	r3, #2
  }
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3720      	adds	r7, #32
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b086      	sub	sp, #24
 8004706:	af00      	add	r7, sp, #0
 8004708:	60f8      	str	r0, [r7, #12]
 800470a:	60b9      	str	r1, [r7, #8]
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	4613      	mov	r3, r2
 8004710:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004712:	e03b      	b.n	800478c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471a:	d037      	beq.n	800478c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800471c:	f7fd fcdc 	bl	80020d8 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	6a3a      	ldr	r2, [r7, #32]
 8004728:	429a      	cmp	r2, r3
 800472a:	d302      	bcc.n	8004732 <UART_WaitOnFlagUntilTimeout+0x30>
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e03a      	b.n	80047ac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d023      	beq.n	800478c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b80      	cmp	r3, #128	; 0x80
 8004748:	d020      	beq.n	800478c <UART_WaitOnFlagUntilTimeout+0x8a>
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b40      	cmp	r3, #64	; 0x40
 800474e:	d01d      	beq.n	800478c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b08      	cmp	r3, #8
 800475c:	d116      	bne.n	800478c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f81d 	bl	80047b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2208      	movs	r2, #8
 800477e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e00f      	b.n	80047ac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	4013      	ands	r3, r2
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	429a      	cmp	r2, r3
 800479a:	bf0c      	ite	eq
 800479c:	2301      	moveq	r3, #1
 800479e:	2300      	movne	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	79fb      	ldrb	r3, [r7, #7]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d0b4      	beq.n	8004714 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b095      	sub	sp, #84	; 0x54
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	330c      	adds	r3, #12
 80047c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c6:	e853 3f00 	ldrex	r3, [r3]
 80047ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	330c      	adds	r3, #12
 80047da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047dc:	643a      	str	r2, [r7, #64]	; 0x40
 80047de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047e4:	e841 2300 	strex	r3, r2, [r1]
 80047e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1e5      	bne.n	80047bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3314      	adds	r3, #20
 80047f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	e853 3f00 	ldrex	r3, [r3]
 80047fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f023 0301 	bic.w	r3, r3, #1
 8004806:	64bb      	str	r3, [r7, #72]	; 0x48
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3314      	adds	r3, #20
 800480e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004810:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004818:	e841 2300 	strex	r3, r2, [r1]
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e5      	bne.n	80047f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	2b01      	cmp	r3, #1
 800482a:	d119      	bne.n	8004860 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	330c      	adds	r3, #12
 8004832:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	60bb      	str	r3, [r7, #8]
   return(result);
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f023 0310 	bic.w	r3, r3, #16
 8004842:	647b      	str	r3, [r7, #68]	; 0x44
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	330c      	adds	r3, #12
 800484a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800484c:	61ba      	str	r2, [r7, #24]
 800484e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	6979      	ldr	r1, [r7, #20]
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	613b      	str	r3, [r7, #16]
   return(result);
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e5      	bne.n	800482c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800486e:	bf00      	nop
 8004870:	3754      	adds	r7, #84	; 0x54
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
	...

0800487c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800487c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004880:	b0c0      	sub	sp, #256	; 0x100
 8004882:	af00      	add	r7, sp, #0
 8004884:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004898:	68d9      	ldr	r1, [r3, #12]
 800489a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	ea40 0301 	orr.w	r3, r0, r1
 80048a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048d4:	f021 010c 	bic.w	r1, r1, #12
 80048d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048e2:	430b      	orrs	r3, r1
 80048e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f6:	6999      	ldr	r1, [r3, #24]
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	ea40 0301 	orr.w	r3, r0, r1
 8004902:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	4b8f      	ldr	r3, [pc, #572]	; (8004b48 <UART_SetConfig+0x2cc>)
 800490c:	429a      	cmp	r2, r3
 800490e:	d005      	beq.n	800491c <UART_SetConfig+0xa0>
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4b8d      	ldr	r3, [pc, #564]	; (8004b4c <UART_SetConfig+0x2d0>)
 8004918:	429a      	cmp	r2, r3
 800491a:	d104      	bne.n	8004926 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800491c:	f7ff f934 	bl	8003b88 <HAL_RCC_GetPCLK2Freq>
 8004920:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004924:	e003      	b.n	800492e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004926:	f7ff f91b 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
 800492a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800492e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004938:	f040 810c 	bne.w	8004b54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800493c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004940:	2200      	movs	r2, #0
 8004942:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004946:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800494a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800494e:	4622      	mov	r2, r4
 8004950:	462b      	mov	r3, r5
 8004952:	1891      	adds	r1, r2, r2
 8004954:	65b9      	str	r1, [r7, #88]	; 0x58
 8004956:	415b      	adcs	r3, r3
 8004958:	65fb      	str	r3, [r7, #92]	; 0x5c
 800495a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800495e:	4621      	mov	r1, r4
 8004960:	eb12 0801 	adds.w	r8, r2, r1
 8004964:	4629      	mov	r1, r5
 8004966:	eb43 0901 	adc.w	r9, r3, r1
 800496a:	f04f 0200 	mov.w	r2, #0
 800496e:	f04f 0300 	mov.w	r3, #0
 8004972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800497a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800497e:	4690      	mov	r8, r2
 8004980:	4699      	mov	r9, r3
 8004982:	4623      	mov	r3, r4
 8004984:	eb18 0303 	adds.w	r3, r8, r3
 8004988:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800498c:	462b      	mov	r3, r5
 800498e:	eb49 0303 	adc.w	r3, r9, r3
 8004992:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049aa:	460b      	mov	r3, r1
 80049ac:	18db      	adds	r3, r3, r3
 80049ae:	653b      	str	r3, [r7, #80]	; 0x50
 80049b0:	4613      	mov	r3, r2
 80049b2:	eb42 0303 	adc.w	r3, r2, r3
 80049b6:	657b      	str	r3, [r7, #84]	; 0x54
 80049b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049c0:	f7fc f982 	bl	8000cc8 <__aeabi_uldivmod>
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4b61      	ldr	r3, [pc, #388]	; (8004b50 <UART_SetConfig+0x2d4>)
 80049ca:	fba3 2302 	umull	r2, r3, r3, r2
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	011c      	lsls	r4, r3, #4
 80049d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049d6:	2200      	movs	r2, #0
 80049d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049e4:	4642      	mov	r2, r8
 80049e6:	464b      	mov	r3, r9
 80049e8:	1891      	adds	r1, r2, r2
 80049ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80049ec:	415b      	adcs	r3, r3
 80049ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049f4:	4641      	mov	r1, r8
 80049f6:	eb12 0a01 	adds.w	sl, r2, r1
 80049fa:	4649      	mov	r1, r9
 80049fc:	eb43 0b01 	adc.w	fp, r3, r1
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a14:	4692      	mov	sl, r2
 8004a16:	469b      	mov	fp, r3
 8004a18:	4643      	mov	r3, r8
 8004a1a:	eb1a 0303 	adds.w	r3, sl, r3
 8004a1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a22:	464b      	mov	r3, r9
 8004a24:	eb4b 0303 	adc.w	r3, fp, r3
 8004a28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a40:	460b      	mov	r3, r1
 8004a42:	18db      	adds	r3, r3, r3
 8004a44:	643b      	str	r3, [r7, #64]	; 0x40
 8004a46:	4613      	mov	r3, r2
 8004a48:	eb42 0303 	adc.w	r3, r2, r3
 8004a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a56:	f7fc f937 	bl	8000cc8 <__aeabi_uldivmod>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4611      	mov	r1, r2
 8004a60:	4b3b      	ldr	r3, [pc, #236]	; (8004b50 <UART_SetConfig+0x2d4>)
 8004a62:	fba3 2301 	umull	r2, r3, r3, r1
 8004a66:	095b      	lsrs	r3, r3, #5
 8004a68:	2264      	movs	r2, #100	; 0x64
 8004a6a:	fb02 f303 	mul.w	r3, r2, r3
 8004a6e:	1acb      	subs	r3, r1, r3
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a76:	4b36      	ldr	r3, [pc, #216]	; (8004b50 <UART_SetConfig+0x2d4>)
 8004a78:	fba3 2302 	umull	r2, r3, r3, r2
 8004a7c:	095b      	lsrs	r3, r3, #5
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a84:	441c      	add	r4, r3
 8004a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a98:	4642      	mov	r2, r8
 8004a9a:	464b      	mov	r3, r9
 8004a9c:	1891      	adds	r1, r2, r2
 8004a9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004aa0:	415b      	adcs	r3, r3
 8004aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004aa8:	4641      	mov	r1, r8
 8004aaa:	1851      	adds	r1, r2, r1
 8004aac:	6339      	str	r1, [r7, #48]	; 0x30
 8004aae:	4649      	mov	r1, r9
 8004ab0:	414b      	adcs	r3, r1
 8004ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ac0:	4659      	mov	r1, fp
 8004ac2:	00cb      	lsls	r3, r1, #3
 8004ac4:	4651      	mov	r1, sl
 8004ac6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aca:	4651      	mov	r1, sl
 8004acc:	00ca      	lsls	r2, r1, #3
 8004ace:	4610      	mov	r0, r2
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	4642      	mov	r2, r8
 8004ad6:	189b      	adds	r3, r3, r2
 8004ad8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004adc:	464b      	mov	r3, r9
 8004ade:	460a      	mov	r2, r1
 8004ae0:	eb42 0303 	adc.w	r3, r2, r3
 8004ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004af4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004af8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004afc:	460b      	mov	r3, r1
 8004afe:	18db      	adds	r3, r3, r3
 8004b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b02:	4613      	mov	r3, r2
 8004b04:	eb42 0303 	adc.w	r3, r2, r3
 8004b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b12:	f7fc f8d9 	bl	8000cc8 <__aeabi_uldivmod>
 8004b16:	4602      	mov	r2, r0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	4b0d      	ldr	r3, [pc, #52]	; (8004b50 <UART_SetConfig+0x2d4>)
 8004b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b20:	095b      	lsrs	r3, r3, #5
 8004b22:	2164      	movs	r1, #100	; 0x64
 8004b24:	fb01 f303 	mul.w	r3, r1, r3
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	3332      	adds	r3, #50	; 0x32
 8004b2e:	4a08      	ldr	r2, [pc, #32]	; (8004b50 <UART_SetConfig+0x2d4>)
 8004b30:	fba2 2303 	umull	r2, r3, r2, r3
 8004b34:	095b      	lsrs	r3, r3, #5
 8004b36:	f003 0207 	and.w	r2, r3, #7
 8004b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4422      	add	r2, r4
 8004b42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b44:	e106      	b.n	8004d54 <UART_SetConfig+0x4d8>
 8004b46:	bf00      	nop
 8004b48:	40011000 	.word	0x40011000
 8004b4c:	40011400 	.word	0x40011400
 8004b50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b5e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b66:	4642      	mov	r2, r8
 8004b68:	464b      	mov	r3, r9
 8004b6a:	1891      	adds	r1, r2, r2
 8004b6c:	6239      	str	r1, [r7, #32]
 8004b6e:	415b      	adcs	r3, r3
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
 8004b72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b76:	4641      	mov	r1, r8
 8004b78:	1854      	adds	r4, r2, r1
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	eb43 0501 	adc.w	r5, r3, r1
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	00eb      	lsls	r3, r5, #3
 8004b8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b8e:	00e2      	lsls	r2, r4, #3
 8004b90:	4614      	mov	r4, r2
 8004b92:	461d      	mov	r5, r3
 8004b94:	4643      	mov	r3, r8
 8004b96:	18e3      	adds	r3, r4, r3
 8004b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b9c:	464b      	mov	r3, r9
 8004b9e:	eb45 0303 	adc.w	r3, r5, r3
 8004ba2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004bb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	008b      	lsls	r3, r1, #2
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bcc:	4621      	mov	r1, r4
 8004bce:	008a      	lsls	r2, r1, #2
 8004bd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004bd4:	f7fc f878 	bl	8000cc8 <__aeabi_uldivmod>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4b60      	ldr	r3, [pc, #384]	; (8004d60 <UART_SetConfig+0x4e4>)
 8004bde:	fba3 2302 	umull	r2, r3, r3, r2
 8004be2:	095b      	lsrs	r3, r3, #5
 8004be4:	011c      	lsls	r4, r3, #4
 8004be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bea:	2200      	movs	r2, #0
 8004bec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bf0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004bf4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004bf8:	4642      	mov	r2, r8
 8004bfa:	464b      	mov	r3, r9
 8004bfc:	1891      	adds	r1, r2, r2
 8004bfe:	61b9      	str	r1, [r7, #24]
 8004c00:	415b      	adcs	r3, r3
 8004c02:	61fb      	str	r3, [r7, #28]
 8004c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c08:	4641      	mov	r1, r8
 8004c0a:	1851      	adds	r1, r2, r1
 8004c0c:	6139      	str	r1, [r7, #16]
 8004c0e:	4649      	mov	r1, r9
 8004c10:	414b      	adcs	r3, r1
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c20:	4659      	mov	r1, fp
 8004c22:	00cb      	lsls	r3, r1, #3
 8004c24:	4651      	mov	r1, sl
 8004c26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c2a:	4651      	mov	r1, sl
 8004c2c:	00ca      	lsls	r2, r1, #3
 8004c2e:	4610      	mov	r0, r2
 8004c30:	4619      	mov	r1, r3
 8004c32:	4603      	mov	r3, r0
 8004c34:	4642      	mov	r2, r8
 8004c36:	189b      	adds	r3, r3, r2
 8004c38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c3c:	464b      	mov	r3, r9
 8004c3e:	460a      	mov	r2, r1
 8004c40:	eb42 0303 	adc.w	r3, r2, r3
 8004c44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c60:	4649      	mov	r1, r9
 8004c62:	008b      	lsls	r3, r1, #2
 8004c64:	4641      	mov	r1, r8
 8004c66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c6a:	4641      	mov	r1, r8
 8004c6c:	008a      	lsls	r2, r1, #2
 8004c6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c72:	f7fc f829 	bl	8000cc8 <__aeabi_uldivmod>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	4b38      	ldr	r3, [pc, #224]	; (8004d60 <UART_SetConfig+0x4e4>)
 8004c7e:	fba3 2301 	umull	r2, r3, r3, r1
 8004c82:	095b      	lsrs	r3, r3, #5
 8004c84:	2264      	movs	r2, #100	; 0x64
 8004c86:	fb02 f303 	mul.w	r3, r2, r3
 8004c8a:	1acb      	subs	r3, r1, r3
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	3332      	adds	r3, #50	; 0x32
 8004c90:	4a33      	ldr	r2, [pc, #204]	; (8004d60 <UART_SetConfig+0x4e4>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c9c:	441c      	add	r4, r3
 8004c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	673b      	str	r3, [r7, #112]	; 0x70
 8004ca6:	677a      	str	r2, [r7, #116]	; 0x74
 8004ca8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004cac:	4642      	mov	r2, r8
 8004cae:	464b      	mov	r3, r9
 8004cb0:	1891      	adds	r1, r2, r2
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	415b      	adcs	r3, r3
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cbc:	4641      	mov	r1, r8
 8004cbe:	1851      	adds	r1, r2, r1
 8004cc0:	6039      	str	r1, [r7, #0]
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	414b      	adcs	r3, r1
 8004cc6:	607b      	str	r3, [r7, #4]
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cd4:	4659      	mov	r1, fp
 8004cd6:	00cb      	lsls	r3, r1, #3
 8004cd8:	4651      	mov	r1, sl
 8004cda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cde:	4651      	mov	r1, sl
 8004ce0:	00ca      	lsls	r2, r1, #3
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	4642      	mov	r2, r8
 8004cea:	189b      	adds	r3, r3, r2
 8004cec:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cee:	464b      	mov	r3, r9
 8004cf0:	460a      	mov	r2, r1
 8004cf2:	eb42 0303 	adc.w	r3, r2, r3
 8004cf6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	663b      	str	r3, [r7, #96]	; 0x60
 8004d02:	667a      	str	r2, [r7, #100]	; 0x64
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d10:	4649      	mov	r1, r9
 8004d12:	008b      	lsls	r3, r1, #2
 8004d14:	4641      	mov	r1, r8
 8004d16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d1a:	4641      	mov	r1, r8
 8004d1c:	008a      	lsls	r2, r1, #2
 8004d1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d22:	f7fb ffd1 	bl	8000cc8 <__aeabi_uldivmod>
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4b0d      	ldr	r3, [pc, #52]	; (8004d60 <UART_SetConfig+0x4e4>)
 8004d2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d30:	095b      	lsrs	r3, r3, #5
 8004d32:	2164      	movs	r1, #100	; 0x64
 8004d34:	fb01 f303 	mul.w	r3, r1, r3
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	3332      	adds	r3, #50	; 0x32
 8004d3e:	4a08      	ldr	r2, [pc, #32]	; (8004d60 <UART_SetConfig+0x4e4>)
 8004d40:	fba2 2303 	umull	r2, r3, r2, r3
 8004d44:	095b      	lsrs	r3, r3, #5
 8004d46:	f003 020f 	and.w	r2, r3, #15
 8004d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4422      	add	r2, r4
 8004d52:	609a      	str	r2, [r3, #8]
}
 8004d54:	bf00      	nop
 8004d56:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d60:	51eb851f 	.word	0x51eb851f

08004d64 <__NVIC_SetPriority>:
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	6039      	str	r1, [r7, #0]
 8004d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	db0a      	blt.n	8004d8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	b2da      	uxtb	r2, r3
 8004d7c:	490c      	ldr	r1, [pc, #48]	; (8004db0 <__NVIC_SetPriority+0x4c>)
 8004d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d82:	0112      	lsls	r2, r2, #4
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	440b      	add	r3, r1
 8004d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004d8c:	e00a      	b.n	8004da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	4908      	ldr	r1, [pc, #32]	; (8004db4 <__NVIC_SetPriority+0x50>)
 8004d94:	79fb      	ldrb	r3, [r7, #7]
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	3b04      	subs	r3, #4
 8004d9c:	0112      	lsls	r2, r2, #4
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	440b      	add	r3, r1
 8004da2:	761a      	strb	r2, [r3, #24]
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	e000e100 	.word	0xe000e100
 8004db4:	e000ed00 	.word	0xe000ed00

08004db8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	f06f 0004 	mvn.w	r0, #4
 8004dc2:	f7ff ffcf 	bl	8004d64 <__NVIC_SetPriority>
#endif
}
 8004dc6:	bf00      	nop
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dd2:	f3ef 8305 	mrs	r3, IPSR
 8004dd6:	603b      	str	r3, [r7, #0]
  return(result);
 8004dd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004dde:	f06f 0305 	mvn.w	r3, #5
 8004de2:	607b      	str	r3, [r7, #4]
 8004de4:	e00c      	b.n	8004e00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004de6:	4b0a      	ldr	r3, [pc, #40]	; (8004e10 <osKernelInitialize+0x44>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d105      	bne.n	8004dfa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004dee:	4b08      	ldr	r3, [pc, #32]	; (8004e10 <osKernelInitialize+0x44>)
 8004df0:	2201      	movs	r2, #1
 8004df2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004df4:	2300      	movs	r3, #0
 8004df6:	607b      	str	r3, [r7, #4]
 8004df8:	e002      	b.n	8004e00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8004dfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004e00:	687b      	ldr	r3, [r7, #4]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	20000770 	.word	0x20000770

08004e14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e1a:	f3ef 8305 	mrs	r3, IPSR
 8004e1e:	603b      	str	r3, [r7, #0]
  return(result);
 8004e20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004e26:	f06f 0305 	mvn.w	r3, #5
 8004e2a:	607b      	str	r3, [r7, #4]
 8004e2c:	e010      	b.n	8004e50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004e2e:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <osKernelStart+0x48>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d109      	bne.n	8004e4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004e36:	f7ff ffbf 	bl	8004db8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004e3a:	4b08      	ldr	r3, [pc, #32]	; (8004e5c <osKernelStart+0x48>)
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004e40:	f001 f8c4 	bl	8005fcc <vTaskStartScheduler>
      stat = osOK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	607b      	str	r3, [r7, #4]
 8004e48:	e002      	b.n	8004e50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004e50:	687b      	ldr	r3, [r7, #4]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000770 	.word	0x20000770

08004e60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08e      	sub	sp, #56	; 0x38
 8004e64:	af04      	add	r7, sp, #16
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e70:	f3ef 8305 	mrs	r3, IPSR
 8004e74:	617b      	str	r3, [r7, #20]
  return(result);
 8004e76:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d17e      	bne.n	8004f7a <osThreadNew+0x11a>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d07b      	beq.n	8004f7a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004e82:	2380      	movs	r3, #128	; 0x80
 8004e84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004e86:	2318      	movs	r3, #24
 8004e88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d045      	beq.n	8004f26 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d002      	beq.n	8004ea8 <osThreadNew+0x48>
        name = attr->name;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d008      	beq.n	8004ece <osThreadNew+0x6e>
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	2b38      	cmp	r3, #56	; 0x38
 8004ec0:	d805      	bhi.n	8004ece <osThreadNew+0x6e>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <osThreadNew+0x72>
        return (NULL);
 8004ece:	2300      	movs	r3, #0
 8004ed0:	e054      	b.n	8004f7c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	089b      	lsrs	r3, r3, #2
 8004ee0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00e      	beq.n	8004f08 <osThreadNew+0xa8>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	2b5b      	cmp	r3, #91	; 0x5b
 8004ef0:	d90a      	bls.n	8004f08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d006      	beq.n	8004f08 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <osThreadNew+0xa8>
        mem = 1;
 8004f02:	2301      	movs	r3, #1
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	e010      	b.n	8004f2a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10c      	bne.n	8004f2a <osThreadNew+0xca>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d108      	bne.n	8004f2a <osThreadNew+0xca>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d104      	bne.n	8004f2a <osThreadNew+0xca>
          mem = 0;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61bb      	str	r3, [r7, #24]
 8004f24:	e001      	b.n	8004f2a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d110      	bne.n	8004f52 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f38:	9202      	str	r2, [sp, #8]
 8004f3a:	9301      	str	r3, [sp, #4]
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	6a3a      	ldr	r2, [r7, #32]
 8004f44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 fe9e 	bl	8005c88 <xTaskCreateStatic>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	613b      	str	r3, [r7, #16]
 8004f50:	e013      	b.n	8004f7a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d110      	bne.n	8004f7a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	f107 0310 	add.w	r3, r7, #16
 8004f60:	9301      	str	r3, [sp, #4]
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f000 fee9 	bl	8005d42 <xTaskCreate>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d001      	beq.n	8004f7a <osThreadNew+0x11a>
            hTask = NULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004f7a:	693b      	ldr	r3, [r7, #16]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3728      	adds	r7, #40	; 0x28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08a      	sub	sp, #40	; 0x28
 8004f88:	af02      	add	r7, sp, #8
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004f90:	2300      	movs	r3, #0
 8004f92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f94:	f3ef 8305 	mrs	r3, IPSR
 8004f98:	613b      	str	r3, [r7, #16]
  return(result);
 8004f9a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d15f      	bne.n	8005060 <osMessageQueueNew+0xdc>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d05c      	beq.n	8005060 <osMessageQueueNew+0xdc>
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d059      	beq.n	8005060 <osMessageQueueNew+0xdc>
    mem = -1;
 8004fac:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d029      	beq.n	800500c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d012      	beq.n	8004fe6 <osMessageQueueNew+0x62>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	2b4f      	cmp	r3, #79	; 0x4f
 8004fc6:	d90e      	bls.n	8004fe6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00a      	beq.n	8004fe6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	695a      	ldr	r2, [r3, #20]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	68b9      	ldr	r1, [r7, #8]
 8004fd8:	fb01 f303 	mul.w	r3, r1, r3
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d302      	bcc.n	8004fe6 <osMessageQueueNew+0x62>
        mem = 1;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	61bb      	str	r3, [r7, #24]
 8004fe4:	e014      	b.n	8005010 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d110      	bne.n	8005010 <osMessageQueueNew+0x8c>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10c      	bne.n	8005010 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d108      	bne.n	8005010 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d104      	bne.n	8005010 <osMessageQueueNew+0x8c>
          mem = 0;
 8005006:	2300      	movs	r3, #0
 8005008:	61bb      	str	r3, [r7, #24]
 800500a:	e001      	b.n	8005010 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800500c:	2300      	movs	r3, #0
 800500e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d10b      	bne.n	800502e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2100      	movs	r1, #0
 8005020:	9100      	str	r1, [sp, #0]
 8005022:	68b9      	ldr	r1, [r7, #8]
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 f971 	bl	800530c <xQueueGenericCreateStatic>
 800502a:	61f8      	str	r0, [r7, #28]
 800502c:	e008      	b.n	8005040 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d105      	bne.n	8005040 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005034:	2200      	movs	r2, #0
 8005036:	68b9      	ldr	r1, [r7, #8]
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 f9df 	bl	80053fc <xQueueGenericCreate>
 800503e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00c      	beq.n	8005060 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <osMessageQueueNew+0xd0>
        name = attr->name;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	e001      	b.n	8005058 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005058:	6979      	ldr	r1, [r7, #20]
 800505a:	69f8      	ldr	r0, [r7, #28]
 800505c:	f000 fdb6 	bl	8005bcc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005060:	69fb      	ldr	r3, [r7, #28]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3720      	adds	r7, #32
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
	...

0800506c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4a07      	ldr	r2, [pc, #28]	; (8005098 <vApplicationGetIdleTaskMemory+0x2c>)
 800507c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	4a06      	ldr	r2, [pc, #24]	; (800509c <vApplicationGetIdleTaskMemory+0x30>)
 8005082:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2280      	movs	r2, #128	; 0x80
 8005088:	601a      	str	r2, [r3, #0]
}
 800508a:	bf00      	nop
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	20000774 	.word	0x20000774
 800509c:	200007d0 	.word	0x200007d0

080050a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4a07      	ldr	r2, [pc, #28]	; (80050cc <vApplicationGetTimerTaskMemory+0x2c>)
 80050b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	4a06      	ldr	r2, [pc, #24]	; (80050d0 <vApplicationGetTimerTaskMemory+0x30>)
 80050b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050be:	601a      	str	r2, [r3, #0]
}
 80050c0:	bf00      	nop
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	200009d0 	.word	0x200009d0
 80050d0:	20000a2c 	.word	0x20000a2c

080050d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f103 0208 	add.w	r2, r3, #8
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f04f 32ff 	mov.w	r2, #4294967295
 80050ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f103 0208 	add.w	r2, r3, #8
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f103 0208 	add.w	r2, r3, #8
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800512e:	b480      	push	{r7}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	683a      	ldr	r2, [r7, #0]
 8005158:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	1c5a      	adds	r2, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	601a      	str	r2, [r3, #0]
}
 800516a:	bf00      	nop
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005176:	b480      	push	{r7}
 8005178:	b085      	sub	sp, #20
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518c:	d103      	bne.n	8005196 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	e00c      	b.n	80051b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3308      	adds	r3, #8
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	e002      	b.n	80051a4 <vListInsert+0x2e>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d2f6      	bcs.n	800519e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	601a      	str	r2, [r3, #0]
}
 80051dc:	bf00      	nop
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6892      	ldr	r2, [r2, #8]
 80051fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6852      	ldr	r2, [r2, #4]
 8005208:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	429a      	cmp	r2, r3
 8005212:	d103      	bne.n	800521c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	1e5a      	subs	r2, r3, #1
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10a      	bne.n	8005266 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005262:	bf00      	nop
 8005264:	e7fe      	b.n	8005264 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005266:	f002 f855 	bl	8007314 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005272:	68f9      	ldr	r1, [r7, #12]
 8005274:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005276:	fb01 f303 	mul.w	r3, r1, r3
 800527a:	441a      	add	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005296:	3b01      	subs	r3, #1
 8005298:	68f9      	ldr	r1, [r7, #12]
 800529a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800529c:	fb01 f303 	mul.w	r3, r1, r3
 80052a0:	441a      	add	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	22ff      	movs	r2, #255	; 0xff
 80052aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	22ff      	movs	r2, #255	; 0xff
 80052b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d114      	bne.n	80052e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d01a      	beq.n	80052fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	3310      	adds	r3, #16
 80052c8:	4618      	mov	r0, r3
 80052ca:	f001 f909 	bl	80064e0 <xTaskRemoveFromEventList>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d012      	beq.n	80052fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <xQueueGenericReset+0xcc>)
 80052d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	e009      	b.n	80052fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3310      	adds	r3, #16
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7ff fef2 	bl	80050d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	3324      	adds	r3, #36	; 0x24
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff feed 	bl	80050d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80052fa:	f002 f83b 	bl	8007374 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80052fe:	2301      	movs	r3, #1
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	e000ed04 	.word	0xe000ed04

0800530c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08e      	sub	sp, #56	; 0x38
 8005310:	af02      	add	r7, sp, #8
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10a      	bne.n	8005336 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005332:	bf00      	nop
 8005334:	e7fe      	b.n	8005334 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10a      	bne.n	8005352 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800533c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005340:	f383 8811 	msr	BASEPRI, r3
 8005344:	f3bf 8f6f 	isb	sy
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800534e:	bf00      	nop
 8005350:	e7fe      	b.n	8005350 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d002      	beq.n	800535e <xQueueGenericCreateStatic+0x52>
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <xQueueGenericCreateStatic+0x56>
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <xQueueGenericCreateStatic+0x58>
 8005362:	2300      	movs	r3, #0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10a      	bne.n	800537e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	623b      	str	r3, [r7, #32]
}
 800537a:	bf00      	nop
 800537c:	e7fe      	b.n	800537c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d102      	bne.n	800538a <xQueueGenericCreateStatic+0x7e>
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <xQueueGenericCreateStatic+0x82>
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <xQueueGenericCreateStatic+0x84>
 800538e:	2300      	movs	r3, #0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10a      	bne.n	80053aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	61fb      	str	r3, [r7, #28]
}
 80053a6:	bf00      	nop
 80053a8:	e7fe      	b.n	80053a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80053aa:	2350      	movs	r3, #80	; 0x50
 80053ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b50      	cmp	r3, #80	; 0x50
 80053b2:	d00a      	beq.n	80053ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	61bb      	str	r3, [r7, #24]
}
 80053c6:	bf00      	nop
 80053c8:	e7fe      	b.n	80053c8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80053ca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80053d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00d      	beq.n	80053f2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80053d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053de:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80053e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	4613      	mov	r3, r2
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f83f 	bl	8005470 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80053f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3730      	adds	r7, #48	; 0x30
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08a      	sub	sp, #40	; 0x28
 8005400:	af02      	add	r7, sp, #8
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	4613      	mov	r3, r2
 8005408:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10a      	bne.n	8005426 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
 8005420:	613b      	str	r3, [r7, #16]
}
 8005422:	bf00      	nop
 8005424:	e7fe      	b.n	8005424 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	fb02 f303 	mul.w	r3, r2, r3
 800542e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	3350      	adds	r3, #80	; 0x50
 8005434:	4618      	mov	r0, r3
 8005436:	f002 f88f 	bl	8007558 <pvPortMalloc>
 800543a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d011      	beq.n	8005466 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	3350      	adds	r3, #80	; 0x50
 800544a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005454:	79fa      	ldrb	r2, [r7, #7]
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	4613      	mov	r3, r2
 800545c:	697a      	ldr	r2, [r7, #20]
 800545e:	68b9      	ldr	r1, [r7, #8]
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 f805 	bl	8005470 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005466:	69bb      	ldr	r3, [r7, #24]
	}
 8005468:	4618      	mov	r0, r3
 800546a:	3720      	adds	r7, #32
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d103      	bne.n	800548c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	e002      	b.n	8005492 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800549e:	2101      	movs	r1, #1
 80054a0:	69b8      	ldr	r0, [r7, #24]
 80054a2:	f7ff fecb 	bl	800523c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	78fa      	ldrb	r2, [r7, #3]
 80054aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80054ae:	bf00      	nop
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08e      	sub	sp, #56	; 0x38
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
 80054c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054c6:	2300      	movs	r3, #0
 80054c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10a      	bne.n	80054ea <xQueueGenericSend+0x32>
	__asm volatile
 80054d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80054e6:	bf00      	nop
 80054e8:	e7fe      	b.n	80054e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d103      	bne.n	80054f8 <xQueueGenericSend+0x40>
 80054f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <xQueueGenericSend+0x44>
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <xQueueGenericSend+0x46>
 80054fc:	2300      	movs	r3, #0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10a      	bne.n	8005518 <xQueueGenericSend+0x60>
	__asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005514:	bf00      	nop
 8005516:	e7fe      	b.n	8005516 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	2b02      	cmp	r3, #2
 800551c:	d103      	bne.n	8005526 <xQueueGenericSend+0x6e>
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <xQueueGenericSend+0x72>
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <xQueueGenericSend+0x74>
 800552a:	2300      	movs	r3, #0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10a      	bne.n	8005546 <xQueueGenericSend+0x8e>
	__asm volatile
 8005530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	623b      	str	r3, [r7, #32]
}
 8005542:	bf00      	nop
 8005544:	e7fe      	b.n	8005544 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005546:	f001 f989 	bl	800685c <xTaskGetSchedulerState>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d102      	bne.n	8005556 <xQueueGenericSend+0x9e>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <xQueueGenericSend+0xa2>
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <xQueueGenericSend+0xa4>
 800555a:	2300      	movs	r3, #0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10a      	bne.n	8005576 <xQueueGenericSend+0xbe>
	__asm volatile
 8005560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	61fb      	str	r3, [r7, #28]
}
 8005572:	bf00      	nop
 8005574:	e7fe      	b.n	8005574 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005576:	f001 fecd 	bl	8007314 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800557a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005582:	429a      	cmp	r2, r3
 8005584:	d302      	bcc.n	800558c <xQueueGenericSend+0xd4>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b02      	cmp	r3, #2
 800558a:	d129      	bne.n	80055e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	68b9      	ldr	r1, [r7, #8]
 8005590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005592:	f000 fa0b 	bl	80059ac <prvCopyDataToQueue>
 8005596:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	2b00      	cmp	r3, #0
 800559e:	d010      	beq.n	80055c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	3324      	adds	r3, #36	; 0x24
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 ff9b 	bl	80064e0 <xTaskRemoveFromEventList>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d013      	beq.n	80055d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80055b0:	4b3f      	ldr	r3, [pc, #252]	; (80056b0 <xQueueGenericSend+0x1f8>)
 80055b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	e00a      	b.n	80055d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80055c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d007      	beq.n	80055d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80055c8:	4b39      	ldr	r3, [pc, #228]	; (80056b0 <xQueueGenericSend+0x1f8>)
 80055ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80055d8:	f001 fecc 	bl	8007374 <vPortExitCritical>
				return pdPASS;
 80055dc:	2301      	movs	r3, #1
 80055de:	e063      	b.n	80056a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d103      	bne.n	80055ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055e6:	f001 fec5 	bl	8007374 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	e05c      	b.n	80056a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d106      	bne.n	8005602 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055f4:	f107 0314 	add.w	r3, r7, #20
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 ffd5 	bl	80065a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055fe:	2301      	movs	r3, #1
 8005600:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005602:	f001 feb7 	bl	8007374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005606:	f000 fd47 	bl	8006098 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800560a:	f001 fe83 	bl	8007314 <vPortEnterCritical>
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005614:	b25b      	sxtb	r3, r3
 8005616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561a:	d103      	bne.n	8005624 <xQueueGenericSend+0x16c>
 800561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005626:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800562a:	b25b      	sxtb	r3, r3
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d103      	bne.n	800563a <xQueueGenericSend+0x182>
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800563a:	f001 fe9b 	bl	8007374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800563e:	1d3a      	adds	r2, r7, #4
 8005640:	f107 0314 	add.w	r3, r7, #20
 8005644:	4611      	mov	r1, r2
 8005646:	4618      	mov	r0, r3
 8005648:	f000 ffc4 	bl	80065d4 <xTaskCheckForTimeOut>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d124      	bne.n	800569c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005652:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005654:	f000 faa2 	bl	8005b9c <prvIsQueueFull>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d018      	beq.n	8005690 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	3310      	adds	r3, #16
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	4611      	mov	r1, r2
 8005666:	4618      	mov	r0, r3
 8005668:	f000 feea 	bl	8006440 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800566c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800566e:	f000 fa2d 	bl	8005acc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005672:	f000 fd1f 	bl	80060b4 <xTaskResumeAll>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	f47f af7c 	bne.w	8005576 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800567e:	4b0c      	ldr	r3, [pc, #48]	; (80056b0 <xQueueGenericSend+0x1f8>)
 8005680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	e772      	b.n	8005576 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005692:	f000 fa1b 	bl	8005acc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005696:	f000 fd0d 	bl	80060b4 <xTaskResumeAll>
 800569a:	e76c      	b.n	8005576 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800569c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800569e:	f000 fa15 	bl	8005acc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056a2:	f000 fd07 	bl	80060b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80056a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3738      	adds	r7, #56	; 0x38
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	e000ed04 	.word	0xe000ed04

080056b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b090      	sub	sp, #64	; 0x40
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80056c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10a      	bne.n	80056e2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80056cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d0:	f383 8811 	msr	BASEPRI, r3
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	f3bf 8f4f 	dsb	sy
 80056dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056de:	bf00      	nop
 80056e0:	e7fe      	b.n	80056e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d103      	bne.n	80056f0 <xQueueGenericSendFromISR+0x3c>
 80056e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <xQueueGenericSendFromISR+0x40>
 80056f0:	2301      	movs	r3, #1
 80056f2:	e000      	b.n	80056f6 <xQueueGenericSendFromISR+0x42>
 80056f4:	2300      	movs	r3, #0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10a      	bne.n	8005710 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80056fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800570c:	bf00      	nop
 800570e:	e7fe      	b.n	800570e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2b02      	cmp	r3, #2
 8005714:	d103      	bne.n	800571e <xQueueGenericSendFromISR+0x6a>
 8005716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <xQueueGenericSendFromISR+0x6e>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <xQueueGenericSendFromISR+0x70>
 8005722:	2300      	movs	r3, #0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	623b      	str	r3, [r7, #32]
}
 800573a:	bf00      	nop
 800573c:	e7fe      	b.n	800573c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800573e:	f001 fecb 	bl	80074d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005742:	f3ef 8211 	mrs	r2, BASEPRI
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	61fa      	str	r2, [r7, #28]
 8005758:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800575a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800575c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800575e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005766:	429a      	cmp	r2, r3
 8005768:	d302      	bcc.n	8005770 <xQueueGenericSendFromISR+0xbc>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b02      	cmp	r3, #2
 800576e:	d12f      	bne.n	80057d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005772:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800577a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	68b9      	ldr	r1, [r7, #8]
 8005784:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005786:	f000 f911 	bl	80059ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800578a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d112      	bne.n	80057ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005798:	2b00      	cmp	r3, #0
 800579a:	d016      	beq.n	80057ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800579c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579e:	3324      	adds	r3, #36	; 0x24
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 fe9d 	bl	80064e0 <xTaskRemoveFromEventList>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00e      	beq.n	80057ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00b      	beq.n	80057ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	e007      	b.n	80057ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80057ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80057be:	3301      	adds	r3, #1
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	b25a      	sxtb	r2, r3
 80057c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80057ca:	2301      	movs	r3, #1
 80057cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80057ce:	e001      	b.n	80057d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80057d0:	2300      	movs	r3, #0
 80057d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3740      	adds	r7, #64	; 0x40
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
	...

080057ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08c      	sub	sp, #48	; 0x30
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80057f8:	2300      	movs	r3, #0
 80057fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10a      	bne.n	800581c <xQueueReceive+0x30>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	623b      	str	r3, [r7, #32]
}
 8005818:	bf00      	nop
 800581a:	e7fe      	b.n	800581a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d103      	bne.n	800582a <xQueueReceive+0x3e>
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <xQueueReceive+0x42>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <xQueueReceive+0x44>
 800582e:	2300      	movs	r3, #0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10a      	bne.n	800584a <xQueueReceive+0x5e>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	61fb      	str	r3, [r7, #28]
}
 8005846:	bf00      	nop
 8005848:	e7fe      	b.n	8005848 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800584a:	f001 f807 	bl	800685c <xTaskGetSchedulerState>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d102      	bne.n	800585a <xQueueReceive+0x6e>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <xQueueReceive+0x72>
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <xQueueReceive+0x74>
 800585e:	2300      	movs	r3, #0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <xQueueReceive+0x8e>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	61bb      	str	r3, [r7, #24]
}
 8005876:	bf00      	nop
 8005878:	e7fe      	b.n	8005878 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800587a:	f001 fd4b 	bl	8007314 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800587e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	2b00      	cmp	r3, #0
 8005888:	d01f      	beq.n	80058ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800588a:	68b9      	ldr	r1, [r7, #8]
 800588c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800588e:	f000 f8f7 	bl	8005a80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	1e5a      	subs	r2, r3, #1
 8005896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005898:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800589a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00f      	beq.n	80058c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a4:	3310      	adds	r3, #16
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fe1a 	bl	80064e0 <xTaskRemoveFromEventList>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d007      	beq.n	80058c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80058b2:	4b3d      	ldr	r3, [pc, #244]	; (80059a8 <xQueueReceive+0x1bc>)
 80058b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	f3bf 8f4f 	dsb	sy
 80058be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80058c2:	f001 fd57 	bl	8007374 <vPortExitCritical>
				return pdPASS;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e069      	b.n	800599e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d103      	bne.n	80058d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80058d0:	f001 fd50 	bl	8007374 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058d4:	2300      	movs	r3, #0
 80058d6:	e062      	b.n	800599e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058de:	f107 0310 	add.w	r3, r7, #16
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fe60 	bl	80065a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058e8:	2301      	movs	r3, #1
 80058ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058ec:	f001 fd42 	bl	8007374 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058f0:	f000 fbd2 	bl	8006098 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058f4:	f001 fd0e 	bl	8007314 <vPortEnterCritical>
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058fe:	b25b      	sxtb	r3, r3
 8005900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005904:	d103      	bne.n	800590e <xQueueReceive+0x122>
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005914:	b25b      	sxtb	r3, r3
 8005916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591a:	d103      	bne.n	8005924 <xQueueReceive+0x138>
 800591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005924:	f001 fd26 	bl	8007374 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005928:	1d3a      	adds	r2, r7, #4
 800592a:	f107 0310 	add.w	r3, r7, #16
 800592e:	4611      	mov	r1, r2
 8005930:	4618      	mov	r0, r3
 8005932:	f000 fe4f 	bl	80065d4 <xTaskCheckForTimeOut>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d123      	bne.n	8005984 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800593c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800593e:	f000 f917 	bl	8005b70 <prvIsQueueEmpty>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d017      	beq.n	8005978 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594a:	3324      	adds	r3, #36	; 0x24
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	4611      	mov	r1, r2
 8005950:	4618      	mov	r0, r3
 8005952:	f000 fd75 	bl	8006440 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005958:	f000 f8b8 	bl	8005acc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800595c:	f000 fbaa 	bl	80060b4 <xTaskResumeAll>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d189      	bne.n	800587a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005966:	4b10      	ldr	r3, [pc, #64]	; (80059a8 <xQueueReceive+0x1bc>)
 8005968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	e780      	b.n	800587a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800597a:	f000 f8a7 	bl	8005acc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800597e:	f000 fb99 	bl	80060b4 <xTaskResumeAll>
 8005982:	e77a      	b.n	800587a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005984:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005986:	f000 f8a1 	bl	8005acc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800598a:	f000 fb93 	bl	80060b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800598e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005990:	f000 f8ee 	bl	8005b70 <prvIsQueueEmpty>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	f43f af6f 	beq.w	800587a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800599c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3730      	adds	r7, #48	; 0x30
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	e000ed04 	.word	0xe000ed04

080059ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10d      	bne.n	80059e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d14d      	bne.n	8005a6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 ff5e 	bl	8006898 <xTaskPriorityDisinherit>
 80059dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	609a      	str	r2, [r3, #8]
 80059e4:	e043      	b.n	8005a6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d119      	bne.n	8005a20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6858      	ldr	r0, [r3, #4]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f4:	461a      	mov	r2, r3
 80059f6:	68b9      	ldr	r1, [r7, #8]
 80059f8:	f003 f80f 	bl	8008a1a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a04:	441a      	add	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d32b      	bcc.n	8005a6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	605a      	str	r2, [r3, #4]
 8005a1e:	e026      	b.n	8005a6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	68d8      	ldr	r0, [r3, #12]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a28:	461a      	mov	r2, r3
 8005a2a:	68b9      	ldr	r1, [r7, #8]
 8005a2c:	f002 fff5 	bl	8008a1a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	68da      	ldr	r2, [r3, #12]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a38:	425b      	negs	r3, r3
 8005a3a:	441a      	add	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	68da      	ldr	r2, [r3, #12]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d207      	bcs.n	8005a5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a54:	425b      	negs	r3, r3
 8005a56:	441a      	add	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d105      	bne.n	8005a6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005a76:	697b      	ldr	r3, [r7, #20]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3718      	adds	r7, #24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d018      	beq.n	8005ac4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	441a      	add	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68da      	ldr	r2, [r3, #12]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d303      	bcc.n	8005ab4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68d9      	ldr	r1, [r3, #12]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abc:	461a      	mov	r2, r3
 8005abe:	6838      	ldr	r0, [r7, #0]
 8005ac0:	f002 ffab 	bl	8008a1a <memcpy>
	}
}
 8005ac4:	bf00      	nop
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ad4:	f001 fc1e 	bl	8007314 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ade:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ae0:	e011      	b.n	8005b06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d012      	beq.n	8005b10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	3324      	adds	r3, #36	; 0x24
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fcf6 	bl	80064e0 <xTaskRemoveFromEventList>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005afa:	f000 fdcd 	bl	8006698 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
 8005b00:	3b01      	subs	r3, #1
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	dce9      	bgt.n	8005ae2 <prvUnlockQueue+0x16>
 8005b0e:	e000      	b.n	8005b12 <prvUnlockQueue+0x46>
					break;
 8005b10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	22ff      	movs	r2, #255	; 0xff
 8005b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005b1a:	f001 fc2b 	bl	8007374 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b1e:	f001 fbf9 	bl	8007314 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b2a:	e011      	b.n	8005b50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d012      	beq.n	8005b5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3310      	adds	r3, #16
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fcd1 	bl	80064e0 <xTaskRemoveFromEventList>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b44:	f000 fda8 	bl	8006698 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b48:	7bbb      	ldrb	r3, [r7, #14]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	dce9      	bgt.n	8005b2c <prvUnlockQueue+0x60>
 8005b58:	e000      	b.n	8005b5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	22ff      	movs	r2, #255	; 0xff
 8005b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005b64:	f001 fc06 	bl	8007374 <vPortExitCritical>
}
 8005b68:	bf00      	nop
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b78:	f001 fbcc 	bl	8007314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d102      	bne.n	8005b8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b84:	2301      	movs	r3, #1
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	e001      	b.n	8005b8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b8e:	f001 fbf1 	bl	8007374 <vPortExitCritical>

	return xReturn;
 8005b92:	68fb      	ldr	r3, [r7, #12]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ba4:	f001 fbb6 	bl	8007314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d102      	bne.n	8005bba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	60fb      	str	r3, [r7, #12]
 8005bb8:	e001      	b.n	8005bbe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bbe:	f001 fbd9 	bl	8007374 <vPortExitCritical>

	return xReturn;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	e014      	b.n	8005c06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005bdc:	4a0f      	ldr	r2, [pc, #60]	; (8005c1c <vQueueAddToRegistry+0x50>)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10b      	bne.n	8005c00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005be8:	490c      	ldr	r1, [pc, #48]	; (8005c1c <vQueueAddToRegistry+0x50>)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	683a      	ldr	r2, [r7, #0]
 8005bee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005bf2:	4a0a      	ldr	r2, [pc, #40]	; (8005c1c <vQueueAddToRegistry+0x50>)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	4413      	add	r3, r2
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005bfe:	e006      	b.n	8005c0e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	3301      	adds	r3, #1
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b07      	cmp	r3, #7
 8005c0a:	d9e7      	bls.n	8005bdc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c0c:	bf00      	nop
 8005c0e:	bf00      	nop
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	20000e2c 	.word	0x20000e2c

08005c20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c30:	f001 fb70 	bl	8007314 <vPortEnterCritical>
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c3a:	b25b      	sxtb	r3, r3
 8005c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c40:	d103      	bne.n	8005c4a <vQueueWaitForMessageRestricted+0x2a>
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c50:	b25b      	sxtb	r3, r3
 8005c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c56:	d103      	bne.n	8005c60 <vQueueWaitForMessageRestricted+0x40>
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c60:	f001 fb88 	bl	8007374 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d106      	bne.n	8005c7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	3324      	adds	r3, #36	; 0x24
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	68b9      	ldr	r1, [r7, #8]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 fc07 	bl	8006488 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c7a:	6978      	ldr	r0, [r7, #20]
 8005c7c:	f7ff ff26 	bl	8005acc <prvUnlockQueue>
	}
 8005c80:	bf00      	nop
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08e      	sub	sp, #56	; 0x38
 8005c8c:	af04      	add	r7, sp, #16
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10a      	bne.n	8005cb2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca0:	f383 8811 	msr	BASEPRI, r3
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	623b      	str	r3, [r7, #32]
}
 8005cae:	bf00      	nop
 8005cb0:	e7fe      	b.n	8005cb0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10a      	bne.n	8005cce <xTaskCreateStatic+0x46>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	61fb      	str	r3, [r7, #28]
}
 8005cca:	bf00      	nop
 8005ccc:	e7fe      	b.n	8005ccc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005cce:	235c      	movs	r3, #92	; 0x5c
 8005cd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	2b5c      	cmp	r3, #92	; 0x5c
 8005cd6:	d00a      	beq.n	8005cee <xTaskCreateStatic+0x66>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	61bb      	str	r3, [r7, #24]
}
 8005cea:	bf00      	nop
 8005cec:	e7fe      	b.n	8005cec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005cee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d01e      	beq.n	8005d34 <xTaskCreateStatic+0xac>
 8005cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d01b      	beq.n	8005d34 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	2202      	movs	r2, #2
 8005d0a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d0e:	2300      	movs	r3, #0
 8005d10:	9303      	str	r3, [sp, #12]
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	9302      	str	r3, [sp, #8]
 8005d16:	f107 0314 	add.w	r3, r7, #20
 8005d1a:	9301      	str	r3, [sp, #4]
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	68b9      	ldr	r1, [r7, #8]
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 f850 	bl	8005dcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d2e:	f000 f8dd 	bl	8005eec <prvAddNewTaskToReadyList>
 8005d32:	e001      	b.n	8005d38 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005d34:	2300      	movs	r3, #0
 8005d36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d38:	697b      	ldr	r3, [r7, #20]
	}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3728      	adds	r7, #40	; 0x28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b08c      	sub	sp, #48	; 0x30
 8005d46:	af04      	add	r7, sp, #16
 8005d48:	60f8      	str	r0, [r7, #12]
 8005d4a:	60b9      	str	r1, [r7, #8]
 8005d4c:	603b      	str	r3, [r7, #0]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d52:	88fb      	ldrh	r3, [r7, #6]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4618      	mov	r0, r3
 8005d58:	f001 fbfe 	bl	8007558 <pvPortMalloc>
 8005d5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00e      	beq.n	8005d82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d64:	205c      	movs	r0, #92	; 0x5c
 8005d66:	f001 fbf7 	bl	8007558 <pvPortMalloc>
 8005d6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	631a      	str	r2, [r3, #48]	; 0x30
 8005d78:	e005      	b.n	8005d86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d7a:	6978      	ldr	r0, [r7, #20]
 8005d7c:	f001 fcb8 	bl	80076f0 <vPortFree>
 8005d80:	e001      	b.n	8005d86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d82:	2300      	movs	r3, #0
 8005d84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d017      	beq.n	8005dbc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d94:	88fa      	ldrh	r2, [r7, #6]
 8005d96:	2300      	movs	r3, #0
 8005d98:	9303      	str	r3, [sp, #12]
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	9302      	str	r3, [sp, #8]
 8005d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da0:	9301      	str	r3, [sp, #4]
 8005da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	68b9      	ldr	r1, [r7, #8]
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 f80e 	bl	8005dcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005db0:	69f8      	ldr	r0, [r7, #28]
 8005db2:	f000 f89b 	bl	8005eec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005db6:	2301      	movs	r3, #1
 8005db8:	61bb      	str	r3, [r7, #24]
 8005dba:	e002      	b.n	8005dc2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005dc2:	69bb      	ldr	r3, [r7, #24]
	}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3720      	adds	r7, #32
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
 8005dd8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	461a      	mov	r2, r3
 8005de4:	21a5      	movs	r1, #165	; 0xa5
 8005de6:	f002 fd98 	bl	800891a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005df4:	3b01      	subs	r3, #1
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	f023 0307 	bic.w	r3, r3, #7
 8005e02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	617b      	str	r3, [r7, #20]
}
 8005e20:	bf00      	nop
 8005e22:	e7fe      	b.n	8005e22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d01f      	beq.n	8005e6a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61fb      	str	r3, [r7, #28]
 8005e2e:	e012      	b.n	8005e56 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	4413      	add	r3, r2
 8005e36:	7819      	ldrb	r1, [r3, #0]
 8005e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	3334      	adds	r3, #52	; 0x34
 8005e40:	460a      	mov	r2, r1
 8005e42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	4413      	add	r3, r2
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d006      	beq.n	8005e5e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	3301      	adds	r3, #1
 8005e54:	61fb      	str	r3, [r7, #28]
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	2b0f      	cmp	r3, #15
 8005e5a:	d9e9      	bls.n	8005e30 <prvInitialiseNewTask+0x64>
 8005e5c:	e000      	b.n	8005e60 <prvInitialiseNewTask+0x94>
			{
				break;
 8005e5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e68:	e003      	b.n	8005e72 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e74:	2b37      	cmp	r3, #55	; 0x37
 8005e76:	d901      	bls.n	8005e7c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e78:	2337      	movs	r3, #55	; 0x37
 8005e7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	3304      	adds	r3, #4
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7ff f93e 	bl	8005114 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9a:	3318      	adds	r3, #24
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7ff f939 	bl	8005114 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ea6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eaa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eb6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eba:	2200      	movs	r2, #0
 8005ebc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	68f9      	ldr	r1, [r7, #12]
 8005eca:	69b8      	ldr	r0, [r7, #24]
 8005ecc:	f001 f8f4 	bl	80070b8 <pxPortInitialiseStack>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ee0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ee2:	bf00      	nop
 8005ee4:	3720      	adds	r7, #32
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ef4:	f001 fa0e 	bl	8007314 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ef8:	4b2d      	ldr	r3, [pc, #180]	; (8005fb0 <prvAddNewTaskToReadyList+0xc4>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3301      	adds	r3, #1
 8005efe:	4a2c      	ldr	r2, [pc, #176]	; (8005fb0 <prvAddNewTaskToReadyList+0xc4>)
 8005f00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f02:	4b2c      	ldr	r3, [pc, #176]	; (8005fb4 <prvAddNewTaskToReadyList+0xc8>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d109      	bne.n	8005f1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f0a:	4a2a      	ldr	r2, [pc, #168]	; (8005fb4 <prvAddNewTaskToReadyList+0xc8>)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f10:	4b27      	ldr	r3, [pc, #156]	; (8005fb0 <prvAddNewTaskToReadyList+0xc4>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d110      	bne.n	8005f3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f18:	f000 fbe2 	bl	80066e0 <prvInitialiseTaskLists>
 8005f1c:	e00d      	b.n	8005f3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f1e:	4b26      	ldr	r3, [pc, #152]	; (8005fb8 <prvAddNewTaskToReadyList+0xcc>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d109      	bne.n	8005f3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f26:	4b23      	ldr	r3, [pc, #140]	; (8005fb4 <prvAddNewTaskToReadyList+0xc8>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d802      	bhi.n	8005f3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f34:	4a1f      	ldr	r2, [pc, #124]	; (8005fb4 <prvAddNewTaskToReadyList+0xc8>)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f3a:	4b20      	ldr	r3, [pc, #128]	; (8005fbc <prvAddNewTaskToReadyList+0xd0>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	4a1e      	ldr	r2, [pc, #120]	; (8005fbc <prvAddNewTaskToReadyList+0xd0>)
 8005f42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f44:	4b1d      	ldr	r3, [pc, #116]	; (8005fbc <prvAddNewTaskToReadyList+0xd0>)
 8005f46:	681a      	ldr	r2, [r3, #0]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f50:	4b1b      	ldr	r3, [pc, #108]	; (8005fc0 <prvAddNewTaskToReadyList+0xd4>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d903      	bls.n	8005f60 <prvAddNewTaskToReadyList+0x74>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	4a18      	ldr	r2, [pc, #96]	; (8005fc0 <prvAddNewTaskToReadyList+0xd4>)
 8005f5e:	6013      	str	r3, [r2, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f64:	4613      	mov	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4a15      	ldr	r2, [pc, #84]	; (8005fc4 <prvAddNewTaskToReadyList+0xd8>)
 8005f6e:	441a      	add	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	3304      	adds	r3, #4
 8005f74:	4619      	mov	r1, r3
 8005f76:	4610      	mov	r0, r2
 8005f78:	f7ff f8d9 	bl	800512e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f7c:	f001 f9fa 	bl	8007374 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f80:	4b0d      	ldr	r3, [pc, #52]	; (8005fb8 <prvAddNewTaskToReadyList+0xcc>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00e      	beq.n	8005fa6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f88:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <prvAddNewTaskToReadyList+0xc8>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d207      	bcs.n	8005fa6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f96:	4b0c      	ldr	r3, [pc, #48]	; (8005fc8 <prvAddNewTaskToReadyList+0xdc>)
 8005f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fa6:	bf00      	nop
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	20001340 	.word	0x20001340
 8005fb4:	20000e6c 	.word	0x20000e6c
 8005fb8:	2000134c 	.word	0x2000134c
 8005fbc:	2000135c 	.word	0x2000135c
 8005fc0:	20001348 	.word	0x20001348
 8005fc4:	20000e70 	.word	0x20000e70
 8005fc8:	e000ed04 	.word	0xe000ed04

08005fcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08a      	sub	sp, #40	; 0x28
 8005fd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005fda:	463a      	mov	r2, r7
 8005fdc:	1d39      	adds	r1, r7, #4
 8005fde:	f107 0308 	add.w	r3, r7, #8
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7ff f842 	bl	800506c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005fe8:	6839      	ldr	r1, [r7, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	9202      	str	r2, [sp, #8]
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	460a      	mov	r2, r1
 8005ffa:	4921      	ldr	r1, [pc, #132]	; (8006080 <vTaskStartScheduler+0xb4>)
 8005ffc:	4821      	ldr	r0, [pc, #132]	; (8006084 <vTaskStartScheduler+0xb8>)
 8005ffe:	f7ff fe43 	bl	8005c88 <xTaskCreateStatic>
 8006002:	4603      	mov	r3, r0
 8006004:	4a20      	ldr	r2, [pc, #128]	; (8006088 <vTaskStartScheduler+0xbc>)
 8006006:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006008:	4b1f      	ldr	r3, [pc, #124]	; (8006088 <vTaskStartScheduler+0xbc>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006010:	2301      	movs	r3, #1
 8006012:	617b      	str	r3, [r7, #20]
 8006014:	e001      	b.n	800601a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006016:	2300      	movs	r3, #0
 8006018:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d102      	bne.n	8006026 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006020:	f000 fcfc 	bl	8006a1c <xTimerCreateTimerTask>
 8006024:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d116      	bne.n	800605a <vTaskStartScheduler+0x8e>
	__asm volatile
 800602c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	613b      	str	r3, [r7, #16]
}
 800603e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006040:	4b12      	ldr	r3, [pc, #72]	; (800608c <vTaskStartScheduler+0xc0>)
 8006042:	f04f 32ff 	mov.w	r2, #4294967295
 8006046:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006048:	4b11      	ldr	r3, [pc, #68]	; (8006090 <vTaskStartScheduler+0xc4>)
 800604a:	2201      	movs	r2, #1
 800604c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800604e:	4b11      	ldr	r3, [pc, #68]	; (8006094 <vTaskStartScheduler+0xc8>)
 8006050:	2200      	movs	r2, #0
 8006052:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006054:	f001 f8bc 	bl	80071d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006058:	e00e      	b.n	8006078 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006060:	d10a      	bne.n	8006078 <vTaskStartScheduler+0xac>
	__asm volatile
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	60fb      	str	r3, [r7, #12]
}
 8006074:	bf00      	nop
 8006076:	e7fe      	b.n	8006076 <vTaskStartScheduler+0xaa>
}
 8006078:	bf00      	nop
 800607a:	3718      	adds	r7, #24
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	0800c1e4 	.word	0x0800c1e4
 8006084:	080066b1 	.word	0x080066b1
 8006088:	20001364 	.word	0x20001364
 800608c:	20001360 	.word	0x20001360
 8006090:	2000134c 	.word	0x2000134c
 8006094:	20001344 	.word	0x20001344

08006098 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006098:	b480      	push	{r7}
 800609a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800609c:	4b04      	ldr	r3, [pc, #16]	; (80060b0 <vTaskSuspendAll+0x18>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3301      	adds	r3, #1
 80060a2:	4a03      	ldr	r2, [pc, #12]	; (80060b0 <vTaskSuspendAll+0x18>)
 80060a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80060a6:	bf00      	nop
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	20001368 	.word	0x20001368

080060b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060be:	2300      	movs	r3, #0
 80060c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060c2:	4b42      	ldr	r3, [pc, #264]	; (80061cc <xTaskResumeAll+0x118>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10a      	bne.n	80060e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80060ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ce:	f383 8811 	msr	BASEPRI, r3
 80060d2:	f3bf 8f6f 	isb	sy
 80060d6:	f3bf 8f4f 	dsb	sy
 80060da:	603b      	str	r3, [r7, #0]
}
 80060dc:	bf00      	nop
 80060de:	e7fe      	b.n	80060de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060e0:	f001 f918 	bl	8007314 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060e4:	4b39      	ldr	r3, [pc, #228]	; (80061cc <xTaskResumeAll+0x118>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3b01      	subs	r3, #1
 80060ea:	4a38      	ldr	r2, [pc, #224]	; (80061cc <xTaskResumeAll+0x118>)
 80060ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060ee:	4b37      	ldr	r3, [pc, #220]	; (80061cc <xTaskResumeAll+0x118>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d162      	bne.n	80061bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060f6:	4b36      	ldr	r3, [pc, #216]	; (80061d0 <xTaskResumeAll+0x11c>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d05e      	beq.n	80061bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060fe:	e02f      	b.n	8006160 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006100:	4b34      	ldr	r3, [pc, #208]	; (80061d4 <xTaskResumeAll+0x120>)
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	3318      	adds	r3, #24
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff f86b 	bl	80051e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	3304      	adds	r3, #4
 8006116:	4618      	mov	r0, r3
 8006118:	f7ff f866 	bl	80051e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006120:	4b2d      	ldr	r3, [pc, #180]	; (80061d8 <xTaskResumeAll+0x124>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	429a      	cmp	r2, r3
 8006126:	d903      	bls.n	8006130 <xTaskResumeAll+0x7c>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612c:	4a2a      	ldr	r2, [pc, #168]	; (80061d8 <xTaskResumeAll+0x124>)
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4a27      	ldr	r2, [pc, #156]	; (80061dc <xTaskResumeAll+0x128>)
 800613e:	441a      	add	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3304      	adds	r3, #4
 8006144:	4619      	mov	r1, r3
 8006146:	4610      	mov	r0, r2
 8006148:	f7fe fff1 	bl	800512e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006150:	4b23      	ldr	r3, [pc, #140]	; (80061e0 <xTaskResumeAll+0x12c>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006156:	429a      	cmp	r2, r3
 8006158:	d302      	bcc.n	8006160 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800615a:	4b22      	ldr	r3, [pc, #136]	; (80061e4 <xTaskResumeAll+0x130>)
 800615c:	2201      	movs	r2, #1
 800615e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006160:	4b1c      	ldr	r3, [pc, #112]	; (80061d4 <xTaskResumeAll+0x120>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1cb      	bne.n	8006100 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800616e:	f000 fb55 	bl	800681c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006172:	4b1d      	ldr	r3, [pc, #116]	; (80061e8 <xTaskResumeAll+0x134>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d010      	beq.n	80061a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800617e:	f000 f847 	bl	8006210 <xTaskIncrementTick>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006188:	4b16      	ldr	r3, [pc, #88]	; (80061e4 <xTaskResumeAll+0x130>)
 800618a:	2201      	movs	r2, #1
 800618c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	3b01      	subs	r3, #1
 8006192:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1f1      	bne.n	800617e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800619a:	4b13      	ldr	r3, [pc, #76]	; (80061e8 <xTaskResumeAll+0x134>)
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80061a0:	4b10      	ldr	r3, [pc, #64]	; (80061e4 <xTaskResumeAll+0x130>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d009      	beq.n	80061bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80061a8:	2301      	movs	r3, #1
 80061aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80061ac:	4b0f      	ldr	r3, [pc, #60]	; (80061ec <xTaskResumeAll+0x138>)
 80061ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061bc:	f001 f8da 	bl	8007374 <vPortExitCritical>

	return xAlreadyYielded;
 80061c0:	68bb      	ldr	r3, [r7, #8]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	20001368 	.word	0x20001368
 80061d0:	20001340 	.word	0x20001340
 80061d4:	20001300 	.word	0x20001300
 80061d8:	20001348 	.word	0x20001348
 80061dc:	20000e70 	.word	0x20000e70
 80061e0:	20000e6c 	.word	0x20000e6c
 80061e4:	20001354 	.word	0x20001354
 80061e8:	20001350 	.word	0x20001350
 80061ec:	e000ed04 	.word	0xe000ed04

080061f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80061f6:	4b05      	ldr	r3, [pc, #20]	; (800620c <xTaskGetTickCount+0x1c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80061fc:	687b      	ldr	r3, [r7, #4]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	20001344 	.word	0x20001344

08006210 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006216:	2300      	movs	r3, #0
 8006218:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800621a:	4b4f      	ldr	r3, [pc, #316]	; (8006358 <xTaskIncrementTick+0x148>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	f040 808f 	bne.w	8006342 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006224:	4b4d      	ldr	r3, [pc, #308]	; (800635c <xTaskIncrementTick+0x14c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3301      	adds	r3, #1
 800622a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800622c:	4a4b      	ldr	r2, [pc, #300]	; (800635c <xTaskIncrementTick+0x14c>)
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d120      	bne.n	800627a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006238:	4b49      	ldr	r3, [pc, #292]	; (8006360 <xTaskIncrementTick+0x150>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <xTaskIncrementTick+0x48>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	603b      	str	r3, [r7, #0]
}
 8006254:	bf00      	nop
 8006256:	e7fe      	b.n	8006256 <xTaskIncrementTick+0x46>
 8006258:	4b41      	ldr	r3, [pc, #260]	; (8006360 <xTaskIncrementTick+0x150>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	4b41      	ldr	r3, [pc, #260]	; (8006364 <xTaskIncrementTick+0x154>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a3f      	ldr	r2, [pc, #252]	; (8006360 <xTaskIncrementTick+0x150>)
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	4a3f      	ldr	r2, [pc, #252]	; (8006364 <xTaskIncrementTick+0x154>)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	4b3e      	ldr	r3, [pc, #248]	; (8006368 <xTaskIncrementTick+0x158>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3301      	adds	r3, #1
 8006272:	4a3d      	ldr	r2, [pc, #244]	; (8006368 <xTaskIncrementTick+0x158>)
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	f000 fad1 	bl	800681c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800627a:	4b3c      	ldr	r3, [pc, #240]	; (800636c <xTaskIncrementTick+0x15c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	429a      	cmp	r2, r3
 8006282:	d349      	bcc.n	8006318 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006284:	4b36      	ldr	r3, [pc, #216]	; (8006360 <xTaskIncrementTick+0x150>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d104      	bne.n	8006298 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800628e:	4b37      	ldr	r3, [pc, #220]	; (800636c <xTaskIncrementTick+0x15c>)
 8006290:	f04f 32ff 	mov.w	r2, #4294967295
 8006294:	601a      	str	r2, [r3, #0]
					break;
 8006296:	e03f      	b.n	8006318 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006298:	4b31      	ldr	r3, [pc, #196]	; (8006360 <xTaskIncrementTick+0x150>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d203      	bcs.n	80062b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062b0:	4a2e      	ldr	r2, [pc, #184]	; (800636c <xTaskIncrementTick+0x15c>)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80062b6:	e02f      	b.n	8006318 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	3304      	adds	r3, #4
 80062bc:	4618      	mov	r0, r3
 80062be:	f7fe ff93 	bl	80051e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d004      	beq.n	80062d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	3318      	adds	r3, #24
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fe ff8a 	bl	80051e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d8:	4b25      	ldr	r3, [pc, #148]	; (8006370 <xTaskIncrementTick+0x160>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d903      	bls.n	80062e8 <xTaskIncrementTick+0xd8>
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	4a22      	ldr	r2, [pc, #136]	; (8006370 <xTaskIncrementTick+0x160>)
 80062e6:	6013      	str	r3, [r2, #0]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ec:	4613      	mov	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4a1f      	ldr	r2, [pc, #124]	; (8006374 <xTaskIncrementTick+0x164>)
 80062f6:	441a      	add	r2, r3
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	3304      	adds	r3, #4
 80062fc:	4619      	mov	r1, r3
 80062fe:	4610      	mov	r0, r2
 8006300:	f7fe ff15 	bl	800512e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006308:	4b1b      	ldr	r3, [pc, #108]	; (8006378 <xTaskIncrementTick+0x168>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630e:	429a      	cmp	r2, r3
 8006310:	d3b8      	bcc.n	8006284 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006312:	2301      	movs	r3, #1
 8006314:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006316:	e7b5      	b.n	8006284 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006318:	4b17      	ldr	r3, [pc, #92]	; (8006378 <xTaskIncrementTick+0x168>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800631e:	4915      	ldr	r1, [pc, #84]	; (8006374 <xTaskIncrementTick+0x164>)
 8006320:	4613      	mov	r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	440b      	add	r3, r1
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d901      	bls.n	8006334 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006330:	2301      	movs	r3, #1
 8006332:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006334:	4b11      	ldr	r3, [pc, #68]	; (800637c <xTaskIncrementTick+0x16c>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d007      	beq.n	800634c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800633c:	2301      	movs	r3, #1
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	e004      	b.n	800634c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006342:	4b0f      	ldr	r3, [pc, #60]	; (8006380 <xTaskIncrementTick+0x170>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3301      	adds	r3, #1
 8006348:	4a0d      	ldr	r2, [pc, #52]	; (8006380 <xTaskIncrementTick+0x170>)
 800634a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800634c:	697b      	ldr	r3, [r7, #20]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	20001368 	.word	0x20001368
 800635c:	20001344 	.word	0x20001344
 8006360:	200012f8 	.word	0x200012f8
 8006364:	200012fc 	.word	0x200012fc
 8006368:	20001358 	.word	0x20001358
 800636c:	20001360 	.word	0x20001360
 8006370:	20001348 	.word	0x20001348
 8006374:	20000e70 	.word	0x20000e70
 8006378:	20000e6c 	.word	0x20000e6c
 800637c:	20001354 	.word	0x20001354
 8006380:	20001350 	.word	0x20001350

08006384 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800638a:	4b28      	ldr	r3, [pc, #160]	; (800642c <vTaskSwitchContext+0xa8>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006392:	4b27      	ldr	r3, [pc, #156]	; (8006430 <vTaskSwitchContext+0xac>)
 8006394:	2201      	movs	r2, #1
 8006396:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006398:	e041      	b.n	800641e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800639a:	4b25      	ldr	r3, [pc, #148]	; (8006430 <vTaskSwitchContext+0xac>)
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063a0:	4b24      	ldr	r3, [pc, #144]	; (8006434 <vTaskSwitchContext+0xb0>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	e010      	b.n	80063ca <vTaskSwitchContext+0x46>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10a      	bne.n	80063c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	607b      	str	r3, [r7, #4]
}
 80063c0:	bf00      	nop
 80063c2:	e7fe      	b.n	80063c2 <vTaskSwitchContext+0x3e>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	491b      	ldr	r1, [pc, #108]	; (8006438 <vTaskSwitchContext+0xb4>)
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	4613      	mov	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	440b      	add	r3, r1
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d0e4      	beq.n	80063a8 <vTaskSwitchContext+0x24>
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	4613      	mov	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4a13      	ldr	r2, [pc, #76]	; (8006438 <vTaskSwitchContext+0xb4>)
 80063ea:	4413      	add	r3, r2
 80063ec:	60bb      	str	r3, [r7, #8]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	605a      	str	r2, [r3, #4]
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	3308      	adds	r3, #8
 8006400:	429a      	cmp	r2, r3
 8006402:	d104      	bne.n	800640e <vTaskSwitchContext+0x8a>
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	605a      	str	r2, [r3, #4]
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	4a09      	ldr	r2, [pc, #36]	; (800643c <vTaskSwitchContext+0xb8>)
 8006416:	6013      	str	r3, [r2, #0]
 8006418:	4a06      	ldr	r2, [pc, #24]	; (8006434 <vTaskSwitchContext+0xb0>)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6013      	str	r3, [r2, #0]
}
 800641e:	bf00      	nop
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	20001368 	.word	0x20001368
 8006430:	20001354 	.word	0x20001354
 8006434:	20001348 	.word	0x20001348
 8006438:	20000e70 	.word	0x20000e70
 800643c:	20000e6c 	.word	0x20000e6c

08006440 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10a      	bne.n	8006466 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	60fb      	str	r3, [r7, #12]
}
 8006462:	bf00      	nop
 8006464:	e7fe      	b.n	8006464 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006466:	4b07      	ldr	r3, [pc, #28]	; (8006484 <vTaskPlaceOnEventList+0x44>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3318      	adds	r3, #24
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7fe fe81 	bl	8005176 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006474:	2101      	movs	r1, #1
 8006476:	6838      	ldr	r0, [r7, #0]
 8006478:	f000 fa7c 	bl	8006974 <prvAddCurrentTaskToDelayedList>
}
 800647c:	bf00      	nop
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	20000e6c 	.word	0x20000e6c

08006488 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10a      	bne.n	80064b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	617b      	str	r3, [r7, #20]
}
 80064ac:	bf00      	nop
 80064ae:	e7fe      	b.n	80064ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064b0:	4b0a      	ldr	r3, [pc, #40]	; (80064dc <vTaskPlaceOnEventListRestricted+0x54>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3318      	adds	r3, #24
 80064b6:	4619      	mov	r1, r3
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f7fe fe38 	bl	800512e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d002      	beq.n	80064ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80064c4:	f04f 33ff 	mov.w	r3, #4294967295
 80064c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80064ca:	6879      	ldr	r1, [r7, #4]
 80064cc:	68b8      	ldr	r0, [r7, #8]
 80064ce:	f000 fa51 	bl	8006974 <prvAddCurrentTaskToDelayedList>
	}
 80064d2:	bf00      	nop
 80064d4:	3718      	adds	r7, #24
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	20000e6c 	.word	0x20000e6c

080064e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10a      	bne.n	800650c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80064f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	60fb      	str	r3, [r7, #12]
}
 8006508:	bf00      	nop
 800650a:	e7fe      	b.n	800650a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	3318      	adds	r3, #24
 8006510:	4618      	mov	r0, r3
 8006512:	f7fe fe69 	bl	80051e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006516:	4b1e      	ldr	r3, [pc, #120]	; (8006590 <xTaskRemoveFromEventList+0xb0>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d11d      	bne.n	800655a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	3304      	adds	r3, #4
 8006522:	4618      	mov	r0, r3
 8006524:	f7fe fe60 	bl	80051e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652c:	4b19      	ldr	r3, [pc, #100]	; (8006594 <xTaskRemoveFromEventList+0xb4>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	429a      	cmp	r2, r3
 8006532:	d903      	bls.n	800653c <xTaskRemoveFromEventList+0x5c>
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006538:	4a16      	ldr	r2, [pc, #88]	; (8006594 <xTaskRemoveFromEventList+0xb4>)
 800653a:	6013      	str	r3, [r2, #0]
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006540:	4613      	mov	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4a13      	ldr	r2, [pc, #76]	; (8006598 <xTaskRemoveFromEventList+0xb8>)
 800654a:	441a      	add	r2, r3
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	3304      	adds	r3, #4
 8006550:	4619      	mov	r1, r3
 8006552:	4610      	mov	r0, r2
 8006554:	f7fe fdeb 	bl	800512e <vListInsertEnd>
 8006558:	e005      	b.n	8006566 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	3318      	adds	r3, #24
 800655e:	4619      	mov	r1, r3
 8006560:	480e      	ldr	r0, [pc, #56]	; (800659c <xTaskRemoveFromEventList+0xbc>)
 8006562:	f7fe fde4 	bl	800512e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656a:	4b0d      	ldr	r3, [pc, #52]	; (80065a0 <xTaskRemoveFromEventList+0xc0>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006570:	429a      	cmp	r2, r3
 8006572:	d905      	bls.n	8006580 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006574:	2301      	movs	r3, #1
 8006576:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006578:	4b0a      	ldr	r3, [pc, #40]	; (80065a4 <xTaskRemoveFromEventList+0xc4>)
 800657a:	2201      	movs	r2, #1
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	e001      	b.n	8006584 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006580:	2300      	movs	r3, #0
 8006582:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006584:	697b      	ldr	r3, [r7, #20]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	20001368 	.word	0x20001368
 8006594:	20001348 	.word	0x20001348
 8006598:	20000e70 	.word	0x20000e70
 800659c:	20001300 	.word	0x20001300
 80065a0:	20000e6c 	.word	0x20000e6c
 80065a4:	20001354 	.word	0x20001354

080065a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80065b0:	4b06      	ldr	r3, [pc, #24]	; (80065cc <vTaskInternalSetTimeOutState+0x24>)
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80065b8:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <vTaskInternalSetTimeOutState+0x28>)
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	605a      	str	r2, [r3, #4]
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	20001358 	.word	0x20001358
 80065d0:	20001344 	.word	0x20001344

080065d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10a      	bne.n	80065fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80065e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e8:	f383 8811 	msr	BASEPRI, r3
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	613b      	str	r3, [r7, #16]
}
 80065f6:	bf00      	nop
 80065f8:	e7fe      	b.n	80065f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10a      	bne.n	8006616 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	60fb      	str	r3, [r7, #12]
}
 8006612:	bf00      	nop
 8006614:	e7fe      	b.n	8006614 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006616:	f000 fe7d 	bl	8007314 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800661a:	4b1d      	ldr	r3, [pc, #116]	; (8006690 <xTaskCheckForTimeOut+0xbc>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006632:	d102      	bne.n	800663a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006634:	2300      	movs	r3, #0
 8006636:	61fb      	str	r3, [r7, #28]
 8006638:	e023      	b.n	8006682 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	4b15      	ldr	r3, [pc, #84]	; (8006694 <xTaskCheckForTimeOut+0xc0>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	429a      	cmp	r2, r3
 8006644:	d007      	beq.n	8006656 <xTaskCheckForTimeOut+0x82>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	429a      	cmp	r2, r3
 800664e:	d302      	bcc.n	8006656 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006650:	2301      	movs	r3, #1
 8006652:	61fb      	str	r3, [r7, #28]
 8006654:	e015      	b.n	8006682 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	429a      	cmp	r2, r3
 800665e:	d20b      	bcs.n	8006678 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	1ad2      	subs	r2, r2, r3
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7ff ff9b 	bl	80065a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006672:	2300      	movs	r3, #0
 8006674:	61fb      	str	r3, [r7, #28]
 8006676:	e004      	b.n	8006682 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2200      	movs	r2, #0
 800667c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800667e:	2301      	movs	r3, #1
 8006680:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006682:	f000 fe77 	bl	8007374 <vPortExitCritical>

	return xReturn;
 8006686:	69fb      	ldr	r3, [r7, #28]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3720      	adds	r7, #32
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	20001344 	.word	0x20001344
 8006694:	20001358 	.word	0x20001358

08006698 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006698:	b480      	push	{r7}
 800669a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800669c:	4b03      	ldr	r3, [pc, #12]	; (80066ac <vTaskMissedYield+0x14>)
 800669e:	2201      	movs	r2, #1
 80066a0:	601a      	str	r2, [r3, #0]
}
 80066a2:	bf00      	nop
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	20001354 	.word	0x20001354

080066b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066b8:	f000 f852 	bl	8006760 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066bc:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <prvIdleTask+0x28>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d9f9      	bls.n	80066b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80066c4:	4b05      	ldr	r3, [pc, #20]	; (80066dc <prvIdleTask+0x2c>)
 80066c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066d4:	e7f0      	b.n	80066b8 <prvIdleTask+0x8>
 80066d6:	bf00      	nop
 80066d8:	20000e70 	.word	0x20000e70
 80066dc:	e000ed04 	.word	0xe000ed04

080066e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066e6:	2300      	movs	r3, #0
 80066e8:	607b      	str	r3, [r7, #4]
 80066ea:	e00c      	b.n	8006706 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	4613      	mov	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	4413      	add	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4a12      	ldr	r2, [pc, #72]	; (8006740 <prvInitialiseTaskLists+0x60>)
 80066f8:	4413      	add	r3, r2
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7fe fcea 	bl	80050d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3301      	adds	r3, #1
 8006704:	607b      	str	r3, [r7, #4]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b37      	cmp	r3, #55	; 0x37
 800670a:	d9ef      	bls.n	80066ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800670c:	480d      	ldr	r0, [pc, #52]	; (8006744 <prvInitialiseTaskLists+0x64>)
 800670e:	f7fe fce1 	bl	80050d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006712:	480d      	ldr	r0, [pc, #52]	; (8006748 <prvInitialiseTaskLists+0x68>)
 8006714:	f7fe fcde 	bl	80050d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006718:	480c      	ldr	r0, [pc, #48]	; (800674c <prvInitialiseTaskLists+0x6c>)
 800671a:	f7fe fcdb 	bl	80050d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800671e:	480c      	ldr	r0, [pc, #48]	; (8006750 <prvInitialiseTaskLists+0x70>)
 8006720:	f7fe fcd8 	bl	80050d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006724:	480b      	ldr	r0, [pc, #44]	; (8006754 <prvInitialiseTaskLists+0x74>)
 8006726:	f7fe fcd5 	bl	80050d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800672a:	4b0b      	ldr	r3, [pc, #44]	; (8006758 <prvInitialiseTaskLists+0x78>)
 800672c:	4a05      	ldr	r2, [pc, #20]	; (8006744 <prvInitialiseTaskLists+0x64>)
 800672e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006730:	4b0a      	ldr	r3, [pc, #40]	; (800675c <prvInitialiseTaskLists+0x7c>)
 8006732:	4a05      	ldr	r2, [pc, #20]	; (8006748 <prvInitialiseTaskLists+0x68>)
 8006734:	601a      	str	r2, [r3, #0]
}
 8006736:	bf00      	nop
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20000e70 	.word	0x20000e70
 8006744:	200012d0 	.word	0x200012d0
 8006748:	200012e4 	.word	0x200012e4
 800674c:	20001300 	.word	0x20001300
 8006750:	20001314 	.word	0x20001314
 8006754:	2000132c 	.word	0x2000132c
 8006758:	200012f8 	.word	0x200012f8
 800675c:	200012fc 	.word	0x200012fc

08006760 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006766:	e019      	b.n	800679c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006768:	f000 fdd4 	bl	8007314 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800676c:	4b10      	ldr	r3, [pc, #64]	; (80067b0 <prvCheckTasksWaitingTermination+0x50>)
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3304      	adds	r3, #4
 8006778:	4618      	mov	r0, r3
 800677a:	f7fe fd35 	bl	80051e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800677e:	4b0d      	ldr	r3, [pc, #52]	; (80067b4 <prvCheckTasksWaitingTermination+0x54>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3b01      	subs	r3, #1
 8006784:	4a0b      	ldr	r2, [pc, #44]	; (80067b4 <prvCheckTasksWaitingTermination+0x54>)
 8006786:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006788:	4b0b      	ldr	r3, [pc, #44]	; (80067b8 <prvCheckTasksWaitingTermination+0x58>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3b01      	subs	r3, #1
 800678e:	4a0a      	ldr	r2, [pc, #40]	; (80067b8 <prvCheckTasksWaitingTermination+0x58>)
 8006790:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006792:	f000 fdef 	bl	8007374 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f810 	bl	80067bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800679c:	4b06      	ldr	r3, [pc, #24]	; (80067b8 <prvCheckTasksWaitingTermination+0x58>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1e1      	bne.n	8006768 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067a4:	bf00      	nop
 80067a6:	bf00      	nop
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	20001314 	.word	0x20001314
 80067b4:	20001340 	.word	0x20001340
 80067b8:	20001328 	.word	0x20001328

080067bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d108      	bne.n	80067e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 ff8c 	bl	80076f0 <vPortFree>
				vPortFree( pxTCB );
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 ff89 	bl	80076f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80067de:	e018      	b.n	8006812 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d103      	bne.n	80067f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 ff80 	bl	80076f0 <vPortFree>
	}
 80067f0:	e00f      	b.n	8006812 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d00a      	beq.n	8006812 <prvDeleteTCB+0x56>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	60fb      	str	r3, [r7, #12]
}
 800680e:	bf00      	nop
 8006810:	e7fe      	b.n	8006810 <prvDeleteTCB+0x54>
	}
 8006812:	bf00      	nop
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
	...

0800681c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006822:	4b0c      	ldr	r3, [pc, #48]	; (8006854 <prvResetNextTaskUnblockTime+0x38>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d104      	bne.n	8006836 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800682c:	4b0a      	ldr	r3, [pc, #40]	; (8006858 <prvResetNextTaskUnblockTime+0x3c>)
 800682e:	f04f 32ff 	mov.w	r2, #4294967295
 8006832:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006834:	e008      	b.n	8006848 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006836:	4b07      	ldr	r3, [pc, #28]	; (8006854 <prvResetNextTaskUnblockTime+0x38>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	4a04      	ldr	r2, [pc, #16]	; (8006858 <prvResetNextTaskUnblockTime+0x3c>)
 8006846:	6013      	str	r3, [r2, #0]
}
 8006848:	bf00      	nop
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	200012f8 	.word	0x200012f8
 8006858:	20001360 	.word	0x20001360

0800685c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006862:	4b0b      	ldr	r3, [pc, #44]	; (8006890 <xTaskGetSchedulerState+0x34>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d102      	bne.n	8006870 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800686a:	2301      	movs	r3, #1
 800686c:	607b      	str	r3, [r7, #4]
 800686e:	e008      	b.n	8006882 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006870:	4b08      	ldr	r3, [pc, #32]	; (8006894 <xTaskGetSchedulerState+0x38>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d102      	bne.n	800687e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006878:	2302      	movs	r3, #2
 800687a:	607b      	str	r3, [r7, #4]
 800687c:	e001      	b.n	8006882 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800687e:	2300      	movs	r3, #0
 8006880:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006882:	687b      	ldr	r3, [r7, #4]
	}
 8006884:	4618      	mov	r0, r3
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	2000134c 	.word	0x2000134c
 8006894:	20001368 	.word	0x20001368

08006898 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80068a4:	2300      	movs	r3, #0
 80068a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d056      	beq.n	800695c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80068ae:	4b2e      	ldr	r3, [pc, #184]	; (8006968 <xTaskPriorityDisinherit+0xd0>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d00a      	beq.n	80068ce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80068b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	60fb      	str	r3, [r7, #12]
}
 80068ca:	bf00      	nop
 80068cc:	e7fe      	b.n	80068cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10a      	bne.n	80068ec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	60bb      	str	r3, [r7, #8]
}
 80068e8:	bf00      	nop
 80068ea:	e7fe      	b.n	80068ea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068f0:	1e5a      	subs	r2, r3, #1
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068fe:	429a      	cmp	r2, r3
 8006900:	d02c      	beq.n	800695c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006906:	2b00      	cmp	r3, #0
 8006908:	d128      	bne.n	800695c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	3304      	adds	r3, #4
 800690e:	4618      	mov	r0, r3
 8006910:	f7fe fc6a 	bl	80051e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006920:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800692c:	4b0f      	ldr	r3, [pc, #60]	; (800696c <xTaskPriorityDisinherit+0xd4>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	429a      	cmp	r2, r3
 8006932:	d903      	bls.n	800693c <xTaskPriorityDisinherit+0xa4>
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	4a0c      	ldr	r2, [pc, #48]	; (800696c <xTaskPriorityDisinherit+0xd4>)
 800693a:	6013      	str	r3, [r2, #0]
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4a09      	ldr	r2, [pc, #36]	; (8006970 <xTaskPriorityDisinherit+0xd8>)
 800694a:	441a      	add	r2, r3
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	3304      	adds	r3, #4
 8006950:	4619      	mov	r1, r3
 8006952:	4610      	mov	r0, r2
 8006954:	f7fe fbeb 	bl	800512e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006958:	2301      	movs	r3, #1
 800695a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800695c:	697b      	ldr	r3, [r7, #20]
	}
 800695e:	4618      	mov	r0, r3
 8006960:	3718      	adds	r7, #24
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20000e6c 	.word	0x20000e6c
 800696c:	20001348 	.word	0x20001348
 8006970:	20000e70 	.word	0x20000e70

08006974 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800697e:	4b21      	ldr	r3, [pc, #132]	; (8006a04 <prvAddCurrentTaskToDelayedList+0x90>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006984:	4b20      	ldr	r3, [pc, #128]	; (8006a08 <prvAddCurrentTaskToDelayedList+0x94>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3304      	adds	r3, #4
 800698a:	4618      	mov	r0, r3
 800698c:	f7fe fc2c 	bl	80051e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006996:	d10a      	bne.n	80069ae <prvAddCurrentTaskToDelayedList+0x3a>
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d007      	beq.n	80069ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800699e:	4b1a      	ldr	r3, [pc, #104]	; (8006a08 <prvAddCurrentTaskToDelayedList+0x94>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3304      	adds	r3, #4
 80069a4:	4619      	mov	r1, r3
 80069a6:	4819      	ldr	r0, [pc, #100]	; (8006a0c <prvAddCurrentTaskToDelayedList+0x98>)
 80069a8:	f7fe fbc1 	bl	800512e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80069ac:	e026      	b.n	80069fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4413      	add	r3, r2
 80069b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069b6:	4b14      	ldr	r3, [pc, #80]	; (8006a08 <prvAddCurrentTaskToDelayedList+0x94>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d209      	bcs.n	80069da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069c6:	4b12      	ldr	r3, [pc, #72]	; (8006a10 <prvAddCurrentTaskToDelayedList+0x9c>)
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	4b0f      	ldr	r3, [pc, #60]	; (8006a08 <prvAddCurrentTaskToDelayedList+0x94>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3304      	adds	r3, #4
 80069d0:	4619      	mov	r1, r3
 80069d2:	4610      	mov	r0, r2
 80069d4:	f7fe fbcf 	bl	8005176 <vListInsert>
}
 80069d8:	e010      	b.n	80069fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069da:	4b0e      	ldr	r3, [pc, #56]	; (8006a14 <prvAddCurrentTaskToDelayedList+0xa0>)
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	4b0a      	ldr	r3, [pc, #40]	; (8006a08 <prvAddCurrentTaskToDelayedList+0x94>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3304      	adds	r3, #4
 80069e4:	4619      	mov	r1, r3
 80069e6:	4610      	mov	r0, r2
 80069e8:	f7fe fbc5 	bl	8005176 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80069ec:	4b0a      	ldr	r3, [pc, #40]	; (8006a18 <prvAddCurrentTaskToDelayedList+0xa4>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d202      	bcs.n	80069fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80069f6:	4a08      	ldr	r2, [pc, #32]	; (8006a18 <prvAddCurrentTaskToDelayedList+0xa4>)
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	6013      	str	r3, [r2, #0]
}
 80069fc:	bf00      	nop
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	20001344 	.word	0x20001344
 8006a08:	20000e6c 	.word	0x20000e6c
 8006a0c:	2000132c 	.word	0x2000132c
 8006a10:	200012fc 	.word	0x200012fc
 8006a14:	200012f8 	.word	0x200012f8
 8006a18:	20001360 	.word	0x20001360

08006a1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08a      	sub	sp, #40	; 0x28
 8006a20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006a22:	2300      	movs	r3, #0
 8006a24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006a26:	f000 fb07 	bl	8007038 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006a2a:	4b1c      	ldr	r3, [pc, #112]	; (8006a9c <xTimerCreateTimerTask+0x80>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d021      	beq.n	8006a76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006a32:	2300      	movs	r3, #0
 8006a34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006a36:	2300      	movs	r3, #0
 8006a38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006a3a:	1d3a      	adds	r2, r7, #4
 8006a3c:	f107 0108 	add.w	r1, r7, #8
 8006a40:	f107 030c 	add.w	r3, r7, #12
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fe fb2b 	bl	80050a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	9202      	str	r2, [sp, #8]
 8006a52:	9301      	str	r3, [sp, #4]
 8006a54:	2302      	movs	r3, #2
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	2300      	movs	r3, #0
 8006a5a:	460a      	mov	r2, r1
 8006a5c:	4910      	ldr	r1, [pc, #64]	; (8006aa0 <xTimerCreateTimerTask+0x84>)
 8006a5e:	4811      	ldr	r0, [pc, #68]	; (8006aa4 <xTimerCreateTimerTask+0x88>)
 8006a60:	f7ff f912 	bl	8005c88 <xTaskCreateStatic>
 8006a64:	4603      	mov	r3, r0
 8006a66:	4a10      	ldr	r2, [pc, #64]	; (8006aa8 <xTimerCreateTimerTask+0x8c>)
 8006a68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006a6a:	4b0f      	ldr	r3, [pc, #60]	; (8006aa8 <xTimerCreateTimerTask+0x8c>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006a72:	2301      	movs	r3, #1
 8006a74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10a      	bne.n	8006a92 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	613b      	str	r3, [r7, #16]
}
 8006a8e:	bf00      	nop
 8006a90:	e7fe      	b.n	8006a90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006a92:	697b      	ldr	r3, [r7, #20]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3718      	adds	r7, #24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	2000139c 	.word	0x2000139c
 8006aa0:	0800c1ec 	.word	0x0800c1ec
 8006aa4:	08006be1 	.word	0x08006be1
 8006aa8:	200013a0 	.word	0x200013a0

08006aac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b08a      	sub	sp, #40	; 0x28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
 8006ab8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10a      	bne.n	8006ada <xTimerGenericCommand+0x2e>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	623b      	str	r3, [r7, #32]
}
 8006ad6:	bf00      	nop
 8006ad8:	e7fe      	b.n	8006ad8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ada:	4b1a      	ldr	r3, [pc, #104]	; (8006b44 <xTimerGenericCommand+0x98>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d02a      	beq.n	8006b38 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	2b05      	cmp	r3, #5
 8006af2:	dc18      	bgt.n	8006b26 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006af4:	f7ff feb2 	bl	800685c <xTaskGetSchedulerState>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d109      	bne.n	8006b12 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006afe:	4b11      	ldr	r3, [pc, #68]	; (8006b44 <xTimerGenericCommand+0x98>)
 8006b00:	6818      	ldr	r0, [r3, #0]
 8006b02:	f107 0110 	add.w	r1, r7, #16
 8006b06:	2300      	movs	r3, #0
 8006b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b0a:	f7fe fcd5 	bl	80054b8 <xQueueGenericSend>
 8006b0e:	6278      	str	r0, [r7, #36]	; 0x24
 8006b10:	e012      	b.n	8006b38 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b12:	4b0c      	ldr	r3, [pc, #48]	; (8006b44 <xTimerGenericCommand+0x98>)
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	f107 0110 	add.w	r1, r7, #16
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f7fe fccb 	bl	80054b8 <xQueueGenericSend>
 8006b22:	6278      	str	r0, [r7, #36]	; 0x24
 8006b24:	e008      	b.n	8006b38 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b26:	4b07      	ldr	r3, [pc, #28]	; (8006b44 <xTimerGenericCommand+0x98>)
 8006b28:	6818      	ldr	r0, [r3, #0]
 8006b2a:	f107 0110 	add.w	r1, r7, #16
 8006b2e:	2300      	movs	r3, #0
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	f7fe fdbf 	bl	80056b4 <xQueueGenericSendFromISR>
 8006b36:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3728      	adds	r7, #40	; 0x28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	2000139c 	.word	0x2000139c

08006b48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af02      	add	r7, sp, #8
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b52:	4b22      	ldr	r3, [pc, #136]	; (8006bdc <prvProcessExpiredTimer+0x94>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	3304      	adds	r3, #4
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fe fb41 	bl	80051e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b6c:	f003 0304 	and.w	r3, r3, #4
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d022      	beq.n	8006bba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	699a      	ldr	r2, [r3, #24]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	18d1      	adds	r1, r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	6978      	ldr	r0, [r7, #20]
 8006b82:	f000 f8d1 	bl	8006d28 <prvInsertTimerInActiveList>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d01f      	beq.n	8006bcc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	2300      	movs	r3, #0
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	2100      	movs	r1, #0
 8006b96:	6978      	ldr	r0, [r7, #20]
 8006b98:	f7ff ff88 	bl	8006aac <xTimerGenericCommand>
 8006b9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d113      	bne.n	8006bcc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba8:	f383 8811 	msr	BASEPRI, r3
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f3bf 8f4f 	dsb	sy
 8006bb4:	60fb      	str	r3, [r7, #12]
}
 8006bb6:	bf00      	nop
 8006bb8:	e7fe      	b.n	8006bb8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bc0:	f023 0301 	bic.w	r3, r3, #1
 8006bc4:	b2da      	uxtb	r2, r3
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	6978      	ldr	r0, [r7, #20]
 8006bd2:	4798      	blx	r3
}
 8006bd4:	bf00      	nop
 8006bd6:	3718      	adds	r7, #24
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	20001394 	.word	0x20001394

08006be0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006be8:	f107 0308 	add.w	r3, r7, #8
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 f857 	bl	8006ca0 <prvGetNextExpireTime>
 8006bf2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 f803 	bl	8006c04 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006bfe:	f000 f8d5 	bl	8006dac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c02:	e7f1      	b.n	8006be8 <prvTimerTask+0x8>

08006c04 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006c0e:	f7ff fa43 	bl	8006098 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c12:	f107 0308 	add.w	r3, r7, #8
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 f866 	bl	8006ce8 <prvSampleTimeNow>
 8006c1c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d130      	bne.n	8006c86 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10a      	bne.n	8006c40 <prvProcessTimerOrBlockTask+0x3c>
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d806      	bhi.n	8006c40 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006c32:	f7ff fa3f 	bl	80060b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c36:	68f9      	ldr	r1, [r7, #12]
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f7ff ff85 	bl	8006b48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006c3e:	e024      	b.n	8006c8a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d008      	beq.n	8006c58 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c46:	4b13      	ldr	r3, [pc, #76]	; (8006c94 <prvProcessTimerOrBlockTask+0x90>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <prvProcessTimerOrBlockTask+0x50>
 8006c50:	2301      	movs	r3, #1
 8006c52:	e000      	b.n	8006c56 <prvProcessTimerOrBlockTask+0x52>
 8006c54:	2300      	movs	r3, #0
 8006c56:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c58:	4b0f      	ldr	r3, [pc, #60]	; (8006c98 <prvProcessTimerOrBlockTask+0x94>)
 8006c5a:	6818      	ldr	r0, [r3, #0]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	4619      	mov	r1, r3
 8006c66:	f7fe ffdb 	bl	8005c20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c6a:	f7ff fa23 	bl	80060b4 <xTaskResumeAll>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10a      	bne.n	8006c8a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c74:	4b09      	ldr	r3, [pc, #36]	; (8006c9c <prvProcessTimerOrBlockTask+0x98>)
 8006c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	f3bf 8f6f 	isb	sy
}
 8006c84:	e001      	b.n	8006c8a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006c86:	f7ff fa15 	bl	80060b4 <xTaskResumeAll>
}
 8006c8a:	bf00      	nop
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	20001398 	.word	0x20001398
 8006c98:	2000139c 	.word	0x2000139c
 8006c9c:	e000ed04 	.word	0xe000ed04

08006ca0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ca8:	4b0e      	ldr	r3, [pc, #56]	; (8006ce4 <prvGetNextExpireTime+0x44>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <prvGetNextExpireTime+0x16>
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	e000      	b.n	8006cb8 <prvGetNextExpireTime+0x18>
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d105      	bne.n	8006cd0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006cc4:	4b07      	ldr	r3, [pc, #28]	; (8006ce4 <prvGetNextExpireTime+0x44>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	e001      	b.n	8006cd4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	20001394 	.word	0x20001394

08006ce8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006cf0:	f7ff fa7e 	bl	80061f0 <xTaskGetTickCount>
 8006cf4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006cf6:	4b0b      	ldr	r3, [pc, #44]	; (8006d24 <prvSampleTimeNow+0x3c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d205      	bcs.n	8006d0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006d00:	f000 f936 	bl	8006f70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	601a      	str	r2, [r3, #0]
 8006d0a:	e002      	b.n	8006d12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d12:	4a04      	ldr	r2, [pc, #16]	; (8006d24 <prvSampleTimeNow+0x3c>)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006d18:	68fb      	ldr	r3, [r7, #12]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	200013a4 	.word	0x200013a4

08006d28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006d36:	2300      	movs	r3, #0
 8006d38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d812      	bhi.n	8006d74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	1ad2      	subs	r2, r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d302      	bcc.n	8006d62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	e01b      	b.n	8006d9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d62:	4b10      	ldr	r3, [pc, #64]	; (8006da4 <prvInsertTimerInActiveList+0x7c>)
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3304      	adds	r3, #4
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	f7fe fa02 	bl	8005176 <vListInsert>
 8006d72:	e012      	b.n	8006d9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d206      	bcs.n	8006d8a <prvInsertTimerInActiveList+0x62>
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d302      	bcc.n	8006d8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006d84:	2301      	movs	r3, #1
 8006d86:	617b      	str	r3, [r7, #20]
 8006d88:	e007      	b.n	8006d9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d8a:	4b07      	ldr	r3, [pc, #28]	; (8006da8 <prvInsertTimerInActiveList+0x80>)
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	3304      	adds	r3, #4
 8006d92:	4619      	mov	r1, r3
 8006d94:	4610      	mov	r0, r2
 8006d96:	f7fe f9ee 	bl	8005176 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006d9a:	697b      	ldr	r3, [r7, #20]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	20001398 	.word	0x20001398
 8006da8:	20001394 	.word	0x20001394

08006dac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08e      	sub	sp, #56	; 0x38
 8006db0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006db2:	e0ca      	b.n	8006f4a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	da18      	bge.n	8006dec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006dba:	1d3b      	adds	r3, r7, #4
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10a      	bne.n	8006ddc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	61fb      	str	r3, [r7, #28]
}
 8006dd8:	bf00      	nop
 8006dda:	e7fe      	b.n	8006dda <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006de2:	6850      	ldr	r0, [r2, #4]
 8006de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006de6:	6892      	ldr	r2, [r2, #8]
 8006de8:	4611      	mov	r1, r2
 8006dea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f2c0 80ab 	blt.w	8006f4a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d004      	beq.n	8006e0a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e02:	3304      	adds	r3, #4
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fe f9ef 	bl	80051e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e0a:	463b      	mov	r3, r7
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7ff ff6b 	bl	8006ce8 <prvSampleTimeNow>
 8006e12:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b09      	cmp	r3, #9
 8006e18:	f200 8096 	bhi.w	8006f48 <prvProcessReceivedCommands+0x19c>
 8006e1c:	a201      	add	r2, pc, #4	; (adr r2, 8006e24 <prvProcessReceivedCommands+0x78>)
 8006e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e22:	bf00      	nop
 8006e24:	08006e4d 	.word	0x08006e4d
 8006e28:	08006e4d 	.word	0x08006e4d
 8006e2c:	08006e4d 	.word	0x08006e4d
 8006e30:	08006ec1 	.word	0x08006ec1
 8006e34:	08006ed5 	.word	0x08006ed5
 8006e38:	08006f1f 	.word	0x08006f1f
 8006e3c:	08006e4d 	.word	0x08006e4d
 8006e40:	08006e4d 	.word	0x08006e4d
 8006e44:	08006ec1 	.word	0x08006ec1
 8006e48:	08006ed5 	.word	0x08006ed5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e52:	f043 0301 	orr.w	r3, r3, #1
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	18d1      	adds	r1, r2, r3
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e6c:	f7ff ff5c 	bl	8006d28 <prvInsertTimerInActiveList>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d069      	beq.n	8006f4a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e84:	f003 0304 	and.w	r3, r3, #4
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d05e      	beq.n	8006f4a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	441a      	add	r2, r3
 8006e94:	2300      	movs	r3, #0
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	2300      	movs	r3, #0
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e9e:	f7ff fe05 	bl	8006aac <xTimerGenericCommand>
 8006ea2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d14f      	bne.n	8006f4a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	61bb      	str	r3, [r7, #24]
}
 8006ebc:	bf00      	nop
 8006ebe:	e7fe      	b.n	8006ebe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ec6:	f023 0301 	bic.w	r3, r3, #1
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ece:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006ed2:	e03a      	b.n	8006f4a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006eda:	f043 0301 	orr.w	r3, r3, #1
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d10a      	bne.n	8006f0a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	617b      	str	r3, [r7, #20]
}
 8006f06:	bf00      	nop
 8006f08:	e7fe      	b.n	8006f08 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0c:	699a      	ldr	r2, [r3, #24]
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f10:	18d1      	adds	r1, r2, r3
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f18:	f7ff ff06 	bl	8006d28 <prvInsertTimerInActiveList>
					break;
 8006f1c:	e015      	b.n	8006f4a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d103      	bne.n	8006f34 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006f2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f2e:	f000 fbdf 	bl	80076f0 <vPortFree>
 8006f32:	e00a      	b.n	8006f4a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f3a:	f023 0301 	bic.w	r3, r3, #1
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006f46:	e000      	b.n	8006f4a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006f48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f4a:	4b08      	ldr	r3, [pc, #32]	; (8006f6c <prvProcessReceivedCommands+0x1c0>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	1d39      	adds	r1, r7, #4
 8006f50:	2200      	movs	r2, #0
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fe fc4a 	bl	80057ec <xQueueReceive>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f47f af2a 	bne.w	8006db4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006f60:	bf00      	nop
 8006f62:	bf00      	nop
 8006f64:	3730      	adds	r7, #48	; 0x30
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	2000139c 	.word	0x2000139c

08006f70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b088      	sub	sp, #32
 8006f74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f76:	e048      	b.n	800700a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f78:	4b2d      	ldr	r3, [pc, #180]	; (8007030 <prvSwitchTimerLists+0xc0>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f82:	4b2b      	ldr	r3, [pc, #172]	; (8007030 <prvSwitchTimerLists+0xc0>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	3304      	adds	r3, #4
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7fe f929 	bl	80051e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fa4:	f003 0304 	and.w	r3, r3, #4
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d02e      	beq.n	800700a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	699b      	ldr	r3, [r3, #24]
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d90e      	bls.n	8006fdc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fca:	4b19      	ldr	r3, [pc, #100]	; (8007030 <prvSwitchTimerLists+0xc0>)
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	f7fe f8ce 	bl	8005176 <vListInsert>
 8006fda:	e016      	b.n	800700a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006fdc:	2300      	movs	r3, #0
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f7ff fd60 	bl	8006aac <xTimerGenericCommand>
 8006fec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10a      	bne.n	800700a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	603b      	str	r3, [r7, #0]
}
 8007006:	bf00      	nop
 8007008:	e7fe      	b.n	8007008 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800700a:	4b09      	ldr	r3, [pc, #36]	; (8007030 <prvSwitchTimerLists+0xc0>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1b1      	bne.n	8006f78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007014:	4b06      	ldr	r3, [pc, #24]	; (8007030 <prvSwitchTimerLists+0xc0>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800701a:	4b06      	ldr	r3, [pc, #24]	; (8007034 <prvSwitchTimerLists+0xc4>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a04      	ldr	r2, [pc, #16]	; (8007030 <prvSwitchTimerLists+0xc0>)
 8007020:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007022:	4a04      	ldr	r2, [pc, #16]	; (8007034 <prvSwitchTimerLists+0xc4>)
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	6013      	str	r3, [r2, #0]
}
 8007028:	bf00      	nop
 800702a:	3718      	adds	r7, #24
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	20001394 	.word	0x20001394
 8007034:	20001398 	.word	0x20001398

08007038 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800703e:	f000 f969 	bl	8007314 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007042:	4b15      	ldr	r3, [pc, #84]	; (8007098 <prvCheckForValidListAndQueue+0x60>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d120      	bne.n	800708c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800704a:	4814      	ldr	r0, [pc, #80]	; (800709c <prvCheckForValidListAndQueue+0x64>)
 800704c:	f7fe f842 	bl	80050d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007050:	4813      	ldr	r0, [pc, #76]	; (80070a0 <prvCheckForValidListAndQueue+0x68>)
 8007052:	f7fe f83f 	bl	80050d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007056:	4b13      	ldr	r3, [pc, #76]	; (80070a4 <prvCheckForValidListAndQueue+0x6c>)
 8007058:	4a10      	ldr	r2, [pc, #64]	; (800709c <prvCheckForValidListAndQueue+0x64>)
 800705a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800705c:	4b12      	ldr	r3, [pc, #72]	; (80070a8 <prvCheckForValidListAndQueue+0x70>)
 800705e:	4a10      	ldr	r2, [pc, #64]	; (80070a0 <prvCheckForValidListAndQueue+0x68>)
 8007060:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007062:	2300      	movs	r3, #0
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	4b11      	ldr	r3, [pc, #68]	; (80070ac <prvCheckForValidListAndQueue+0x74>)
 8007068:	4a11      	ldr	r2, [pc, #68]	; (80070b0 <prvCheckForValidListAndQueue+0x78>)
 800706a:	2110      	movs	r1, #16
 800706c:	200a      	movs	r0, #10
 800706e:	f7fe f94d 	bl	800530c <xQueueGenericCreateStatic>
 8007072:	4603      	mov	r3, r0
 8007074:	4a08      	ldr	r2, [pc, #32]	; (8007098 <prvCheckForValidListAndQueue+0x60>)
 8007076:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007078:	4b07      	ldr	r3, [pc, #28]	; (8007098 <prvCheckForValidListAndQueue+0x60>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d005      	beq.n	800708c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007080:	4b05      	ldr	r3, [pc, #20]	; (8007098 <prvCheckForValidListAndQueue+0x60>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	490b      	ldr	r1, [pc, #44]	; (80070b4 <prvCheckForValidListAndQueue+0x7c>)
 8007086:	4618      	mov	r0, r3
 8007088:	f7fe fda0 	bl	8005bcc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800708c:	f000 f972 	bl	8007374 <vPortExitCritical>
}
 8007090:	bf00      	nop
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	2000139c 	.word	0x2000139c
 800709c:	2000136c 	.word	0x2000136c
 80070a0:	20001380 	.word	0x20001380
 80070a4:	20001394 	.word	0x20001394
 80070a8:	20001398 	.word	0x20001398
 80070ac:	20001448 	.word	0x20001448
 80070b0:	200013a8 	.word	0x200013a8
 80070b4:	0800c1f4 	.word	0x0800c1f4

080070b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	3b04      	subs	r3, #4
 80070c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80070d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	3b04      	subs	r3, #4
 80070d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f023 0201 	bic.w	r2, r3, #1
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	3b04      	subs	r3, #4
 80070e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070e8:	4a0c      	ldr	r2, [pc, #48]	; (800711c <pxPortInitialiseStack+0x64>)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	3b14      	subs	r3, #20
 80070f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	3b04      	subs	r3, #4
 80070fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f06f 0202 	mvn.w	r2, #2
 8007106:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	3b20      	subs	r3, #32
 800710c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800710e:	68fb      	ldr	r3, [r7, #12]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	08007121 	.word	0x08007121

08007120 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007126:	2300      	movs	r3, #0
 8007128:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800712a:	4b12      	ldr	r3, [pc, #72]	; (8007174 <prvTaskExitError+0x54>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007132:	d00a      	beq.n	800714a <prvTaskExitError+0x2a>
	__asm volatile
 8007134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	60fb      	str	r3, [r7, #12]
}
 8007146:	bf00      	nop
 8007148:	e7fe      	b.n	8007148 <prvTaskExitError+0x28>
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	60bb      	str	r3, [r7, #8]
}
 800715c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800715e:	bf00      	nop
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0fc      	beq.n	8007160 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007166:	bf00      	nop
 8007168:	bf00      	nop
 800716a:	3714      	adds	r7, #20
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr
 8007174:	2000001c 	.word	0x2000001c
	...

08007180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007180:	4b07      	ldr	r3, [pc, #28]	; (80071a0 <pxCurrentTCBConst2>)
 8007182:	6819      	ldr	r1, [r3, #0]
 8007184:	6808      	ldr	r0, [r1, #0]
 8007186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800718a:	f380 8809 	msr	PSP, r0
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f04f 0000 	mov.w	r0, #0
 8007196:	f380 8811 	msr	BASEPRI, r0
 800719a:	4770      	bx	lr
 800719c:	f3af 8000 	nop.w

080071a0 <pxCurrentTCBConst2>:
 80071a0:	20000e6c 	.word	0x20000e6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80071a4:	bf00      	nop
 80071a6:	bf00      	nop

080071a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80071a8:	4808      	ldr	r0, [pc, #32]	; (80071cc <prvPortStartFirstTask+0x24>)
 80071aa:	6800      	ldr	r0, [r0, #0]
 80071ac:	6800      	ldr	r0, [r0, #0]
 80071ae:	f380 8808 	msr	MSP, r0
 80071b2:	f04f 0000 	mov.w	r0, #0
 80071b6:	f380 8814 	msr	CONTROL, r0
 80071ba:	b662      	cpsie	i
 80071bc:	b661      	cpsie	f
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	df00      	svc	0
 80071c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80071ca:	bf00      	nop
 80071cc:	e000ed08 	.word	0xe000ed08

080071d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80071d6:	4b46      	ldr	r3, [pc, #280]	; (80072f0 <xPortStartScheduler+0x120>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a46      	ldr	r2, [pc, #280]	; (80072f4 <xPortStartScheduler+0x124>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d10a      	bne.n	80071f6 <xPortStartScheduler+0x26>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	613b      	str	r3, [r7, #16]
}
 80071f2:	bf00      	nop
 80071f4:	e7fe      	b.n	80071f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80071f6:	4b3e      	ldr	r3, [pc, #248]	; (80072f0 <xPortStartScheduler+0x120>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a3f      	ldr	r2, [pc, #252]	; (80072f8 <xPortStartScheduler+0x128>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d10a      	bne.n	8007216 <xPortStartScheduler+0x46>
	__asm volatile
 8007200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	60fb      	str	r3, [r7, #12]
}
 8007212:	bf00      	nop
 8007214:	e7fe      	b.n	8007214 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007216:	4b39      	ldr	r3, [pc, #228]	; (80072fc <xPortStartScheduler+0x12c>)
 8007218:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	b2db      	uxtb	r3, r3
 8007220:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	22ff      	movs	r2, #255	; 0xff
 8007226:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	b2db      	uxtb	r3, r3
 800722e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007230:	78fb      	ldrb	r3, [r7, #3]
 8007232:	b2db      	uxtb	r3, r3
 8007234:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007238:	b2da      	uxtb	r2, r3
 800723a:	4b31      	ldr	r3, [pc, #196]	; (8007300 <xPortStartScheduler+0x130>)
 800723c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800723e:	4b31      	ldr	r3, [pc, #196]	; (8007304 <xPortStartScheduler+0x134>)
 8007240:	2207      	movs	r2, #7
 8007242:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007244:	e009      	b.n	800725a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007246:	4b2f      	ldr	r3, [pc, #188]	; (8007304 <xPortStartScheduler+0x134>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3b01      	subs	r3, #1
 800724c:	4a2d      	ldr	r2, [pc, #180]	; (8007304 <xPortStartScheduler+0x134>)
 800724e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007250:	78fb      	ldrb	r3, [r7, #3]
 8007252:	b2db      	uxtb	r3, r3
 8007254:	005b      	lsls	r3, r3, #1
 8007256:	b2db      	uxtb	r3, r3
 8007258:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800725a:	78fb      	ldrb	r3, [r7, #3]
 800725c:	b2db      	uxtb	r3, r3
 800725e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007262:	2b80      	cmp	r3, #128	; 0x80
 8007264:	d0ef      	beq.n	8007246 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007266:	4b27      	ldr	r3, [pc, #156]	; (8007304 <xPortStartScheduler+0x134>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f1c3 0307 	rsb	r3, r3, #7
 800726e:	2b04      	cmp	r3, #4
 8007270:	d00a      	beq.n	8007288 <xPortStartScheduler+0xb8>
	__asm volatile
 8007272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	60bb      	str	r3, [r7, #8]
}
 8007284:	bf00      	nop
 8007286:	e7fe      	b.n	8007286 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007288:	4b1e      	ldr	r3, [pc, #120]	; (8007304 <xPortStartScheduler+0x134>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	021b      	lsls	r3, r3, #8
 800728e:	4a1d      	ldr	r2, [pc, #116]	; (8007304 <xPortStartScheduler+0x134>)
 8007290:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007292:	4b1c      	ldr	r3, [pc, #112]	; (8007304 <xPortStartScheduler+0x134>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800729a:	4a1a      	ldr	r2, [pc, #104]	; (8007304 <xPortStartScheduler+0x134>)
 800729c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072a6:	4b18      	ldr	r3, [pc, #96]	; (8007308 <xPortStartScheduler+0x138>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a17      	ldr	r2, [pc, #92]	; (8007308 <xPortStartScheduler+0x138>)
 80072ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072b2:	4b15      	ldr	r3, [pc, #84]	; (8007308 <xPortStartScheduler+0x138>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a14      	ldr	r2, [pc, #80]	; (8007308 <xPortStartScheduler+0x138>)
 80072b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80072bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072be:	f000 f8dd 	bl	800747c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80072c2:	4b12      	ldr	r3, [pc, #72]	; (800730c <xPortStartScheduler+0x13c>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80072c8:	f000 f8fc 	bl	80074c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80072cc:	4b10      	ldr	r3, [pc, #64]	; (8007310 <xPortStartScheduler+0x140>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a0f      	ldr	r2, [pc, #60]	; (8007310 <xPortStartScheduler+0x140>)
 80072d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80072d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80072d8:	f7ff ff66 	bl	80071a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80072dc:	f7ff f852 	bl	8006384 <vTaskSwitchContext>
	prvTaskExitError();
 80072e0:	f7ff ff1e 	bl	8007120 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	e000ed00 	.word	0xe000ed00
 80072f4:	410fc271 	.word	0x410fc271
 80072f8:	410fc270 	.word	0x410fc270
 80072fc:	e000e400 	.word	0xe000e400
 8007300:	20001498 	.word	0x20001498
 8007304:	2000149c 	.word	0x2000149c
 8007308:	e000ed20 	.word	0xe000ed20
 800730c:	2000001c 	.word	0x2000001c
 8007310:	e000ef34 	.word	0xe000ef34

08007314 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
	__asm volatile
 800731a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731e:	f383 8811 	msr	BASEPRI, r3
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	f3bf 8f4f 	dsb	sy
 800732a:	607b      	str	r3, [r7, #4]
}
 800732c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800732e:	4b0f      	ldr	r3, [pc, #60]	; (800736c <vPortEnterCritical+0x58>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3301      	adds	r3, #1
 8007334:	4a0d      	ldr	r2, [pc, #52]	; (800736c <vPortEnterCritical+0x58>)
 8007336:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007338:	4b0c      	ldr	r3, [pc, #48]	; (800736c <vPortEnterCritical+0x58>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d10f      	bne.n	8007360 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007340:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <vPortEnterCritical+0x5c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00a      	beq.n	8007360 <vPortEnterCritical+0x4c>
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	603b      	str	r3, [r7, #0]
}
 800735c:	bf00      	nop
 800735e:	e7fe      	b.n	800735e <vPortEnterCritical+0x4a>
	}
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	2000001c 	.word	0x2000001c
 8007370:	e000ed04 	.word	0xe000ed04

08007374 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800737a:	4b12      	ldr	r3, [pc, #72]	; (80073c4 <vPortExitCritical+0x50>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10a      	bne.n	8007398 <vPortExitCritical+0x24>
	__asm volatile
 8007382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	607b      	str	r3, [r7, #4]
}
 8007394:	bf00      	nop
 8007396:	e7fe      	b.n	8007396 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007398:	4b0a      	ldr	r3, [pc, #40]	; (80073c4 <vPortExitCritical+0x50>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3b01      	subs	r3, #1
 800739e:	4a09      	ldr	r2, [pc, #36]	; (80073c4 <vPortExitCritical+0x50>)
 80073a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80073a2:	4b08      	ldr	r3, [pc, #32]	; (80073c4 <vPortExitCritical+0x50>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d105      	bne.n	80073b6 <vPortExitCritical+0x42>
 80073aa:	2300      	movs	r3, #0
 80073ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	f383 8811 	msr	BASEPRI, r3
}
 80073b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80073b6:	bf00      	nop
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	2000001c 	.word	0x2000001c
	...

080073d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80073d0:	f3ef 8009 	mrs	r0, PSP
 80073d4:	f3bf 8f6f 	isb	sy
 80073d8:	4b15      	ldr	r3, [pc, #84]	; (8007430 <pxCurrentTCBConst>)
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	f01e 0f10 	tst.w	lr, #16
 80073e0:	bf08      	it	eq
 80073e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80073e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ea:	6010      	str	r0, [r2, #0]
 80073ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80073f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80073f4:	f380 8811 	msr	BASEPRI, r0
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f7fe ffc0 	bl	8006384 <vTaskSwitchContext>
 8007404:	f04f 0000 	mov.w	r0, #0
 8007408:	f380 8811 	msr	BASEPRI, r0
 800740c:	bc09      	pop	{r0, r3}
 800740e:	6819      	ldr	r1, [r3, #0]
 8007410:	6808      	ldr	r0, [r1, #0]
 8007412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007416:	f01e 0f10 	tst.w	lr, #16
 800741a:	bf08      	it	eq
 800741c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007420:	f380 8809 	msr	PSP, r0
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	4770      	bx	lr
 800742a:	bf00      	nop
 800742c:	f3af 8000 	nop.w

08007430 <pxCurrentTCBConst>:
 8007430:	20000e6c 	.word	0x20000e6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007434:	bf00      	nop
 8007436:	bf00      	nop

08007438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	607b      	str	r3, [r7, #4]
}
 8007450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007452:	f7fe fedd 	bl	8006210 <xTaskIncrementTick>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d003      	beq.n	8007464 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800745c:	4b06      	ldr	r3, [pc, #24]	; (8007478 <xPortSysTickHandler+0x40>)
 800745e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	2300      	movs	r3, #0
 8007466:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	f383 8811 	msr	BASEPRI, r3
}
 800746e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007470:	bf00      	nop
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	e000ed04 	.word	0xe000ed04

0800747c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800747c:	b480      	push	{r7}
 800747e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007480:	4b0b      	ldr	r3, [pc, #44]	; (80074b0 <vPortSetupTimerInterrupt+0x34>)
 8007482:	2200      	movs	r2, #0
 8007484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007486:	4b0b      	ldr	r3, [pc, #44]	; (80074b4 <vPortSetupTimerInterrupt+0x38>)
 8007488:	2200      	movs	r2, #0
 800748a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800748c:	4b0a      	ldr	r3, [pc, #40]	; (80074b8 <vPortSetupTimerInterrupt+0x3c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a0a      	ldr	r2, [pc, #40]	; (80074bc <vPortSetupTimerInterrupt+0x40>)
 8007492:	fba2 2303 	umull	r2, r3, r2, r3
 8007496:	099b      	lsrs	r3, r3, #6
 8007498:	4a09      	ldr	r2, [pc, #36]	; (80074c0 <vPortSetupTimerInterrupt+0x44>)
 800749a:	3b01      	subs	r3, #1
 800749c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800749e:	4b04      	ldr	r3, [pc, #16]	; (80074b0 <vPortSetupTimerInterrupt+0x34>)
 80074a0:	2207      	movs	r2, #7
 80074a2:	601a      	str	r2, [r3, #0]
}
 80074a4:	bf00      	nop
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	e000e010 	.word	0xe000e010
 80074b4:	e000e018 	.word	0xe000e018
 80074b8:	20000010 	.word	0x20000010
 80074bc:	10624dd3 	.word	0x10624dd3
 80074c0:	e000e014 	.word	0xe000e014

080074c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80074c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80074d4 <vPortEnableVFP+0x10>
 80074c8:	6801      	ldr	r1, [r0, #0]
 80074ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80074ce:	6001      	str	r1, [r0, #0]
 80074d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80074d2:	bf00      	nop
 80074d4:	e000ed88 	.word	0xe000ed88

080074d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80074de:	f3ef 8305 	mrs	r3, IPSR
 80074e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2b0f      	cmp	r3, #15
 80074e8:	d914      	bls.n	8007514 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80074ea:	4a17      	ldr	r2, [pc, #92]	; (8007548 <vPortValidateInterruptPriority+0x70>)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	4413      	add	r3, r2
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80074f4:	4b15      	ldr	r3, [pc, #84]	; (800754c <vPortValidateInterruptPriority+0x74>)
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	7afa      	ldrb	r2, [r7, #11]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d20a      	bcs.n	8007514 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	607b      	str	r3, [r7, #4]
}
 8007510:	bf00      	nop
 8007512:	e7fe      	b.n	8007512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007514:	4b0e      	ldr	r3, [pc, #56]	; (8007550 <vPortValidateInterruptPriority+0x78>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800751c:	4b0d      	ldr	r3, [pc, #52]	; (8007554 <vPortValidateInterruptPriority+0x7c>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	429a      	cmp	r2, r3
 8007522:	d90a      	bls.n	800753a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	603b      	str	r3, [r7, #0]
}
 8007536:	bf00      	nop
 8007538:	e7fe      	b.n	8007538 <vPortValidateInterruptPriority+0x60>
	}
 800753a:	bf00      	nop
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	e000e3f0 	.word	0xe000e3f0
 800754c:	20001498 	.word	0x20001498
 8007550:	e000ed0c 	.word	0xe000ed0c
 8007554:	2000149c 	.word	0x2000149c

08007558 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b08a      	sub	sp, #40	; 0x28
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007560:	2300      	movs	r3, #0
 8007562:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007564:	f7fe fd98 	bl	8006098 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007568:	4b5b      	ldr	r3, [pc, #364]	; (80076d8 <pvPortMalloc+0x180>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d101      	bne.n	8007574 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007570:	f000 f920 	bl	80077b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007574:	4b59      	ldr	r3, [pc, #356]	; (80076dc <pvPortMalloc+0x184>)
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4013      	ands	r3, r2
 800757c:	2b00      	cmp	r3, #0
 800757e:	f040 8093 	bne.w	80076a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d01d      	beq.n	80075c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007588:	2208      	movs	r2, #8
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4413      	add	r3, r2
 800758e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	2b00      	cmp	r3, #0
 8007598:	d014      	beq.n	80075c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f023 0307 	bic.w	r3, r3, #7
 80075a0:	3308      	adds	r3, #8
 80075a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f003 0307 	and.w	r3, r3, #7
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00a      	beq.n	80075c4 <pvPortMalloc+0x6c>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	617b      	str	r3, [r7, #20]
}
 80075c0:	bf00      	nop
 80075c2:	e7fe      	b.n	80075c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d06e      	beq.n	80076a8 <pvPortMalloc+0x150>
 80075ca:	4b45      	ldr	r3, [pc, #276]	; (80076e0 <pvPortMalloc+0x188>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d869      	bhi.n	80076a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80075d4:	4b43      	ldr	r3, [pc, #268]	; (80076e4 <pvPortMalloc+0x18c>)
 80075d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80075d8:	4b42      	ldr	r3, [pc, #264]	; (80076e4 <pvPortMalloc+0x18c>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075de:	e004      	b.n	80075ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d903      	bls.n	80075fc <pvPortMalloc+0xa4>
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1f1      	bne.n	80075e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80075fc:	4b36      	ldr	r3, [pc, #216]	; (80076d8 <pvPortMalloc+0x180>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007602:	429a      	cmp	r2, r3
 8007604:	d050      	beq.n	80076a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2208      	movs	r2, #8
 800760c:	4413      	add	r3, r2
 800760e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	1ad2      	subs	r2, r2, r3
 8007620:	2308      	movs	r3, #8
 8007622:	005b      	lsls	r3, r3, #1
 8007624:	429a      	cmp	r2, r3
 8007626:	d91f      	bls.n	8007668 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4413      	add	r3, r2
 800762e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	f003 0307 	and.w	r3, r3, #7
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00a      	beq.n	8007650 <pvPortMalloc+0xf8>
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	613b      	str	r3, [r7, #16]
}
 800764c:	bf00      	nop
 800764e:	e7fe      	b.n	800764e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	1ad2      	subs	r2, r2, r3
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800765c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007662:	69b8      	ldr	r0, [r7, #24]
 8007664:	f000 f908 	bl	8007878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007668:	4b1d      	ldr	r3, [pc, #116]	; (80076e0 <pvPortMalloc+0x188>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	4a1b      	ldr	r2, [pc, #108]	; (80076e0 <pvPortMalloc+0x188>)
 8007674:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007676:	4b1a      	ldr	r3, [pc, #104]	; (80076e0 <pvPortMalloc+0x188>)
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	4b1b      	ldr	r3, [pc, #108]	; (80076e8 <pvPortMalloc+0x190>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	429a      	cmp	r2, r3
 8007680:	d203      	bcs.n	800768a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007682:	4b17      	ldr	r3, [pc, #92]	; (80076e0 <pvPortMalloc+0x188>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a18      	ldr	r2, [pc, #96]	; (80076e8 <pvPortMalloc+0x190>)
 8007688:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	4b13      	ldr	r3, [pc, #76]	; (80076dc <pvPortMalloc+0x184>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	431a      	orrs	r2, r3
 8007694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007696:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	2200      	movs	r2, #0
 800769c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800769e:	4b13      	ldr	r3, [pc, #76]	; (80076ec <pvPortMalloc+0x194>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	3301      	adds	r3, #1
 80076a4:	4a11      	ldr	r2, [pc, #68]	; (80076ec <pvPortMalloc+0x194>)
 80076a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076a8:	f7fe fd04 	bl	80060b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	f003 0307 	and.w	r3, r3, #7
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d00a      	beq.n	80076cc <pvPortMalloc+0x174>
	__asm volatile
 80076b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	60fb      	str	r3, [r7, #12]
}
 80076c8:	bf00      	nop
 80076ca:	e7fe      	b.n	80076ca <pvPortMalloc+0x172>
	return pvReturn;
 80076cc:	69fb      	ldr	r3, [r7, #28]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3728      	adds	r7, #40	; 0x28
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	200050a8 	.word	0x200050a8
 80076dc:	200050bc 	.word	0x200050bc
 80076e0:	200050ac 	.word	0x200050ac
 80076e4:	200050a0 	.word	0x200050a0
 80076e8:	200050b0 	.word	0x200050b0
 80076ec:	200050b4 	.word	0x200050b4

080076f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d04d      	beq.n	800779e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007702:	2308      	movs	r3, #8
 8007704:	425b      	negs	r3, r3
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	4413      	add	r3, r2
 800770a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	685a      	ldr	r2, [r3, #4]
 8007714:	4b24      	ldr	r3, [pc, #144]	; (80077a8 <vPortFree+0xb8>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4013      	ands	r3, r2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10a      	bne.n	8007734 <vPortFree+0x44>
	__asm volatile
 800771e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	60fb      	str	r3, [r7, #12]
}
 8007730:	bf00      	nop
 8007732:	e7fe      	b.n	8007732 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00a      	beq.n	8007752 <vPortFree+0x62>
	__asm volatile
 800773c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007740:	f383 8811 	msr	BASEPRI, r3
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	60bb      	str	r3, [r7, #8]
}
 800774e:	bf00      	nop
 8007750:	e7fe      	b.n	8007750 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	4b14      	ldr	r3, [pc, #80]	; (80077a8 <vPortFree+0xb8>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4013      	ands	r3, r2
 800775c:	2b00      	cmp	r3, #0
 800775e:	d01e      	beq.n	800779e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d11a      	bne.n	800779e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	685a      	ldr	r2, [r3, #4]
 800776c:	4b0e      	ldr	r3, [pc, #56]	; (80077a8 <vPortFree+0xb8>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	43db      	mvns	r3, r3
 8007772:	401a      	ands	r2, r3
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007778:	f7fe fc8e 	bl	8006098 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	4b0a      	ldr	r3, [pc, #40]	; (80077ac <vPortFree+0xbc>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4413      	add	r3, r2
 8007786:	4a09      	ldr	r2, [pc, #36]	; (80077ac <vPortFree+0xbc>)
 8007788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800778a:	6938      	ldr	r0, [r7, #16]
 800778c:	f000 f874 	bl	8007878 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007790:	4b07      	ldr	r3, [pc, #28]	; (80077b0 <vPortFree+0xc0>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3301      	adds	r3, #1
 8007796:	4a06      	ldr	r2, [pc, #24]	; (80077b0 <vPortFree+0xc0>)
 8007798:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800779a:	f7fe fc8b 	bl	80060b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800779e:	bf00      	nop
 80077a0:	3718      	adds	r7, #24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	200050bc 	.word	0x200050bc
 80077ac:	200050ac 	.word	0x200050ac
 80077b0:	200050b8 	.word	0x200050b8

080077b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80077be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077c0:	4b27      	ldr	r3, [pc, #156]	; (8007860 <prvHeapInit+0xac>)
 80077c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d00c      	beq.n	80077e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3307      	adds	r3, #7
 80077d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f023 0307 	bic.w	r3, r3, #7
 80077da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	4a1f      	ldr	r2, [pc, #124]	; (8007860 <prvHeapInit+0xac>)
 80077e4:	4413      	add	r3, r2
 80077e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80077ec:	4a1d      	ldr	r2, [pc, #116]	; (8007864 <prvHeapInit+0xb0>)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077f2:	4b1c      	ldr	r3, [pc, #112]	; (8007864 <prvHeapInit+0xb0>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	4413      	add	r3, r2
 80077fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007800:	2208      	movs	r2, #8
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	1a9b      	subs	r3, r3, r2
 8007806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 0307 	bic.w	r3, r3, #7
 800780e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4a15      	ldr	r2, [pc, #84]	; (8007868 <prvHeapInit+0xb4>)
 8007814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007816:	4b14      	ldr	r3, [pc, #80]	; (8007868 <prvHeapInit+0xb4>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2200      	movs	r2, #0
 800781c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800781e:	4b12      	ldr	r3, [pc, #72]	; (8007868 <prvHeapInit+0xb4>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	1ad2      	subs	r2, r2, r3
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007834:	4b0c      	ldr	r3, [pc, #48]	; (8007868 <prvHeapInit+0xb4>)
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	4a0a      	ldr	r2, [pc, #40]	; (800786c <prvHeapInit+0xb8>)
 8007842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	4a09      	ldr	r2, [pc, #36]	; (8007870 <prvHeapInit+0xbc>)
 800784a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800784c:	4b09      	ldr	r3, [pc, #36]	; (8007874 <prvHeapInit+0xc0>)
 800784e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007852:	601a      	str	r2, [r3, #0]
}
 8007854:	bf00      	nop
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	200014a0 	.word	0x200014a0
 8007864:	200050a0 	.word	0x200050a0
 8007868:	200050a8 	.word	0x200050a8
 800786c:	200050b0 	.word	0x200050b0
 8007870:	200050ac 	.word	0x200050ac
 8007874:	200050bc 	.word	0x200050bc

08007878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007880:	4b28      	ldr	r3, [pc, #160]	; (8007924 <prvInsertBlockIntoFreeList+0xac>)
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	e002      	b.n	800788c <prvInsertBlockIntoFreeList+0x14>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	60fb      	str	r3, [r7, #12]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	429a      	cmp	r2, r3
 8007894:	d8f7      	bhi.n	8007886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	4413      	add	r3, r2
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d108      	bne.n	80078ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	441a      	add	r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	441a      	add	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d118      	bne.n	8007900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	4b15      	ldr	r3, [pc, #84]	; (8007928 <prvInsertBlockIntoFreeList+0xb0>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d00d      	beq.n	80078f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	441a      	add	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	e008      	b.n	8007908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078f6:	4b0c      	ldr	r3, [pc, #48]	; (8007928 <prvInsertBlockIntoFreeList+0xb0>)
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	e003      	b.n	8007908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	429a      	cmp	r2, r3
 800790e:	d002      	beq.n	8007916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007916:	bf00      	nop
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	200050a0 	.word	0x200050a0
 8007928:	200050a8 	.word	0x200050a8

0800792c <__itoa>:
 800792c:	1e93      	subs	r3, r2, #2
 800792e:	2b22      	cmp	r3, #34	; 0x22
 8007930:	b510      	push	{r4, lr}
 8007932:	460c      	mov	r4, r1
 8007934:	d904      	bls.n	8007940 <__itoa+0x14>
 8007936:	2300      	movs	r3, #0
 8007938:	700b      	strb	r3, [r1, #0]
 800793a:	461c      	mov	r4, r3
 800793c:	4620      	mov	r0, r4
 800793e:	bd10      	pop	{r4, pc}
 8007940:	2a0a      	cmp	r2, #10
 8007942:	d109      	bne.n	8007958 <__itoa+0x2c>
 8007944:	2800      	cmp	r0, #0
 8007946:	da07      	bge.n	8007958 <__itoa+0x2c>
 8007948:	232d      	movs	r3, #45	; 0x2d
 800794a:	700b      	strb	r3, [r1, #0]
 800794c:	4240      	negs	r0, r0
 800794e:	2101      	movs	r1, #1
 8007950:	4421      	add	r1, r4
 8007952:	f000 f805 	bl	8007960 <__utoa>
 8007956:	e7f1      	b.n	800793c <__itoa+0x10>
 8007958:	2100      	movs	r1, #0
 800795a:	e7f9      	b.n	8007950 <__itoa+0x24>

0800795c <itoa>:
 800795c:	f7ff bfe6 	b.w	800792c <__itoa>

08007960 <__utoa>:
 8007960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007962:	4c1f      	ldr	r4, [pc, #124]	; (80079e0 <__utoa+0x80>)
 8007964:	b08b      	sub	sp, #44	; 0x2c
 8007966:	4605      	mov	r5, r0
 8007968:	460b      	mov	r3, r1
 800796a:	466e      	mov	r6, sp
 800796c:	f104 0c20 	add.w	ip, r4, #32
 8007970:	6820      	ldr	r0, [r4, #0]
 8007972:	6861      	ldr	r1, [r4, #4]
 8007974:	4637      	mov	r7, r6
 8007976:	c703      	stmia	r7!, {r0, r1}
 8007978:	3408      	adds	r4, #8
 800797a:	4564      	cmp	r4, ip
 800797c:	463e      	mov	r6, r7
 800797e:	d1f7      	bne.n	8007970 <__utoa+0x10>
 8007980:	7921      	ldrb	r1, [r4, #4]
 8007982:	7139      	strb	r1, [r7, #4]
 8007984:	1e91      	subs	r1, r2, #2
 8007986:	6820      	ldr	r0, [r4, #0]
 8007988:	6038      	str	r0, [r7, #0]
 800798a:	2922      	cmp	r1, #34	; 0x22
 800798c:	f04f 0100 	mov.w	r1, #0
 8007990:	d904      	bls.n	800799c <__utoa+0x3c>
 8007992:	7019      	strb	r1, [r3, #0]
 8007994:	460b      	mov	r3, r1
 8007996:	4618      	mov	r0, r3
 8007998:	b00b      	add	sp, #44	; 0x2c
 800799a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800799c:	1e58      	subs	r0, r3, #1
 800799e:	4684      	mov	ip, r0
 80079a0:	fbb5 f7f2 	udiv	r7, r5, r2
 80079a4:	fb02 5617 	mls	r6, r2, r7, r5
 80079a8:	3628      	adds	r6, #40	; 0x28
 80079aa:	446e      	add	r6, sp
 80079ac:	460c      	mov	r4, r1
 80079ae:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80079b2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80079b6:	462e      	mov	r6, r5
 80079b8:	42b2      	cmp	r2, r6
 80079ba:	f101 0101 	add.w	r1, r1, #1
 80079be:	463d      	mov	r5, r7
 80079c0:	d9ee      	bls.n	80079a0 <__utoa+0x40>
 80079c2:	2200      	movs	r2, #0
 80079c4:	545a      	strb	r2, [r3, r1]
 80079c6:	1919      	adds	r1, r3, r4
 80079c8:	1aa5      	subs	r5, r4, r2
 80079ca:	42aa      	cmp	r2, r5
 80079cc:	dae3      	bge.n	8007996 <__utoa+0x36>
 80079ce:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80079d2:	780e      	ldrb	r6, [r1, #0]
 80079d4:	7006      	strb	r6, [r0, #0]
 80079d6:	3201      	adds	r2, #1
 80079d8:	f801 5901 	strb.w	r5, [r1], #-1
 80079dc:	e7f4      	b.n	80079c8 <__utoa+0x68>
 80079de:	bf00      	nop
 80079e0:	0800e31c 	.word	0x0800e31c

080079e4 <__cvt>:
 80079e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079e8:	ec55 4b10 	vmov	r4, r5, d0
 80079ec:	2d00      	cmp	r5, #0
 80079ee:	460e      	mov	r6, r1
 80079f0:	4619      	mov	r1, r3
 80079f2:	462b      	mov	r3, r5
 80079f4:	bfbb      	ittet	lt
 80079f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80079fa:	461d      	movlt	r5, r3
 80079fc:	2300      	movge	r3, #0
 80079fe:	232d      	movlt	r3, #45	; 0x2d
 8007a00:	700b      	strb	r3, [r1, #0]
 8007a02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007a08:	4691      	mov	r9, r2
 8007a0a:	f023 0820 	bic.w	r8, r3, #32
 8007a0e:	bfbc      	itt	lt
 8007a10:	4622      	movlt	r2, r4
 8007a12:	4614      	movlt	r4, r2
 8007a14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a18:	d005      	beq.n	8007a26 <__cvt+0x42>
 8007a1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007a1e:	d100      	bne.n	8007a22 <__cvt+0x3e>
 8007a20:	3601      	adds	r6, #1
 8007a22:	2102      	movs	r1, #2
 8007a24:	e000      	b.n	8007a28 <__cvt+0x44>
 8007a26:	2103      	movs	r1, #3
 8007a28:	ab03      	add	r3, sp, #12
 8007a2a:	9301      	str	r3, [sp, #4]
 8007a2c:	ab02      	add	r3, sp, #8
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	ec45 4b10 	vmov	d0, r4, r5
 8007a34:	4653      	mov	r3, sl
 8007a36:	4632      	mov	r2, r6
 8007a38:	f001 f88e 	bl	8008b58 <_dtoa_r>
 8007a3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007a40:	4607      	mov	r7, r0
 8007a42:	d102      	bne.n	8007a4a <__cvt+0x66>
 8007a44:	f019 0f01 	tst.w	r9, #1
 8007a48:	d022      	beq.n	8007a90 <__cvt+0xac>
 8007a4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a4e:	eb07 0906 	add.w	r9, r7, r6
 8007a52:	d110      	bne.n	8007a76 <__cvt+0x92>
 8007a54:	783b      	ldrb	r3, [r7, #0]
 8007a56:	2b30      	cmp	r3, #48	; 0x30
 8007a58:	d10a      	bne.n	8007a70 <__cvt+0x8c>
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	4620      	mov	r0, r4
 8007a60:	4629      	mov	r1, r5
 8007a62:	f7f9 f851 	bl	8000b08 <__aeabi_dcmpeq>
 8007a66:	b918      	cbnz	r0, 8007a70 <__cvt+0x8c>
 8007a68:	f1c6 0601 	rsb	r6, r6, #1
 8007a6c:	f8ca 6000 	str.w	r6, [sl]
 8007a70:	f8da 3000 	ldr.w	r3, [sl]
 8007a74:	4499      	add	r9, r3
 8007a76:	2200      	movs	r2, #0
 8007a78:	2300      	movs	r3, #0
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	f7f9 f843 	bl	8000b08 <__aeabi_dcmpeq>
 8007a82:	b108      	cbz	r0, 8007a88 <__cvt+0xa4>
 8007a84:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a88:	2230      	movs	r2, #48	; 0x30
 8007a8a:	9b03      	ldr	r3, [sp, #12]
 8007a8c:	454b      	cmp	r3, r9
 8007a8e:	d307      	bcc.n	8007aa0 <__cvt+0xbc>
 8007a90:	9b03      	ldr	r3, [sp, #12]
 8007a92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a94:	1bdb      	subs	r3, r3, r7
 8007a96:	4638      	mov	r0, r7
 8007a98:	6013      	str	r3, [r2, #0]
 8007a9a:	b004      	add	sp, #16
 8007a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aa0:	1c59      	adds	r1, r3, #1
 8007aa2:	9103      	str	r1, [sp, #12]
 8007aa4:	701a      	strb	r2, [r3, #0]
 8007aa6:	e7f0      	b.n	8007a8a <__cvt+0xa6>

08007aa8 <__exponent>:
 8007aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2900      	cmp	r1, #0
 8007aae:	bfb8      	it	lt
 8007ab0:	4249      	neglt	r1, r1
 8007ab2:	f803 2b02 	strb.w	r2, [r3], #2
 8007ab6:	bfb4      	ite	lt
 8007ab8:	222d      	movlt	r2, #45	; 0x2d
 8007aba:	222b      	movge	r2, #43	; 0x2b
 8007abc:	2909      	cmp	r1, #9
 8007abe:	7042      	strb	r2, [r0, #1]
 8007ac0:	dd2a      	ble.n	8007b18 <__exponent+0x70>
 8007ac2:	f10d 0207 	add.w	r2, sp, #7
 8007ac6:	4617      	mov	r7, r2
 8007ac8:	260a      	movs	r6, #10
 8007aca:	4694      	mov	ip, r2
 8007acc:	fb91 f5f6 	sdiv	r5, r1, r6
 8007ad0:	fb06 1415 	mls	r4, r6, r5, r1
 8007ad4:	3430      	adds	r4, #48	; 0x30
 8007ad6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007ada:	460c      	mov	r4, r1
 8007adc:	2c63      	cmp	r4, #99	; 0x63
 8007ade:	f102 32ff 	add.w	r2, r2, #4294967295
 8007ae2:	4629      	mov	r1, r5
 8007ae4:	dcf1      	bgt.n	8007aca <__exponent+0x22>
 8007ae6:	3130      	adds	r1, #48	; 0x30
 8007ae8:	f1ac 0402 	sub.w	r4, ip, #2
 8007aec:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007af0:	1c41      	adds	r1, r0, #1
 8007af2:	4622      	mov	r2, r4
 8007af4:	42ba      	cmp	r2, r7
 8007af6:	d30a      	bcc.n	8007b0e <__exponent+0x66>
 8007af8:	f10d 0209 	add.w	r2, sp, #9
 8007afc:	eba2 020c 	sub.w	r2, r2, ip
 8007b00:	42bc      	cmp	r4, r7
 8007b02:	bf88      	it	hi
 8007b04:	2200      	movhi	r2, #0
 8007b06:	4413      	add	r3, r2
 8007b08:	1a18      	subs	r0, r3, r0
 8007b0a:	b003      	add	sp, #12
 8007b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b0e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007b12:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007b16:	e7ed      	b.n	8007af4 <__exponent+0x4c>
 8007b18:	2330      	movs	r3, #48	; 0x30
 8007b1a:	3130      	adds	r1, #48	; 0x30
 8007b1c:	7083      	strb	r3, [r0, #2]
 8007b1e:	70c1      	strb	r1, [r0, #3]
 8007b20:	1d03      	adds	r3, r0, #4
 8007b22:	e7f1      	b.n	8007b08 <__exponent+0x60>

08007b24 <_printf_float>:
 8007b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b28:	ed2d 8b02 	vpush	{d8}
 8007b2c:	b08d      	sub	sp, #52	; 0x34
 8007b2e:	460c      	mov	r4, r1
 8007b30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007b34:	4616      	mov	r6, r2
 8007b36:	461f      	mov	r7, r3
 8007b38:	4605      	mov	r5, r0
 8007b3a:	f000 fef7 	bl	800892c <_localeconv_r>
 8007b3e:	f8d0 a000 	ldr.w	sl, [r0]
 8007b42:	4650      	mov	r0, sl
 8007b44:	f7f8 fbb4 	bl	80002b0 <strlen>
 8007b48:	2300      	movs	r3, #0
 8007b4a:	930a      	str	r3, [sp, #40]	; 0x28
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	9305      	str	r3, [sp, #20]
 8007b50:	f8d8 3000 	ldr.w	r3, [r8]
 8007b54:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007b58:	3307      	adds	r3, #7
 8007b5a:	f023 0307 	bic.w	r3, r3, #7
 8007b5e:	f103 0208 	add.w	r2, r3, #8
 8007b62:	f8c8 2000 	str.w	r2, [r8]
 8007b66:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b6a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b6e:	9307      	str	r3, [sp, #28]
 8007b70:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b74:	ee08 0a10 	vmov	s16, r0
 8007b78:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007b7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b80:	4b9e      	ldr	r3, [pc, #632]	; (8007dfc <_printf_float+0x2d8>)
 8007b82:	f04f 32ff 	mov.w	r2, #4294967295
 8007b86:	f7f8 fff1 	bl	8000b6c <__aeabi_dcmpun>
 8007b8a:	bb88      	cbnz	r0, 8007bf0 <_printf_float+0xcc>
 8007b8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b90:	4b9a      	ldr	r3, [pc, #616]	; (8007dfc <_printf_float+0x2d8>)
 8007b92:	f04f 32ff 	mov.w	r2, #4294967295
 8007b96:	f7f8 ffcb 	bl	8000b30 <__aeabi_dcmple>
 8007b9a:	bb48      	cbnz	r0, 8007bf0 <_printf_float+0xcc>
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	4640      	mov	r0, r8
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	f7f8 ffba 	bl	8000b1c <__aeabi_dcmplt>
 8007ba8:	b110      	cbz	r0, 8007bb0 <_printf_float+0x8c>
 8007baa:	232d      	movs	r3, #45	; 0x2d
 8007bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bb0:	4a93      	ldr	r2, [pc, #588]	; (8007e00 <_printf_float+0x2dc>)
 8007bb2:	4b94      	ldr	r3, [pc, #592]	; (8007e04 <_printf_float+0x2e0>)
 8007bb4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007bb8:	bf94      	ite	ls
 8007bba:	4690      	movls	r8, r2
 8007bbc:	4698      	movhi	r8, r3
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	6123      	str	r3, [r4, #16]
 8007bc2:	9b05      	ldr	r3, [sp, #20]
 8007bc4:	f023 0304 	bic.w	r3, r3, #4
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	f04f 0900 	mov.w	r9, #0
 8007bce:	9700      	str	r7, [sp, #0]
 8007bd0:	4633      	mov	r3, r6
 8007bd2:	aa0b      	add	r2, sp, #44	; 0x2c
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	f000 f9da 	bl	8007f90 <_printf_common>
 8007bdc:	3001      	adds	r0, #1
 8007bde:	f040 8090 	bne.w	8007d02 <_printf_float+0x1de>
 8007be2:	f04f 30ff 	mov.w	r0, #4294967295
 8007be6:	b00d      	add	sp, #52	; 0x34
 8007be8:	ecbd 8b02 	vpop	{d8}
 8007bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bf0:	4642      	mov	r2, r8
 8007bf2:	464b      	mov	r3, r9
 8007bf4:	4640      	mov	r0, r8
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	f7f8 ffb8 	bl	8000b6c <__aeabi_dcmpun>
 8007bfc:	b140      	cbz	r0, 8007c10 <_printf_float+0xec>
 8007bfe:	464b      	mov	r3, r9
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	bfbc      	itt	lt
 8007c04:	232d      	movlt	r3, #45	; 0x2d
 8007c06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007c0a:	4a7f      	ldr	r2, [pc, #508]	; (8007e08 <_printf_float+0x2e4>)
 8007c0c:	4b7f      	ldr	r3, [pc, #508]	; (8007e0c <_printf_float+0x2e8>)
 8007c0e:	e7d1      	b.n	8007bb4 <_printf_float+0x90>
 8007c10:	6863      	ldr	r3, [r4, #4]
 8007c12:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007c16:	9206      	str	r2, [sp, #24]
 8007c18:	1c5a      	adds	r2, r3, #1
 8007c1a:	d13f      	bne.n	8007c9c <_printf_float+0x178>
 8007c1c:	2306      	movs	r3, #6
 8007c1e:	6063      	str	r3, [r4, #4]
 8007c20:	9b05      	ldr	r3, [sp, #20]
 8007c22:	6861      	ldr	r1, [r4, #4]
 8007c24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007c28:	2300      	movs	r3, #0
 8007c2a:	9303      	str	r3, [sp, #12]
 8007c2c:	ab0a      	add	r3, sp, #40	; 0x28
 8007c2e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007c32:	ab09      	add	r3, sp, #36	; 0x24
 8007c34:	ec49 8b10 	vmov	d0, r8, r9
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	6022      	str	r2, [r4, #0]
 8007c3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007c40:	4628      	mov	r0, r5
 8007c42:	f7ff fecf 	bl	80079e4 <__cvt>
 8007c46:	9b06      	ldr	r3, [sp, #24]
 8007c48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c4a:	2b47      	cmp	r3, #71	; 0x47
 8007c4c:	4680      	mov	r8, r0
 8007c4e:	d108      	bne.n	8007c62 <_printf_float+0x13e>
 8007c50:	1cc8      	adds	r0, r1, #3
 8007c52:	db02      	blt.n	8007c5a <_printf_float+0x136>
 8007c54:	6863      	ldr	r3, [r4, #4]
 8007c56:	4299      	cmp	r1, r3
 8007c58:	dd41      	ble.n	8007cde <_printf_float+0x1ba>
 8007c5a:	f1ab 0302 	sub.w	r3, fp, #2
 8007c5e:	fa5f fb83 	uxtb.w	fp, r3
 8007c62:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c66:	d820      	bhi.n	8007caa <_printf_float+0x186>
 8007c68:	3901      	subs	r1, #1
 8007c6a:	465a      	mov	r2, fp
 8007c6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007c70:	9109      	str	r1, [sp, #36]	; 0x24
 8007c72:	f7ff ff19 	bl	8007aa8 <__exponent>
 8007c76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c78:	1813      	adds	r3, r2, r0
 8007c7a:	2a01      	cmp	r2, #1
 8007c7c:	4681      	mov	r9, r0
 8007c7e:	6123      	str	r3, [r4, #16]
 8007c80:	dc02      	bgt.n	8007c88 <_printf_float+0x164>
 8007c82:	6822      	ldr	r2, [r4, #0]
 8007c84:	07d2      	lsls	r2, r2, #31
 8007c86:	d501      	bpl.n	8007c8c <_printf_float+0x168>
 8007c88:	3301      	adds	r3, #1
 8007c8a:	6123      	str	r3, [r4, #16]
 8007c8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d09c      	beq.n	8007bce <_printf_float+0xaa>
 8007c94:	232d      	movs	r3, #45	; 0x2d
 8007c96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c9a:	e798      	b.n	8007bce <_printf_float+0xaa>
 8007c9c:	9a06      	ldr	r2, [sp, #24]
 8007c9e:	2a47      	cmp	r2, #71	; 0x47
 8007ca0:	d1be      	bne.n	8007c20 <_printf_float+0xfc>
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1bc      	bne.n	8007c20 <_printf_float+0xfc>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e7b9      	b.n	8007c1e <_printf_float+0xfa>
 8007caa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007cae:	d118      	bne.n	8007ce2 <_printf_float+0x1be>
 8007cb0:	2900      	cmp	r1, #0
 8007cb2:	6863      	ldr	r3, [r4, #4]
 8007cb4:	dd0b      	ble.n	8007cce <_printf_float+0x1aa>
 8007cb6:	6121      	str	r1, [r4, #16]
 8007cb8:	b913      	cbnz	r3, 8007cc0 <_printf_float+0x19c>
 8007cba:	6822      	ldr	r2, [r4, #0]
 8007cbc:	07d0      	lsls	r0, r2, #31
 8007cbe:	d502      	bpl.n	8007cc6 <_printf_float+0x1a2>
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	440b      	add	r3, r1
 8007cc4:	6123      	str	r3, [r4, #16]
 8007cc6:	65a1      	str	r1, [r4, #88]	; 0x58
 8007cc8:	f04f 0900 	mov.w	r9, #0
 8007ccc:	e7de      	b.n	8007c8c <_printf_float+0x168>
 8007cce:	b913      	cbnz	r3, 8007cd6 <_printf_float+0x1b2>
 8007cd0:	6822      	ldr	r2, [r4, #0]
 8007cd2:	07d2      	lsls	r2, r2, #31
 8007cd4:	d501      	bpl.n	8007cda <_printf_float+0x1b6>
 8007cd6:	3302      	adds	r3, #2
 8007cd8:	e7f4      	b.n	8007cc4 <_printf_float+0x1a0>
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e7f2      	b.n	8007cc4 <_printf_float+0x1a0>
 8007cde:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ce4:	4299      	cmp	r1, r3
 8007ce6:	db05      	blt.n	8007cf4 <_printf_float+0x1d0>
 8007ce8:	6823      	ldr	r3, [r4, #0]
 8007cea:	6121      	str	r1, [r4, #16]
 8007cec:	07d8      	lsls	r0, r3, #31
 8007cee:	d5ea      	bpl.n	8007cc6 <_printf_float+0x1a2>
 8007cf0:	1c4b      	adds	r3, r1, #1
 8007cf2:	e7e7      	b.n	8007cc4 <_printf_float+0x1a0>
 8007cf4:	2900      	cmp	r1, #0
 8007cf6:	bfd4      	ite	le
 8007cf8:	f1c1 0202 	rsble	r2, r1, #2
 8007cfc:	2201      	movgt	r2, #1
 8007cfe:	4413      	add	r3, r2
 8007d00:	e7e0      	b.n	8007cc4 <_printf_float+0x1a0>
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	055a      	lsls	r2, r3, #21
 8007d06:	d407      	bmi.n	8007d18 <_printf_float+0x1f4>
 8007d08:	6923      	ldr	r3, [r4, #16]
 8007d0a:	4642      	mov	r2, r8
 8007d0c:	4631      	mov	r1, r6
 8007d0e:	4628      	mov	r0, r5
 8007d10:	47b8      	blx	r7
 8007d12:	3001      	adds	r0, #1
 8007d14:	d12c      	bne.n	8007d70 <_printf_float+0x24c>
 8007d16:	e764      	b.n	8007be2 <_printf_float+0xbe>
 8007d18:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d1c:	f240 80e0 	bls.w	8007ee0 <_printf_float+0x3bc>
 8007d20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d24:	2200      	movs	r2, #0
 8007d26:	2300      	movs	r3, #0
 8007d28:	f7f8 feee 	bl	8000b08 <__aeabi_dcmpeq>
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d034      	beq.n	8007d9a <_printf_float+0x276>
 8007d30:	4a37      	ldr	r2, [pc, #220]	; (8007e10 <_printf_float+0x2ec>)
 8007d32:	2301      	movs	r3, #1
 8007d34:	4631      	mov	r1, r6
 8007d36:	4628      	mov	r0, r5
 8007d38:	47b8      	blx	r7
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	f43f af51 	beq.w	8007be2 <_printf_float+0xbe>
 8007d40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d44:	429a      	cmp	r2, r3
 8007d46:	db02      	blt.n	8007d4e <_printf_float+0x22a>
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	07d8      	lsls	r0, r3, #31
 8007d4c:	d510      	bpl.n	8007d70 <_printf_float+0x24c>
 8007d4e:	ee18 3a10 	vmov	r3, s16
 8007d52:	4652      	mov	r2, sl
 8007d54:	4631      	mov	r1, r6
 8007d56:	4628      	mov	r0, r5
 8007d58:	47b8      	blx	r7
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	f43f af41 	beq.w	8007be2 <_printf_float+0xbe>
 8007d60:	f04f 0800 	mov.w	r8, #0
 8007d64:	f104 091a 	add.w	r9, r4, #26
 8007d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	4543      	cmp	r3, r8
 8007d6e:	dc09      	bgt.n	8007d84 <_printf_float+0x260>
 8007d70:	6823      	ldr	r3, [r4, #0]
 8007d72:	079b      	lsls	r3, r3, #30
 8007d74:	f100 8107 	bmi.w	8007f86 <_printf_float+0x462>
 8007d78:	68e0      	ldr	r0, [r4, #12]
 8007d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d7c:	4298      	cmp	r0, r3
 8007d7e:	bfb8      	it	lt
 8007d80:	4618      	movlt	r0, r3
 8007d82:	e730      	b.n	8007be6 <_printf_float+0xc2>
 8007d84:	2301      	movs	r3, #1
 8007d86:	464a      	mov	r2, r9
 8007d88:	4631      	mov	r1, r6
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	47b8      	blx	r7
 8007d8e:	3001      	adds	r0, #1
 8007d90:	f43f af27 	beq.w	8007be2 <_printf_float+0xbe>
 8007d94:	f108 0801 	add.w	r8, r8, #1
 8007d98:	e7e6      	b.n	8007d68 <_printf_float+0x244>
 8007d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	dc39      	bgt.n	8007e14 <_printf_float+0x2f0>
 8007da0:	4a1b      	ldr	r2, [pc, #108]	; (8007e10 <_printf_float+0x2ec>)
 8007da2:	2301      	movs	r3, #1
 8007da4:	4631      	mov	r1, r6
 8007da6:	4628      	mov	r0, r5
 8007da8:	47b8      	blx	r7
 8007daa:	3001      	adds	r0, #1
 8007dac:	f43f af19 	beq.w	8007be2 <_printf_float+0xbe>
 8007db0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007db4:	4313      	orrs	r3, r2
 8007db6:	d102      	bne.n	8007dbe <_printf_float+0x29a>
 8007db8:	6823      	ldr	r3, [r4, #0]
 8007dba:	07d9      	lsls	r1, r3, #31
 8007dbc:	d5d8      	bpl.n	8007d70 <_printf_float+0x24c>
 8007dbe:	ee18 3a10 	vmov	r3, s16
 8007dc2:	4652      	mov	r2, sl
 8007dc4:	4631      	mov	r1, r6
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	47b8      	blx	r7
 8007dca:	3001      	adds	r0, #1
 8007dcc:	f43f af09 	beq.w	8007be2 <_printf_float+0xbe>
 8007dd0:	f04f 0900 	mov.w	r9, #0
 8007dd4:	f104 0a1a 	add.w	sl, r4, #26
 8007dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dda:	425b      	negs	r3, r3
 8007ddc:	454b      	cmp	r3, r9
 8007dde:	dc01      	bgt.n	8007de4 <_printf_float+0x2c0>
 8007de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007de2:	e792      	b.n	8007d0a <_printf_float+0x1e6>
 8007de4:	2301      	movs	r3, #1
 8007de6:	4652      	mov	r2, sl
 8007de8:	4631      	mov	r1, r6
 8007dea:	4628      	mov	r0, r5
 8007dec:	47b8      	blx	r7
 8007dee:	3001      	adds	r0, #1
 8007df0:	f43f aef7 	beq.w	8007be2 <_printf_float+0xbe>
 8007df4:	f109 0901 	add.w	r9, r9, #1
 8007df8:	e7ee      	b.n	8007dd8 <_printf_float+0x2b4>
 8007dfa:	bf00      	nop
 8007dfc:	7fefffff 	.word	0x7fefffff
 8007e00:	0800e341 	.word	0x0800e341
 8007e04:	0800e345 	.word	0x0800e345
 8007e08:	0800e349 	.word	0x0800e349
 8007e0c:	0800e34d 	.word	0x0800e34d
 8007e10:	0800e351 	.word	0x0800e351
 8007e14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	bfa8      	it	ge
 8007e1c:	461a      	movge	r2, r3
 8007e1e:	2a00      	cmp	r2, #0
 8007e20:	4691      	mov	r9, r2
 8007e22:	dc37      	bgt.n	8007e94 <_printf_float+0x370>
 8007e24:	f04f 0b00 	mov.w	fp, #0
 8007e28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e2c:	f104 021a 	add.w	r2, r4, #26
 8007e30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e32:	9305      	str	r3, [sp, #20]
 8007e34:	eba3 0309 	sub.w	r3, r3, r9
 8007e38:	455b      	cmp	r3, fp
 8007e3a:	dc33      	bgt.n	8007ea4 <_printf_float+0x380>
 8007e3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e40:	429a      	cmp	r2, r3
 8007e42:	db3b      	blt.n	8007ebc <_printf_float+0x398>
 8007e44:	6823      	ldr	r3, [r4, #0]
 8007e46:	07da      	lsls	r2, r3, #31
 8007e48:	d438      	bmi.n	8007ebc <_printf_float+0x398>
 8007e4a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007e4e:	eba2 0903 	sub.w	r9, r2, r3
 8007e52:	9b05      	ldr	r3, [sp, #20]
 8007e54:	1ad2      	subs	r2, r2, r3
 8007e56:	4591      	cmp	r9, r2
 8007e58:	bfa8      	it	ge
 8007e5a:	4691      	movge	r9, r2
 8007e5c:	f1b9 0f00 	cmp.w	r9, #0
 8007e60:	dc35      	bgt.n	8007ece <_printf_float+0x3aa>
 8007e62:	f04f 0800 	mov.w	r8, #0
 8007e66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e6a:	f104 0a1a 	add.w	sl, r4, #26
 8007e6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e72:	1a9b      	subs	r3, r3, r2
 8007e74:	eba3 0309 	sub.w	r3, r3, r9
 8007e78:	4543      	cmp	r3, r8
 8007e7a:	f77f af79 	ble.w	8007d70 <_printf_float+0x24c>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	4652      	mov	r2, sl
 8007e82:	4631      	mov	r1, r6
 8007e84:	4628      	mov	r0, r5
 8007e86:	47b8      	blx	r7
 8007e88:	3001      	adds	r0, #1
 8007e8a:	f43f aeaa 	beq.w	8007be2 <_printf_float+0xbe>
 8007e8e:	f108 0801 	add.w	r8, r8, #1
 8007e92:	e7ec      	b.n	8007e6e <_printf_float+0x34a>
 8007e94:	4613      	mov	r3, r2
 8007e96:	4631      	mov	r1, r6
 8007e98:	4642      	mov	r2, r8
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	47b8      	blx	r7
 8007e9e:	3001      	adds	r0, #1
 8007ea0:	d1c0      	bne.n	8007e24 <_printf_float+0x300>
 8007ea2:	e69e      	b.n	8007be2 <_printf_float+0xbe>
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	4631      	mov	r1, r6
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	9205      	str	r2, [sp, #20]
 8007eac:	47b8      	blx	r7
 8007eae:	3001      	adds	r0, #1
 8007eb0:	f43f ae97 	beq.w	8007be2 <_printf_float+0xbe>
 8007eb4:	9a05      	ldr	r2, [sp, #20]
 8007eb6:	f10b 0b01 	add.w	fp, fp, #1
 8007eba:	e7b9      	b.n	8007e30 <_printf_float+0x30c>
 8007ebc:	ee18 3a10 	vmov	r3, s16
 8007ec0:	4652      	mov	r2, sl
 8007ec2:	4631      	mov	r1, r6
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	47b8      	blx	r7
 8007ec8:	3001      	adds	r0, #1
 8007eca:	d1be      	bne.n	8007e4a <_printf_float+0x326>
 8007ecc:	e689      	b.n	8007be2 <_printf_float+0xbe>
 8007ece:	9a05      	ldr	r2, [sp, #20]
 8007ed0:	464b      	mov	r3, r9
 8007ed2:	4442      	add	r2, r8
 8007ed4:	4631      	mov	r1, r6
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	47b8      	blx	r7
 8007eda:	3001      	adds	r0, #1
 8007edc:	d1c1      	bne.n	8007e62 <_printf_float+0x33e>
 8007ede:	e680      	b.n	8007be2 <_printf_float+0xbe>
 8007ee0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ee2:	2a01      	cmp	r2, #1
 8007ee4:	dc01      	bgt.n	8007eea <_printf_float+0x3c6>
 8007ee6:	07db      	lsls	r3, r3, #31
 8007ee8:	d53a      	bpl.n	8007f60 <_printf_float+0x43c>
 8007eea:	2301      	movs	r3, #1
 8007eec:	4642      	mov	r2, r8
 8007eee:	4631      	mov	r1, r6
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	47b8      	blx	r7
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	f43f ae74 	beq.w	8007be2 <_printf_float+0xbe>
 8007efa:	ee18 3a10 	vmov	r3, s16
 8007efe:	4652      	mov	r2, sl
 8007f00:	4631      	mov	r1, r6
 8007f02:	4628      	mov	r0, r5
 8007f04:	47b8      	blx	r7
 8007f06:	3001      	adds	r0, #1
 8007f08:	f43f ae6b 	beq.w	8007be2 <_printf_float+0xbe>
 8007f0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f10:	2200      	movs	r2, #0
 8007f12:	2300      	movs	r3, #0
 8007f14:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007f18:	f7f8 fdf6 	bl	8000b08 <__aeabi_dcmpeq>
 8007f1c:	b9d8      	cbnz	r0, 8007f56 <_printf_float+0x432>
 8007f1e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007f22:	f108 0201 	add.w	r2, r8, #1
 8007f26:	4631      	mov	r1, r6
 8007f28:	4628      	mov	r0, r5
 8007f2a:	47b8      	blx	r7
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	d10e      	bne.n	8007f4e <_printf_float+0x42a>
 8007f30:	e657      	b.n	8007be2 <_printf_float+0xbe>
 8007f32:	2301      	movs	r3, #1
 8007f34:	4652      	mov	r2, sl
 8007f36:	4631      	mov	r1, r6
 8007f38:	4628      	mov	r0, r5
 8007f3a:	47b8      	blx	r7
 8007f3c:	3001      	adds	r0, #1
 8007f3e:	f43f ae50 	beq.w	8007be2 <_printf_float+0xbe>
 8007f42:	f108 0801 	add.w	r8, r8, #1
 8007f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	4543      	cmp	r3, r8
 8007f4c:	dcf1      	bgt.n	8007f32 <_printf_float+0x40e>
 8007f4e:	464b      	mov	r3, r9
 8007f50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f54:	e6da      	b.n	8007d0c <_printf_float+0x1e8>
 8007f56:	f04f 0800 	mov.w	r8, #0
 8007f5a:	f104 0a1a 	add.w	sl, r4, #26
 8007f5e:	e7f2      	b.n	8007f46 <_printf_float+0x422>
 8007f60:	2301      	movs	r3, #1
 8007f62:	4642      	mov	r2, r8
 8007f64:	e7df      	b.n	8007f26 <_printf_float+0x402>
 8007f66:	2301      	movs	r3, #1
 8007f68:	464a      	mov	r2, r9
 8007f6a:	4631      	mov	r1, r6
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	47b8      	blx	r7
 8007f70:	3001      	adds	r0, #1
 8007f72:	f43f ae36 	beq.w	8007be2 <_printf_float+0xbe>
 8007f76:	f108 0801 	add.w	r8, r8, #1
 8007f7a:	68e3      	ldr	r3, [r4, #12]
 8007f7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f7e:	1a5b      	subs	r3, r3, r1
 8007f80:	4543      	cmp	r3, r8
 8007f82:	dcf0      	bgt.n	8007f66 <_printf_float+0x442>
 8007f84:	e6f8      	b.n	8007d78 <_printf_float+0x254>
 8007f86:	f04f 0800 	mov.w	r8, #0
 8007f8a:	f104 0919 	add.w	r9, r4, #25
 8007f8e:	e7f4      	b.n	8007f7a <_printf_float+0x456>

08007f90 <_printf_common>:
 8007f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f94:	4616      	mov	r6, r2
 8007f96:	4699      	mov	r9, r3
 8007f98:	688a      	ldr	r2, [r1, #8]
 8007f9a:	690b      	ldr	r3, [r1, #16]
 8007f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	bfb8      	it	lt
 8007fa4:	4613      	movlt	r3, r2
 8007fa6:	6033      	str	r3, [r6, #0]
 8007fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fac:	4607      	mov	r7, r0
 8007fae:	460c      	mov	r4, r1
 8007fb0:	b10a      	cbz	r2, 8007fb6 <_printf_common+0x26>
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	6033      	str	r3, [r6, #0]
 8007fb6:	6823      	ldr	r3, [r4, #0]
 8007fb8:	0699      	lsls	r1, r3, #26
 8007fba:	bf42      	ittt	mi
 8007fbc:	6833      	ldrmi	r3, [r6, #0]
 8007fbe:	3302      	addmi	r3, #2
 8007fc0:	6033      	strmi	r3, [r6, #0]
 8007fc2:	6825      	ldr	r5, [r4, #0]
 8007fc4:	f015 0506 	ands.w	r5, r5, #6
 8007fc8:	d106      	bne.n	8007fd8 <_printf_common+0x48>
 8007fca:	f104 0a19 	add.w	sl, r4, #25
 8007fce:	68e3      	ldr	r3, [r4, #12]
 8007fd0:	6832      	ldr	r2, [r6, #0]
 8007fd2:	1a9b      	subs	r3, r3, r2
 8007fd4:	42ab      	cmp	r3, r5
 8007fd6:	dc26      	bgt.n	8008026 <_printf_common+0x96>
 8007fd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fdc:	1e13      	subs	r3, r2, #0
 8007fde:	6822      	ldr	r2, [r4, #0]
 8007fe0:	bf18      	it	ne
 8007fe2:	2301      	movne	r3, #1
 8007fe4:	0692      	lsls	r2, r2, #26
 8007fe6:	d42b      	bmi.n	8008040 <_printf_common+0xb0>
 8007fe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fec:	4649      	mov	r1, r9
 8007fee:	4638      	mov	r0, r7
 8007ff0:	47c0      	blx	r8
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	d01e      	beq.n	8008034 <_printf_common+0xa4>
 8007ff6:	6823      	ldr	r3, [r4, #0]
 8007ff8:	6922      	ldr	r2, [r4, #16]
 8007ffa:	f003 0306 	and.w	r3, r3, #6
 8007ffe:	2b04      	cmp	r3, #4
 8008000:	bf02      	ittt	eq
 8008002:	68e5      	ldreq	r5, [r4, #12]
 8008004:	6833      	ldreq	r3, [r6, #0]
 8008006:	1aed      	subeq	r5, r5, r3
 8008008:	68a3      	ldr	r3, [r4, #8]
 800800a:	bf0c      	ite	eq
 800800c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008010:	2500      	movne	r5, #0
 8008012:	4293      	cmp	r3, r2
 8008014:	bfc4      	itt	gt
 8008016:	1a9b      	subgt	r3, r3, r2
 8008018:	18ed      	addgt	r5, r5, r3
 800801a:	2600      	movs	r6, #0
 800801c:	341a      	adds	r4, #26
 800801e:	42b5      	cmp	r5, r6
 8008020:	d11a      	bne.n	8008058 <_printf_common+0xc8>
 8008022:	2000      	movs	r0, #0
 8008024:	e008      	b.n	8008038 <_printf_common+0xa8>
 8008026:	2301      	movs	r3, #1
 8008028:	4652      	mov	r2, sl
 800802a:	4649      	mov	r1, r9
 800802c:	4638      	mov	r0, r7
 800802e:	47c0      	blx	r8
 8008030:	3001      	adds	r0, #1
 8008032:	d103      	bne.n	800803c <_printf_common+0xac>
 8008034:	f04f 30ff 	mov.w	r0, #4294967295
 8008038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800803c:	3501      	adds	r5, #1
 800803e:	e7c6      	b.n	8007fce <_printf_common+0x3e>
 8008040:	18e1      	adds	r1, r4, r3
 8008042:	1c5a      	adds	r2, r3, #1
 8008044:	2030      	movs	r0, #48	; 0x30
 8008046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800804a:	4422      	add	r2, r4
 800804c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008054:	3302      	adds	r3, #2
 8008056:	e7c7      	b.n	8007fe8 <_printf_common+0x58>
 8008058:	2301      	movs	r3, #1
 800805a:	4622      	mov	r2, r4
 800805c:	4649      	mov	r1, r9
 800805e:	4638      	mov	r0, r7
 8008060:	47c0      	blx	r8
 8008062:	3001      	adds	r0, #1
 8008064:	d0e6      	beq.n	8008034 <_printf_common+0xa4>
 8008066:	3601      	adds	r6, #1
 8008068:	e7d9      	b.n	800801e <_printf_common+0x8e>
	...

0800806c <_printf_i>:
 800806c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008070:	7e0f      	ldrb	r7, [r1, #24]
 8008072:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008074:	2f78      	cmp	r7, #120	; 0x78
 8008076:	4691      	mov	r9, r2
 8008078:	4680      	mov	r8, r0
 800807a:	460c      	mov	r4, r1
 800807c:	469a      	mov	sl, r3
 800807e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008082:	d807      	bhi.n	8008094 <_printf_i+0x28>
 8008084:	2f62      	cmp	r7, #98	; 0x62
 8008086:	d80a      	bhi.n	800809e <_printf_i+0x32>
 8008088:	2f00      	cmp	r7, #0
 800808a:	f000 80d4 	beq.w	8008236 <_printf_i+0x1ca>
 800808e:	2f58      	cmp	r7, #88	; 0x58
 8008090:	f000 80c0 	beq.w	8008214 <_printf_i+0x1a8>
 8008094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800809c:	e03a      	b.n	8008114 <_printf_i+0xa8>
 800809e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80080a2:	2b15      	cmp	r3, #21
 80080a4:	d8f6      	bhi.n	8008094 <_printf_i+0x28>
 80080a6:	a101      	add	r1, pc, #4	; (adr r1, 80080ac <_printf_i+0x40>)
 80080a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080ac:	08008105 	.word	0x08008105
 80080b0:	08008119 	.word	0x08008119
 80080b4:	08008095 	.word	0x08008095
 80080b8:	08008095 	.word	0x08008095
 80080bc:	08008095 	.word	0x08008095
 80080c0:	08008095 	.word	0x08008095
 80080c4:	08008119 	.word	0x08008119
 80080c8:	08008095 	.word	0x08008095
 80080cc:	08008095 	.word	0x08008095
 80080d0:	08008095 	.word	0x08008095
 80080d4:	08008095 	.word	0x08008095
 80080d8:	0800821d 	.word	0x0800821d
 80080dc:	08008145 	.word	0x08008145
 80080e0:	080081d7 	.word	0x080081d7
 80080e4:	08008095 	.word	0x08008095
 80080e8:	08008095 	.word	0x08008095
 80080ec:	0800823f 	.word	0x0800823f
 80080f0:	08008095 	.word	0x08008095
 80080f4:	08008145 	.word	0x08008145
 80080f8:	08008095 	.word	0x08008095
 80080fc:	08008095 	.word	0x08008095
 8008100:	080081df 	.word	0x080081df
 8008104:	682b      	ldr	r3, [r5, #0]
 8008106:	1d1a      	adds	r2, r3, #4
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	602a      	str	r2, [r5, #0]
 800810c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008114:	2301      	movs	r3, #1
 8008116:	e09f      	b.n	8008258 <_printf_i+0x1ec>
 8008118:	6820      	ldr	r0, [r4, #0]
 800811a:	682b      	ldr	r3, [r5, #0]
 800811c:	0607      	lsls	r7, r0, #24
 800811e:	f103 0104 	add.w	r1, r3, #4
 8008122:	6029      	str	r1, [r5, #0]
 8008124:	d501      	bpl.n	800812a <_printf_i+0xbe>
 8008126:	681e      	ldr	r6, [r3, #0]
 8008128:	e003      	b.n	8008132 <_printf_i+0xc6>
 800812a:	0646      	lsls	r6, r0, #25
 800812c:	d5fb      	bpl.n	8008126 <_printf_i+0xba>
 800812e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008132:	2e00      	cmp	r6, #0
 8008134:	da03      	bge.n	800813e <_printf_i+0xd2>
 8008136:	232d      	movs	r3, #45	; 0x2d
 8008138:	4276      	negs	r6, r6
 800813a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800813e:	485a      	ldr	r0, [pc, #360]	; (80082a8 <_printf_i+0x23c>)
 8008140:	230a      	movs	r3, #10
 8008142:	e012      	b.n	800816a <_printf_i+0xfe>
 8008144:	682b      	ldr	r3, [r5, #0]
 8008146:	6820      	ldr	r0, [r4, #0]
 8008148:	1d19      	adds	r1, r3, #4
 800814a:	6029      	str	r1, [r5, #0]
 800814c:	0605      	lsls	r5, r0, #24
 800814e:	d501      	bpl.n	8008154 <_printf_i+0xe8>
 8008150:	681e      	ldr	r6, [r3, #0]
 8008152:	e002      	b.n	800815a <_printf_i+0xee>
 8008154:	0641      	lsls	r1, r0, #25
 8008156:	d5fb      	bpl.n	8008150 <_printf_i+0xe4>
 8008158:	881e      	ldrh	r6, [r3, #0]
 800815a:	4853      	ldr	r0, [pc, #332]	; (80082a8 <_printf_i+0x23c>)
 800815c:	2f6f      	cmp	r7, #111	; 0x6f
 800815e:	bf0c      	ite	eq
 8008160:	2308      	moveq	r3, #8
 8008162:	230a      	movne	r3, #10
 8008164:	2100      	movs	r1, #0
 8008166:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800816a:	6865      	ldr	r5, [r4, #4]
 800816c:	60a5      	str	r5, [r4, #8]
 800816e:	2d00      	cmp	r5, #0
 8008170:	bfa2      	ittt	ge
 8008172:	6821      	ldrge	r1, [r4, #0]
 8008174:	f021 0104 	bicge.w	r1, r1, #4
 8008178:	6021      	strge	r1, [r4, #0]
 800817a:	b90e      	cbnz	r6, 8008180 <_printf_i+0x114>
 800817c:	2d00      	cmp	r5, #0
 800817e:	d04b      	beq.n	8008218 <_printf_i+0x1ac>
 8008180:	4615      	mov	r5, r2
 8008182:	fbb6 f1f3 	udiv	r1, r6, r3
 8008186:	fb03 6711 	mls	r7, r3, r1, r6
 800818a:	5dc7      	ldrb	r7, [r0, r7]
 800818c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008190:	4637      	mov	r7, r6
 8008192:	42bb      	cmp	r3, r7
 8008194:	460e      	mov	r6, r1
 8008196:	d9f4      	bls.n	8008182 <_printf_i+0x116>
 8008198:	2b08      	cmp	r3, #8
 800819a:	d10b      	bne.n	80081b4 <_printf_i+0x148>
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	07de      	lsls	r6, r3, #31
 80081a0:	d508      	bpl.n	80081b4 <_printf_i+0x148>
 80081a2:	6923      	ldr	r3, [r4, #16]
 80081a4:	6861      	ldr	r1, [r4, #4]
 80081a6:	4299      	cmp	r1, r3
 80081a8:	bfde      	ittt	le
 80081aa:	2330      	movle	r3, #48	; 0x30
 80081ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081b4:	1b52      	subs	r2, r2, r5
 80081b6:	6122      	str	r2, [r4, #16]
 80081b8:	f8cd a000 	str.w	sl, [sp]
 80081bc:	464b      	mov	r3, r9
 80081be:	aa03      	add	r2, sp, #12
 80081c0:	4621      	mov	r1, r4
 80081c2:	4640      	mov	r0, r8
 80081c4:	f7ff fee4 	bl	8007f90 <_printf_common>
 80081c8:	3001      	adds	r0, #1
 80081ca:	d14a      	bne.n	8008262 <_printf_i+0x1f6>
 80081cc:	f04f 30ff 	mov.w	r0, #4294967295
 80081d0:	b004      	add	sp, #16
 80081d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081d6:	6823      	ldr	r3, [r4, #0]
 80081d8:	f043 0320 	orr.w	r3, r3, #32
 80081dc:	6023      	str	r3, [r4, #0]
 80081de:	4833      	ldr	r0, [pc, #204]	; (80082ac <_printf_i+0x240>)
 80081e0:	2778      	movs	r7, #120	; 0x78
 80081e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	6829      	ldr	r1, [r5, #0]
 80081ea:	061f      	lsls	r7, r3, #24
 80081ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80081f0:	d402      	bmi.n	80081f8 <_printf_i+0x18c>
 80081f2:	065f      	lsls	r7, r3, #25
 80081f4:	bf48      	it	mi
 80081f6:	b2b6      	uxthmi	r6, r6
 80081f8:	07df      	lsls	r7, r3, #31
 80081fa:	bf48      	it	mi
 80081fc:	f043 0320 	orrmi.w	r3, r3, #32
 8008200:	6029      	str	r1, [r5, #0]
 8008202:	bf48      	it	mi
 8008204:	6023      	strmi	r3, [r4, #0]
 8008206:	b91e      	cbnz	r6, 8008210 <_printf_i+0x1a4>
 8008208:	6823      	ldr	r3, [r4, #0]
 800820a:	f023 0320 	bic.w	r3, r3, #32
 800820e:	6023      	str	r3, [r4, #0]
 8008210:	2310      	movs	r3, #16
 8008212:	e7a7      	b.n	8008164 <_printf_i+0xf8>
 8008214:	4824      	ldr	r0, [pc, #144]	; (80082a8 <_printf_i+0x23c>)
 8008216:	e7e4      	b.n	80081e2 <_printf_i+0x176>
 8008218:	4615      	mov	r5, r2
 800821a:	e7bd      	b.n	8008198 <_printf_i+0x12c>
 800821c:	682b      	ldr	r3, [r5, #0]
 800821e:	6826      	ldr	r6, [r4, #0]
 8008220:	6961      	ldr	r1, [r4, #20]
 8008222:	1d18      	adds	r0, r3, #4
 8008224:	6028      	str	r0, [r5, #0]
 8008226:	0635      	lsls	r5, r6, #24
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	d501      	bpl.n	8008230 <_printf_i+0x1c4>
 800822c:	6019      	str	r1, [r3, #0]
 800822e:	e002      	b.n	8008236 <_printf_i+0x1ca>
 8008230:	0670      	lsls	r0, r6, #25
 8008232:	d5fb      	bpl.n	800822c <_printf_i+0x1c0>
 8008234:	8019      	strh	r1, [r3, #0]
 8008236:	2300      	movs	r3, #0
 8008238:	6123      	str	r3, [r4, #16]
 800823a:	4615      	mov	r5, r2
 800823c:	e7bc      	b.n	80081b8 <_printf_i+0x14c>
 800823e:	682b      	ldr	r3, [r5, #0]
 8008240:	1d1a      	adds	r2, r3, #4
 8008242:	602a      	str	r2, [r5, #0]
 8008244:	681d      	ldr	r5, [r3, #0]
 8008246:	6862      	ldr	r2, [r4, #4]
 8008248:	2100      	movs	r1, #0
 800824a:	4628      	mov	r0, r5
 800824c:	f7f7 ffe0 	bl	8000210 <memchr>
 8008250:	b108      	cbz	r0, 8008256 <_printf_i+0x1ea>
 8008252:	1b40      	subs	r0, r0, r5
 8008254:	6060      	str	r0, [r4, #4]
 8008256:	6863      	ldr	r3, [r4, #4]
 8008258:	6123      	str	r3, [r4, #16]
 800825a:	2300      	movs	r3, #0
 800825c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008260:	e7aa      	b.n	80081b8 <_printf_i+0x14c>
 8008262:	6923      	ldr	r3, [r4, #16]
 8008264:	462a      	mov	r2, r5
 8008266:	4649      	mov	r1, r9
 8008268:	4640      	mov	r0, r8
 800826a:	47d0      	blx	sl
 800826c:	3001      	adds	r0, #1
 800826e:	d0ad      	beq.n	80081cc <_printf_i+0x160>
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	079b      	lsls	r3, r3, #30
 8008274:	d413      	bmi.n	800829e <_printf_i+0x232>
 8008276:	68e0      	ldr	r0, [r4, #12]
 8008278:	9b03      	ldr	r3, [sp, #12]
 800827a:	4298      	cmp	r0, r3
 800827c:	bfb8      	it	lt
 800827e:	4618      	movlt	r0, r3
 8008280:	e7a6      	b.n	80081d0 <_printf_i+0x164>
 8008282:	2301      	movs	r3, #1
 8008284:	4632      	mov	r2, r6
 8008286:	4649      	mov	r1, r9
 8008288:	4640      	mov	r0, r8
 800828a:	47d0      	blx	sl
 800828c:	3001      	adds	r0, #1
 800828e:	d09d      	beq.n	80081cc <_printf_i+0x160>
 8008290:	3501      	adds	r5, #1
 8008292:	68e3      	ldr	r3, [r4, #12]
 8008294:	9903      	ldr	r1, [sp, #12]
 8008296:	1a5b      	subs	r3, r3, r1
 8008298:	42ab      	cmp	r3, r5
 800829a:	dcf2      	bgt.n	8008282 <_printf_i+0x216>
 800829c:	e7eb      	b.n	8008276 <_printf_i+0x20a>
 800829e:	2500      	movs	r5, #0
 80082a0:	f104 0619 	add.w	r6, r4, #25
 80082a4:	e7f5      	b.n	8008292 <_printf_i+0x226>
 80082a6:	bf00      	nop
 80082a8:	0800e353 	.word	0x0800e353
 80082ac:	0800e364 	.word	0x0800e364

080082b0 <_scanf_float>:
 80082b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b4:	b087      	sub	sp, #28
 80082b6:	4617      	mov	r7, r2
 80082b8:	9303      	str	r3, [sp, #12]
 80082ba:	688b      	ldr	r3, [r1, #8]
 80082bc:	1e5a      	subs	r2, r3, #1
 80082be:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80082c2:	bf83      	ittte	hi
 80082c4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80082c8:	195b      	addhi	r3, r3, r5
 80082ca:	9302      	strhi	r3, [sp, #8]
 80082cc:	2300      	movls	r3, #0
 80082ce:	bf86      	itte	hi
 80082d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80082d4:	608b      	strhi	r3, [r1, #8]
 80082d6:	9302      	strls	r3, [sp, #8]
 80082d8:	680b      	ldr	r3, [r1, #0]
 80082da:	468b      	mov	fp, r1
 80082dc:	2500      	movs	r5, #0
 80082de:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80082e2:	f84b 3b1c 	str.w	r3, [fp], #28
 80082e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80082ea:	4680      	mov	r8, r0
 80082ec:	460c      	mov	r4, r1
 80082ee:	465e      	mov	r6, fp
 80082f0:	46aa      	mov	sl, r5
 80082f2:	46a9      	mov	r9, r5
 80082f4:	9501      	str	r5, [sp, #4]
 80082f6:	68a2      	ldr	r2, [r4, #8]
 80082f8:	b152      	cbz	r2, 8008310 <_scanf_float+0x60>
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	2b4e      	cmp	r3, #78	; 0x4e
 8008300:	d864      	bhi.n	80083cc <_scanf_float+0x11c>
 8008302:	2b40      	cmp	r3, #64	; 0x40
 8008304:	d83c      	bhi.n	8008380 <_scanf_float+0xd0>
 8008306:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800830a:	b2c8      	uxtb	r0, r1
 800830c:	280e      	cmp	r0, #14
 800830e:	d93a      	bls.n	8008386 <_scanf_float+0xd6>
 8008310:	f1b9 0f00 	cmp.w	r9, #0
 8008314:	d003      	beq.n	800831e <_scanf_float+0x6e>
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800831c:	6023      	str	r3, [r4, #0]
 800831e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008322:	f1ba 0f01 	cmp.w	sl, #1
 8008326:	f200 8113 	bhi.w	8008550 <_scanf_float+0x2a0>
 800832a:	455e      	cmp	r6, fp
 800832c:	f200 8105 	bhi.w	800853a <_scanf_float+0x28a>
 8008330:	2501      	movs	r5, #1
 8008332:	4628      	mov	r0, r5
 8008334:	b007      	add	sp, #28
 8008336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800833a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800833e:	2a0d      	cmp	r2, #13
 8008340:	d8e6      	bhi.n	8008310 <_scanf_float+0x60>
 8008342:	a101      	add	r1, pc, #4	; (adr r1, 8008348 <_scanf_float+0x98>)
 8008344:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008348:	08008487 	.word	0x08008487
 800834c:	08008311 	.word	0x08008311
 8008350:	08008311 	.word	0x08008311
 8008354:	08008311 	.word	0x08008311
 8008358:	080084e7 	.word	0x080084e7
 800835c:	080084bf 	.word	0x080084bf
 8008360:	08008311 	.word	0x08008311
 8008364:	08008311 	.word	0x08008311
 8008368:	08008495 	.word	0x08008495
 800836c:	08008311 	.word	0x08008311
 8008370:	08008311 	.word	0x08008311
 8008374:	08008311 	.word	0x08008311
 8008378:	08008311 	.word	0x08008311
 800837c:	0800844d 	.word	0x0800844d
 8008380:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008384:	e7db      	b.n	800833e <_scanf_float+0x8e>
 8008386:	290e      	cmp	r1, #14
 8008388:	d8c2      	bhi.n	8008310 <_scanf_float+0x60>
 800838a:	a001      	add	r0, pc, #4	; (adr r0, 8008390 <_scanf_float+0xe0>)
 800838c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008390:	0800843f 	.word	0x0800843f
 8008394:	08008311 	.word	0x08008311
 8008398:	0800843f 	.word	0x0800843f
 800839c:	080084d3 	.word	0x080084d3
 80083a0:	08008311 	.word	0x08008311
 80083a4:	080083ed 	.word	0x080083ed
 80083a8:	08008429 	.word	0x08008429
 80083ac:	08008429 	.word	0x08008429
 80083b0:	08008429 	.word	0x08008429
 80083b4:	08008429 	.word	0x08008429
 80083b8:	08008429 	.word	0x08008429
 80083bc:	08008429 	.word	0x08008429
 80083c0:	08008429 	.word	0x08008429
 80083c4:	08008429 	.word	0x08008429
 80083c8:	08008429 	.word	0x08008429
 80083cc:	2b6e      	cmp	r3, #110	; 0x6e
 80083ce:	d809      	bhi.n	80083e4 <_scanf_float+0x134>
 80083d0:	2b60      	cmp	r3, #96	; 0x60
 80083d2:	d8b2      	bhi.n	800833a <_scanf_float+0x8a>
 80083d4:	2b54      	cmp	r3, #84	; 0x54
 80083d6:	d077      	beq.n	80084c8 <_scanf_float+0x218>
 80083d8:	2b59      	cmp	r3, #89	; 0x59
 80083da:	d199      	bne.n	8008310 <_scanf_float+0x60>
 80083dc:	2d07      	cmp	r5, #7
 80083de:	d197      	bne.n	8008310 <_scanf_float+0x60>
 80083e0:	2508      	movs	r5, #8
 80083e2:	e029      	b.n	8008438 <_scanf_float+0x188>
 80083e4:	2b74      	cmp	r3, #116	; 0x74
 80083e6:	d06f      	beq.n	80084c8 <_scanf_float+0x218>
 80083e8:	2b79      	cmp	r3, #121	; 0x79
 80083ea:	e7f6      	b.n	80083da <_scanf_float+0x12a>
 80083ec:	6821      	ldr	r1, [r4, #0]
 80083ee:	05c8      	lsls	r0, r1, #23
 80083f0:	d51a      	bpl.n	8008428 <_scanf_float+0x178>
 80083f2:	9b02      	ldr	r3, [sp, #8]
 80083f4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80083f8:	6021      	str	r1, [r4, #0]
 80083fa:	f109 0901 	add.w	r9, r9, #1
 80083fe:	b11b      	cbz	r3, 8008408 <_scanf_float+0x158>
 8008400:	3b01      	subs	r3, #1
 8008402:	3201      	adds	r2, #1
 8008404:	9302      	str	r3, [sp, #8]
 8008406:	60a2      	str	r2, [r4, #8]
 8008408:	68a3      	ldr	r3, [r4, #8]
 800840a:	3b01      	subs	r3, #1
 800840c:	60a3      	str	r3, [r4, #8]
 800840e:	6923      	ldr	r3, [r4, #16]
 8008410:	3301      	adds	r3, #1
 8008412:	6123      	str	r3, [r4, #16]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	3b01      	subs	r3, #1
 8008418:	2b00      	cmp	r3, #0
 800841a:	607b      	str	r3, [r7, #4]
 800841c:	f340 8084 	ble.w	8008528 <_scanf_float+0x278>
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	3301      	adds	r3, #1
 8008424:	603b      	str	r3, [r7, #0]
 8008426:	e766      	b.n	80082f6 <_scanf_float+0x46>
 8008428:	eb1a 0f05 	cmn.w	sl, r5
 800842c:	f47f af70 	bne.w	8008310 <_scanf_float+0x60>
 8008430:	6822      	ldr	r2, [r4, #0]
 8008432:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008436:	6022      	str	r2, [r4, #0]
 8008438:	f806 3b01 	strb.w	r3, [r6], #1
 800843c:	e7e4      	b.n	8008408 <_scanf_float+0x158>
 800843e:	6822      	ldr	r2, [r4, #0]
 8008440:	0610      	lsls	r0, r2, #24
 8008442:	f57f af65 	bpl.w	8008310 <_scanf_float+0x60>
 8008446:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800844a:	e7f4      	b.n	8008436 <_scanf_float+0x186>
 800844c:	f1ba 0f00 	cmp.w	sl, #0
 8008450:	d10e      	bne.n	8008470 <_scanf_float+0x1c0>
 8008452:	f1b9 0f00 	cmp.w	r9, #0
 8008456:	d10e      	bne.n	8008476 <_scanf_float+0x1c6>
 8008458:	6822      	ldr	r2, [r4, #0]
 800845a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800845e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008462:	d108      	bne.n	8008476 <_scanf_float+0x1c6>
 8008464:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008468:	6022      	str	r2, [r4, #0]
 800846a:	f04f 0a01 	mov.w	sl, #1
 800846e:	e7e3      	b.n	8008438 <_scanf_float+0x188>
 8008470:	f1ba 0f02 	cmp.w	sl, #2
 8008474:	d055      	beq.n	8008522 <_scanf_float+0x272>
 8008476:	2d01      	cmp	r5, #1
 8008478:	d002      	beq.n	8008480 <_scanf_float+0x1d0>
 800847a:	2d04      	cmp	r5, #4
 800847c:	f47f af48 	bne.w	8008310 <_scanf_float+0x60>
 8008480:	3501      	adds	r5, #1
 8008482:	b2ed      	uxtb	r5, r5
 8008484:	e7d8      	b.n	8008438 <_scanf_float+0x188>
 8008486:	f1ba 0f01 	cmp.w	sl, #1
 800848a:	f47f af41 	bne.w	8008310 <_scanf_float+0x60>
 800848e:	f04f 0a02 	mov.w	sl, #2
 8008492:	e7d1      	b.n	8008438 <_scanf_float+0x188>
 8008494:	b97d      	cbnz	r5, 80084b6 <_scanf_float+0x206>
 8008496:	f1b9 0f00 	cmp.w	r9, #0
 800849a:	f47f af3c 	bne.w	8008316 <_scanf_float+0x66>
 800849e:	6822      	ldr	r2, [r4, #0]
 80084a0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80084a4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80084a8:	f47f af39 	bne.w	800831e <_scanf_float+0x6e>
 80084ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80084b0:	6022      	str	r2, [r4, #0]
 80084b2:	2501      	movs	r5, #1
 80084b4:	e7c0      	b.n	8008438 <_scanf_float+0x188>
 80084b6:	2d03      	cmp	r5, #3
 80084b8:	d0e2      	beq.n	8008480 <_scanf_float+0x1d0>
 80084ba:	2d05      	cmp	r5, #5
 80084bc:	e7de      	b.n	800847c <_scanf_float+0x1cc>
 80084be:	2d02      	cmp	r5, #2
 80084c0:	f47f af26 	bne.w	8008310 <_scanf_float+0x60>
 80084c4:	2503      	movs	r5, #3
 80084c6:	e7b7      	b.n	8008438 <_scanf_float+0x188>
 80084c8:	2d06      	cmp	r5, #6
 80084ca:	f47f af21 	bne.w	8008310 <_scanf_float+0x60>
 80084ce:	2507      	movs	r5, #7
 80084d0:	e7b2      	b.n	8008438 <_scanf_float+0x188>
 80084d2:	6822      	ldr	r2, [r4, #0]
 80084d4:	0591      	lsls	r1, r2, #22
 80084d6:	f57f af1b 	bpl.w	8008310 <_scanf_float+0x60>
 80084da:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80084de:	6022      	str	r2, [r4, #0]
 80084e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80084e4:	e7a8      	b.n	8008438 <_scanf_float+0x188>
 80084e6:	6822      	ldr	r2, [r4, #0]
 80084e8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80084ec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80084f0:	d006      	beq.n	8008500 <_scanf_float+0x250>
 80084f2:	0550      	lsls	r0, r2, #21
 80084f4:	f57f af0c 	bpl.w	8008310 <_scanf_float+0x60>
 80084f8:	f1b9 0f00 	cmp.w	r9, #0
 80084fc:	f43f af0f 	beq.w	800831e <_scanf_float+0x6e>
 8008500:	0591      	lsls	r1, r2, #22
 8008502:	bf58      	it	pl
 8008504:	9901      	ldrpl	r1, [sp, #4]
 8008506:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800850a:	bf58      	it	pl
 800850c:	eba9 0101 	subpl.w	r1, r9, r1
 8008510:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008514:	bf58      	it	pl
 8008516:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800851a:	6022      	str	r2, [r4, #0]
 800851c:	f04f 0900 	mov.w	r9, #0
 8008520:	e78a      	b.n	8008438 <_scanf_float+0x188>
 8008522:	f04f 0a03 	mov.w	sl, #3
 8008526:	e787      	b.n	8008438 <_scanf_float+0x188>
 8008528:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800852c:	4639      	mov	r1, r7
 800852e:	4640      	mov	r0, r8
 8008530:	4798      	blx	r3
 8008532:	2800      	cmp	r0, #0
 8008534:	f43f aedf 	beq.w	80082f6 <_scanf_float+0x46>
 8008538:	e6ea      	b.n	8008310 <_scanf_float+0x60>
 800853a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800853e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008542:	463a      	mov	r2, r7
 8008544:	4640      	mov	r0, r8
 8008546:	4798      	blx	r3
 8008548:	6923      	ldr	r3, [r4, #16]
 800854a:	3b01      	subs	r3, #1
 800854c:	6123      	str	r3, [r4, #16]
 800854e:	e6ec      	b.n	800832a <_scanf_float+0x7a>
 8008550:	1e6b      	subs	r3, r5, #1
 8008552:	2b06      	cmp	r3, #6
 8008554:	d825      	bhi.n	80085a2 <_scanf_float+0x2f2>
 8008556:	2d02      	cmp	r5, #2
 8008558:	d836      	bhi.n	80085c8 <_scanf_float+0x318>
 800855a:	455e      	cmp	r6, fp
 800855c:	f67f aee8 	bls.w	8008330 <_scanf_float+0x80>
 8008560:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008564:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008568:	463a      	mov	r2, r7
 800856a:	4640      	mov	r0, r8
 800856c:	4798      	blx	r3
 800856e:	6923      	ldr	r3, [r4, #16]
 8008570:	3b01      	subs	r3, #1
 8008572:	6123      	str	r3, [r4, #16]
 8008574:	e7f1      	b.n	800855a <_scanf_float+0x2aa>
 8008576:	9802      	ldr	r0, [sp, #8]
 8008578:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800857c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008580:	9002      	str	r0, [sp, #8]
 8008582:	463a      	mov	r2, r7
 8008584:	4640      	mov	r0, r8
 8008586:	4798      	blx	r3
 8008588:	6923      	ldr	r3, [r4, #16]
 800858a:	3b01      	subs	r3, #1
 800858c:	6123      	str	r3, [r4, #16]
 800858e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008592:	fa5f fa8a 	uxtb.w	sl, sl
 8008596:	f1ba 0f02 	cmp.w	sl, #2
 800859a:	d1ec      	bne.n	8008576 <_scanf_float+0x2c6>
 800859c:	3d03      	subs	r5, #3
 800859e:	b2ed      	uxtb	r5, r5
 80085a0:	1b76      	subs	r6, r6, r5
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	05da      	lsls	r2, r3, #23
 80085a6:	d52f      	bpl.n	8008608 <_scanf_float+0x358>
 80085a8:	055b      	lsls	r3, r3, #21
 80085aa:	d510      	bpl.n	80085ce <_scanf_float+0x31e>
 80085ac:	455e      	cmp	r6, fp
 80085ae:	f67f aebf 	bls.w	8008330 <_scanf_float+0x80>
 80085b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80085ba:	463a      	mov	r2, r7
 80085bc:	4640      	mov	r0, r8
 80085be:	4798      	blx	r3
 80085c0:	6923      	ldr	r3, [r4, #16]
 80085c2:	3b01      	subs	r3, #1
 80085c4:	6123      	str	r3, [r4, #16]
 80085c6:	e7f1      	b.n	80085ac <_scanf_float+0x2fc>
 80085c8:	46aa      	mov	sl, r5
 80085ca:	9602      	str	r6, [sp, #8]
 80085cc:	e7df      	b.n	800858e <_scanf_float+0x2de>
 80085ce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80085d2:	6923      	ldr	r3, [r4, #16]
 80085d4:	2965      	cmp	r1, #101	; 0x65
 80085d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80085da:	f106 35ff 	add.w	r5, r6, #4294967295
 80085de:	6123      	str	r3, [r4, #16]
 80085e0:	d00c      	beq.n	80085fc <_scanf_float+0x34c>
 80085e2:	2945      	cmp	r1, #69	; 0x45
 80085e4:	d00a      	beq.n	80085fc <_scanf_float+0x34c>
 80085e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085ea:	463a      	mov	r2, r7
 80085ec:	4640      	mov	r0, r8
 80085ee:	4798      	blx	r3
 80085f0:	6923      	ldr	r3, [r4, #16]
 80085f2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80085f6:	3b01      	subs	r3, #1
 80085f8:	1eb5      	subs	r5, r6, #2
 80085fa:	6123      	str	r3, [r4, #16]
 80085fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008600:	463a      	mov	r2, r7
 8008602:	4640      	mov	r0, r8
 8008604:	4798      	blx	r3
 8008606:	462e      	mov	r6, r5
 8008608:	6825      	ldr	r5, [r4, #0]
 800860a:	f015 0510 	ands.w	r5, r5, #16
 800860e:	d158      	bne.n	80086c2 <_scanf_float+0x412>
 8008610:	7035      	strb	r5, [r6, #0]
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800861c:	d11c      	bne.n	8008658 <_scanf_float+0x3a8>
 800861e:	9b01      	ldr	r3, [sp, #4]
 8008620:	454b      	cmp	r3, r9
 8008622:	eba3 0209 	sub.w	r2, r3, r9
 8008626:	d124      	bne.n	8008672 <_scanf_float+0x3c2>
 8008628:	2200      	movs	r2, #0
 800862a:	4659      	mov	r1, fp
 800862c:	4640      	mov	r0, r8
 800862e:	f002 fc3f 	bl	800aeb0 <_strtod_r>
 8008632:	9b03      	ldr	r3, [sp, #12]
 8008634:	6821      	ldr	r1, [r4, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f011 0f02 	tst.w	r1, #2
 800863c:	ec57 6b10 	vmov	r6, r7, d0
 8008640:	f103 0204 	add.w	r2, r3, #4
 8008644:	d020      	beq.n	8008688 <_scanf_float+0x3d8>
 8008646:	9903      	ldr	r1, [sp, #12]
 8008648:	600a      	str	r2, [r1, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	e9c3 6700 	strd	r6, r7, [r3]
 8008650:	68e3      	ldr	r3, [r4, #12]
 8008652:	3301      	adds	r3, #1
 8008654:	60e3      	str	r3, [r4, #12]
 8008656:	e66c      	b.n	8008332 <_scanf_float+0x82>
 8008658:	9b04      	ldr	r3, [sp, #16]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d0e4      	beq.n	8008628 <_scanf_float+0x378>
 800865e:	9905      	ldr	r1, [sp, #20]
 8008660:	230a      	movs	r3, #10
 8008662:	462a      	mov	r2, r5
 8008664:	3101      	adds	r1, #1
 8008666:	4640      	mov	r0, r8
 8008668:	f002 fcaa 	bl	800afc0 <_strtol_r>
 800866c:	9b04      	ldr	r3, [sp, #16]
 800866e:	9e05      	ldr	r6, [sp, #20]
 8008670:	1ac2      	subs	r2, r0, r3
 8008672:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008676:	429e      	cmp	r6, r3
 8008678:	bf28      	it	cs
 800867a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800867e:	4912      	ldr	r1, [pc, #72]	; (80086c8 <_scanf_float+0x418>)
 8008680:	4630      	mov	r0, r6
 8008682:	f000 f8e7 	bl	8008854 <siprintf>
 8008686:	e7cf      	b.n	8008628 <_scanf_float+0x378>
 8008688:	f011 0f04 	tst.w	r1, #4
 800868c:	9903      	ldr	r1, [sp, #12]
 800868e:	600a      	str	r2, [r1, #0]
 8008690:	d1db      	bne.n	800864a <_scanf_float+0x39a>
 8008692:	f8d3 8000 	ldr.w	r8, [r3]
 8008696:	ee10 2a10 	vmov	r2, s0
 800869a:	ee10 0a10 	vmov	r0, s0
 800869e:	463b      	mov	r3, r7
 80086a0:	4639      	mov	r1, r7
 80086a2:	f7f8 fa63 	bl	8000b6c <__aeabi_dcmpun>
 80086a6:	b128      	cbz	r0, 80086b4 <_scanf_float+0x404>
 80086a8:	4808      	ldr	r0, [pc, #32]	; (80086cc <_scanf_float+0x41c>)
 80086aa:	f000 f9c5 	bl	8008a38 <nanf>
 80086ae:	ed88 0a00 	vstr	s0, [r8]
 80086b2:	e7cd      	b.n	8008650 <_scanf_float+0x3a0>
 80086b4:	4630      	mov	r0, r6
 80086b6:	4639      	mov	r1, r7
 80086b8:	f7f8 fab6 	bl	8000c28 <__aeabi_d2f>
 80086bc:	f8c8 0000 	str.w	r0, [r8]
 80086c0:	e7c6      	b.n	8008650 <_scanf_float+0x3a0>
 80086c2:	2500      	movs	r5, #0
 80086c4:	e635      	b.n	8008332 <_scanf_float+0x82>
 80086c6:	bf00      	nop
 80086c8:	0800e375 	.word	0x0800e375
 80086cc:	0800e705 	.word	0x0800e705

080086d0 <std>:
 80086d0:	2300      	movs	r3, #0
 80086d2:	b510      	push	{r4, lr}
 80086d4:	4604      	mov	r4, r0
 80086d6:	e9c0 3300 	strd	r3, r3, [r0]
 80086da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086de:	6083      	str	r3, [r0, #8]
 80086e0:	8181      	strh	r1, [r0, #12]
 80086e2:	6643      	str	r3, [r0, #100]	; 0x64
 80086e4:	81c2      	strh	r2, [r0, #14]
 80086e6:	6183      	str	r3, [r0, #24]
 80086e8:	4619      	mov	r1, r3
 80086ea:	2208      	movs	r2, #8
 80086ec:	305c      	adds	r0, #92	; 0x5c
 80086ee:	f000 f914 	bl	800891a <memset>
 80086f2:	4b0d      	ldr	r3, [pc, #52]	; (8008728 <std+0x58>)
 80086f4:	6263      	str	r3, [r4, #36]	; 0x24
 80086f6:	4b0d      	ldr	r3, [pc, #52]	; (800872c <std+0x5c>)
 80086f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80086fa:	4b0d      	ldr	r3, [pc, #52]	; (8008730 <std+0x60>)
 80086fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80086fe:	4b0d      	ldr	r3, [pc, #52]	; (8008734 <std+0x64>)
 8008700:	6323      	str	r3, [r4, #48]	; 0x30
 8008702:	4b0d      	ldr	r3, [pc, #52]	; (8008738 <std+0x68>)
 8008704:	6224      	str	r4, [r4, #32]
 8008706:	429c      	cmp	r4, r3
 8008708:	d006      	beq.n	8008718 <std+0x48>
 800870a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800870e:	4294      	cmp	r4, r2
 8008710:	d002      	beq.n	8008718 <std+0x48>
 8008712:	33d0      	adds	r3, #208	; 0xd0
 8008714:	429c      	cmp	r4, r3
 8008716:	d105      	bne.n	8008724 <std+0x54>
 8008718:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800871c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008720:	f000 b978 	b.w	8008a14 <__retarget_lock_init_recursive>
 8008724:	bd10      	pop	{r4, pc}
 8008726:	bf00      	nop
 8008728:	08008895 	.word	0x08008895
 800872c:	080088b7 	.word	0x080088b7
 8008730:	080088ef 	.word	0x080088ef
 8008734:	08008913 	.word	0x08008913
 8008738:	200050c0 	.word	0x200050c0

0800873c <stdio_exit_handler>:
 800873c:	4a02      	ldr	r2, [pc, #8]	; (8008748 <stdio_exit_handler+0xc>)
 800873e:	4903      	ldr	r1, [pc, #12]	; (800874c <stdio_exit_handler+0x10>)
 8008740:	4803      	ldr	r0, [pc, #12]	; (8008750 <stdio_exit_handler+0x14>)
 8008742:	f000 b869 	b.w	8008818 <_fwalk_sglue>
 8008746:	bf00      	nop
 8008748:	20000020 	.word	0x20000020
 800874c:	0800b381 	.word	0x0800b381
 8008750:	2000002c 	.word	0x2000002c

08008754 <cleanup_stdio>:
 8008754:	6841      	ldr	r1, [r0, #4]
 8008756:	4b0c      	ldr	r3, [pc, #48]	; (8008788 <cleanup_stdio+0x34>)
 8008758:	4299      	cmp	r1, r3
 800875a:	b510      	push	{r4, lr}
 800875c:	4604      	mov	r4, r0
 800875e:	d001      	beq.n	8008764 <cleanup_stdio+0x10>
 8008760:	f002 fe0e 	bl	800b380 <_fflush_r>
 8008764:	68a1      	ldr	r1, [r4, #8]
 8008766:	4b09      	ldr	r3, [pc, #36]	; (800878c <cleanup_stdio+0x38>)
 8008768:	4299      	cmp	r1, r3
 800876a:	d002      	beq.n	8008772 <cleanup_stdio+0x1e>
 800876c:	4620      	mov	r0, r4
 800876e:	f002 fe07 	bl	800b380 <_fflush_r>
 8008772:	68e1      	ldr	r1, [r4, #12]
 8008774:	4b06      	ldr	r3, [pc, #24]	; (8008790 <cleanup_stdio+0x3c>)
 8008776:	4299      	cmp	r1, r3
 8008778:	d004      	beq.n	8008784 <cleanup_stdio+0x30>
 800877a:	4620      	mov	r0, r4
 800877c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008780:	f002 bdfe 	b.w	800b380 <_fflush_r>
 8008784:	bd10      	pop	{r4, pc}
 8008786:	bf00      	nop
 8008788:	200050c0 	.word	0x200050c0
 800878c:	20005128 	.word	0x20005128
 8008790:	20005190 	.word	0x20005190

08008794 <global_stdio_init.part.0>:
 8008794:	b510      	push	{r4, lr}
 8008796:	4b0b      	ldr	r3, [pc, #44]	; (80087c4 <global_stdio_init.part.0+0x30>)
 8008798:	4c0b      	ldr	r4, [pc, #44]	; (80087c8 <global_stdio_init.part.0+0x34>)
 800879a:	4a0c      	ldr	r2, [pc, #48]	; (80087cc <global_stdio_init.part.0+0x38>)
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	4620      	mov	r0, r4
 80087a0:	2200      	movs	r2, #0
 80087a2:	2104      	movs	r1, #4
 80087a4:	f7ff ff94 	bl	80086d0 <std>
 80087a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80087ac:	2201      	movs	r2, #1
 80087ae:	2109      	movs	r1, #9
 80087b0:	f7ff ff8e 	bl	80086d0 <std>
 80087b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80087b8:	2202      	movs	r2, #2
 80087ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087be:	2112      	movs	r1, #18
 80087c0:	f7ff bf86 	b.w	80086d0 <std>
 80087c4:	200051f8 	.word	0x200051f8
 80087c8:	200050c0 	.word	0x200050c0
 80087cc:	0800873d 	.word	0x0800873d

080087d0 <__sfp_lock_acquire>:
 80087d0:	4801      	ldr	r0, [pc, #4]	; (80087d8 <__sfp_lock_acquire+0x8>)
 80087d2:	f000 b920 	b.w	8008a16 <__retarget_lock_acquire_recursive>
 80087d6:	bf00      	nop
 80087d8:	20005201 	.word	0x20005201

080087dc <__sfp_lock_release>:
 80087dc:	4801      	ldr	r0, [pc, #4]	; (80087e4 <__sfp_lock_release+0x8>)
 80087de:	f000 b91b 	b.w	8008a18 <__retarget_lock_release_recursive>
 80087e2:	bf00      	nop
 80087e4:	20005201 	.word	0x20005201

080087e8 <__sinit>:
 80087e8:	b510      	push	{r4, lr}
 80087ea:	4604      	mov	r4, r0
 80087ec:	f7ff fff0 	bl	80087d0 <__sfp_lock_acquire>
 80087f0:	6a23      	ldr	r3, [r4, #32]
 80087f2:	b11b      	cbz	r3, 80087fc <__sinit+0x14>
 80087f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087f8:	f7ff bff0 	b.w	80087dc <__sfp_lock_release>
 80087fc:	4b04      	ldr	r3, [pc, #16]	; (8008810 <__sinit+0x28>)
 80087fe:	6223      	str	r3, [r4, #32]
 8008800:	4b04      	ldr	r3, [pc, #16]	; (8008814 <__sinit+0x2c>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1f5      	bne.n	80087f4 <__sinit+0xc>
 8008808:	f7ff ffc4 	bl	8008794 <global_stdio_init.part.0>
 800880c:	e7f2      	b.n	80087f4 <__sinit+0xc>
 800880e:	bf00      	nop
 8008810:	08008755 	.word	0x08008755
 8008814:	200051f8 	.word	0x200051f8

08008818 <_fwalk_sglue>:
 8008818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800881c:	4607      	mov	r7, r0
 800881e:	4688      	mov	r8, r1
 8008820:	4614      	mov	r4, r2
 8008822:	2600      	movs	r6, #0
 8008824:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008828:	f1b9 0901 	subs.w	r9, r9, #1
 800882c:	d505      	bpl.n	800883a <_fwalk_sglue+0x22>
 800882e:	6824      	ldr	r4, [r4, #0]
 8008830:	2c00      	cmp	r4, #0
 8008832:	d1f7      	bne.n	8008824 <_fwalk_sglue+0xc>
 8008834:	4630      	mov	r0, r6
 8008836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800883a:	89ab      	ldrh	r3, [r5, #12]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d907      	bls.n	8008850 <_fwalk_sglue+0x38>
 8008840:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008844:	3301      	adds	r3, #1
 8008846:	d003      	beq.n	8008850 <_fwalk_sglue+0x38>
 8008848:	4629      	mov	r1, r5
 800884a:	4638      	mov	r0, r7
 800884c:	47c0      	blx	r8
 800884e:	4306      	orrs	r6, r0
 8008850:	3568      	adds	r5, #104	; 0x68
 8008852:	e7e9      	b.n	8008828 <_fwalk_sglue+0x10>

08008854 <siprintf>:
 8008854:	b40e      	push	{r1, r2, r3}
 8008856:	b500      	push	{lr}
 8008858:	b09c      	sub	sp, #112	; 0x70
 800885a:	ab1d      	add	r3, sp, #116	; 0x74
 800885c:	9002      	str	r0, [sp, #8]
 800885e:	9006      	str	r0, [sp, #24]
 8008860:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008864:	4809      	ldr	r0, [pc, #36]	; (800888c <siprintf+0x38>)
 8008866:	9107      	str	r1, [sp, #28]
 8008868:	9104      	str	r1, [sp, #16]
 800886a:	4909      	ldr	r1, [pc, #36]	; (8008890 <siprintf+0x3c>)
 800886c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008870:	9105      	str	r1, [sp, #20]
 8008872:	6800      	ldr	r0, [r0, #0]
 8008874:	9301      	str	r3, [sp, #4]
 8008876:	a902      	add	r1, sp, #8
 8008878:	f002 fbfe 	bl	800b078 <_svfiprintf_r>
 800887c:	9b02      	ldr	r3, [sp, #8]
 800887e:	2200      	movs	r2, #0
 8008880:	701a      	strb	r2, [r3, #0]
 8008882:	b01c      	add	sp, #112	; 0x70
 8008884:	f85d eb04 	ldr.w	lr, [sp], #4
 8008888:	b003      	add	sp, #12
 800888a:	4770      	bx	lr
 800888c:	20000078 	.word	0x20000078
 8008890:	ffff0208 	.word	0xffff0208

08008894 <__sread>:
 8008894:	b510      	push	{r4, lr}
 8008896:	460c      	mov	r4, r1
 8008898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800889c:	f000 f86c 	bl	8008978 <_read_r>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	bfab      	itete	ge
 80088a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088a6:	89a3      	ldrhlt	r3, [r4, #12]
 80088a8:	181b      	addge	r3, r3, r0
 80088aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088ae:	bfac      	ite	ge
 80088b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80088b2:	81a3      	strhlt	r3, [r4, #12]
 80088b4:	bd10      	pop	{r4, pc}

080088b6 <__swrite>:
 80088b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ba:	461f      	mov	r7, r3
 80088bc:	898b      	ldrh	r3, [r1, #12]
 80088be:	05db      	lsls	r3, r3, #23
 80088c0:	4605      	mov	r5, r0
 80088c2:	460c      	mov	r4, r1
 80088c4:	4616      	mov	r6, r2
 80088c6:	d505      	bpl.n	80088d4 <__swrite+0x1e>
 80088c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088cc:	2302      	movs	r3, #2
 80088ce:	2200      	movs	r2, #0
 80088d0:	f000 f840 	bl	8008954 <_lseek_r>
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088de:	81a3      	strh	r3, [r4, #12]
 80088e0:	4632      	mov	r2, r6
 80088e2:	463b      	mov	r3, r7
 80088e4:	4628      	mov	r0, r5
 80088e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088ea:	f000 b857 	b.w	800899c <_write_r>

080088ee <__sseek>:
 80088ee:	b510      	push	{r4, lr}
 80088f0:	460c      	mov	r4, r1
 80088f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f6:	f000 f82d 	bl	8008954 <_lseek_r>
 80088fa:	1c43      	adds	r3, r0, #1
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	bf15      	itete	ne
 8008900:	6560      	strne	r0, [r4, #84]	; 0x54
 8008902:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008906:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800890a:	81a3      	strheq	r3, [r4, #12]
 800890c:	bf18      	it	ne
 800890e:	81a3      	strhne	r3, [r4, #12]
 8008910:	bd10      	pop	{r4, pc}

08008912 <__sclose>:
 8008912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008916:	f000 b80d 	b.w	8008934 <_close_r>

0800891a <memset>:
 800891a:	4402      	add	r2, r0
 800891c:	4603      	mov	r3, r0
 800891e:	4293      	cmp	r3, r2
 8008920:	d100      	bne.n	8008924 <memset+0xa>
 8008922:	4770      	bx	lr
 8008924:	f803 1b01 	strb.w	r1, [r3], #1
 8008928:	e7f9      	b.n	800891e <memset+0x4>
	...

0800892c <_localeconv_r>:
 800892c:	4800      	ldr	r0, [pc, #0]	; (8008930 <_localeconv_r+0x4>)
 800892e:	4770      	bx	lr
 8008930:	2000016c 	.word	0x2000016c

08008934 <_close_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	4d06      	ldr	r5, [pc, #24]	; (8008950 <_close_r+0x1c>)
 8008938:	2300      	movs	r3, #0
 800893a:	4604      	mov	r4, r0
 800893c:	4608      	mov	r0, r1
 800893e:	602b      	str	r3, [r5, #0]
 8008940:	f7f9 fabe 	bl	8001ec0 <_close>
 8008944:	1c43      	adds	r3, r0, #1
 8008946:	d102      	bne.n	800894e <_close_r+0x1a>
 8008948:	682b      	ldr	r3, [r5, #0]
 800894a:	b103      	cbz	r3, 800894e <_close_r+0x1a>
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	bd38      	pop	{r3, r4, r5, pc}
 8008950:	200051fc 	.word	0x200051fc

08008954 <_lseek_r>:
 8008954:	b538      	push	{r3, r4, r5, lr}
 8008956:	4d07      	ldr	r5, [pc, #28]	; (8008974 <_lseek_r+0x20>)
 8008958:	4604      	mov	r4, r0
 800895a:	4608      	mov	r0, r1
 800895c:	4611      	mov	r1, r2
 800895e:	2200      	movs	r2, #0
 8008960:	602a      	str	r2, [r5, #0]
 8008962:	461a      	mov	r2, r3
 8008964:	f7f9 fad3 	bl	8001f0e <_lseek>
 8008968:	1c43      	adds	r3, r0, #1
 800896a:	d102      	bne.n	8008972 <_lseek_r+0x1e>
 800896c:	682b      	ldr	r3, [r5, #0]
 800896e:	b103      	cbz	r3, 8008972 <_lseek_r+0x1e>
 8008970:	6023      	str	r3, [r4, #0]
 8008972:	bd38      	pop	{r3, r4, r5, pc}
 8008974:	200051fc 	.word	0x200051fc

08008978 <_read_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	4d07      	ldr	r5, [pc, #28]	; (8008998 <_read_r+0x20>)
 800897c:	4604      	mov	r4, r0
 800897e:	4608      	mov	r0, r1
 8008980:	4611      	mov	r1, r2
 8008982:	2200      	movs	r2, #0
 8008984:	602a      	str	r2, [r5, #0]
 8008986:	461a      	mov	r2, r3
 8008988:	f7f9 fa61 	bl	8001e4e <_read>
 800898c:	1c43      	adds	r3, r0, #1
 800898e:	d102      	bne.n	8008996 <_read_r+0x1e>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	b103      	cbz	r3, 8008996 <_read_r+0x1e>
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	bd38      	pop	{r3, r4, r5, pc}
 8008998:	200051fc 	.word	0x200051fc

0800899c <_write_r>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4d07      	ldr	r5, [pc, #28]	; (80089bc <_write_r+0x20>)
 80089a0:	4604      	mov	r4, r0
 80089a2:	4608      	mov	r0, r1
 80089a4:	4611      	mov	r1, r2
 80089a6:	2200      	movs	r2, #0
 80089a8:	602a      	str	r2, [r5, #0]
 80089aa:	461a      	mov	r2, r3
 80089ac:	f7f9 fa6c 	bl	8001e88 <_write>
 80089b0:	1c43      	adds	r3, r0, #1
 80089b2:	d102      	bne.n	80089ba <_write_r+0x1e>
 80089b4:	682b      	ldr	r3, [r5, #0]
 80089b6:	b103      	cbz	r3, 80089ba <_write_r+0x1e>
 80089b8:	6023      	str	r3, [r4, #0]
 80089ba:	bd38      	pop	{r3, r4, r5, pc}
 80089bc:	200051fc 	.word	0x200051fc

080089c0 <__errno>:
 80089c0:	4b01      	ldr	r3, [pc, #4]	; (80089c8 <__errno+0x8>)
 80089c2:	6818      	ldr	r0, [r3, #0]
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	20000078 	.word	0x20000078

080089cc <__libc_init_array>:
 80089cc:	b570      	push	{r4, r5, r6, lr}
 80089ce:	4d0d      	ldr	r5, [pc, #52]	; (8008a04 <__libc_init_array+0x38>)
 80089d0:	4c0d      	ldr	r4, [pc, #52]	; (8008a08 <__libc_init_array+0x3c>)
 80089d2:	1b64      	subs	r4, r4, r5
 80089d4:	10a4      	asrs	r4, r4, #2
 80089d6:	2600      	movs	r6, #0
 80089d8:	42a6      	cmp	r6, r4
 80089da:	d109      	bne.n	80089f0 <__libc_init_array+0x24>
 80089dc:	4d0b      	ldr	r5, [pc, #44]	; (8008a0c <__libc_init_array+0x40>)
 80089de:	4c0c      	ldr	r4, [pc, #48]	; (8008a10 <__libc_init_array+0x44>)
 80089e0:	f003 fbd6 	bl	800c190 <_init>
 80089e4:	1b64      	subs	r4, r4, r5
 80089e6:	10a4      	asrs	r4, r4, #2
 80089e8:	2600      	movs	r6, #0
 80089ea:	42a6      	cmp	r6, r4
 80089ec:	d105      	bne.n	80089fa <__libc_init_array+0x2e>
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80089f4:	4798      	blx	r3
 80089f6:	3601      	adds	r6, #1
 80089f8:	e7ee      	b.n	80089d8 <__libc_init_array+0xc>
 80089fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80089fe:	4798      	blx	r3
 8008a00:	3601      	adds	r6, #1
 8008a02:	e7f2      	b.n	80089ea <__libc_init_array+0x1e>
 8008a04:	0800e770 	.word	0x0800e770
 8008a08:	0800e770 	.word	0x0800e770
 8008a0c:	0800e770 	.word	0x0800e770
 8008a10:	0800e774 	.word	0x0800e774

08008a14 <__retarget_lock_init_recursive>:
 8008a14:	4770      	bx	lr

08008a16 <__retarget_lock_acquire_recursive>:
 8008a16:	4770      	bx	lr

08008a18 <__retarget_lock_release_recursive>:
 8008a18:	4770      	bx	lr

08008a1a <memcpy>:
 8008a1a:	440a      	add	r2, r1
 8008a1c:	4291      	cmp	r1, r2
 8008a1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a22:	d100      	bne.n	8008a26 <memcpy+0xc>
 8008a24:	4770      	bx	lr
 8008a26:	b510      	push	{r4, lr}
 8008a28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a30:	4291      	cmp	r1, r2
 8008a32:	d1f9      	bne.n	8008a28 <memcpy+0xe>
 8008a34:	bd10      	pop	{r4, pc}
	...

08008a38 <nanf>:
 8008a38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008a40 <nanf+0x8>
 8008a3c:	4770      	bx	lr
 8008a3e:	bf00      	nop
 8008a40:	7fc00000 	.word	0x7fc00000

08008a44 <quorem>:
 8008a44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a48:	6903      	ldr	r3, [r0, #16]
 8008a4a:	690c      	ldr	r4, [r1, #16]
 8008a4c:	42a3      	cmp	r3, r4
 8008a4e:	4607      	mov	r7, r0
 8008a50:	db7e      	blt.n	8008b50 <quorem+0x10c>
 8008a52:	3c01      	subs	r4, #1
 8008a54:	f101 0814 	add.w	r8, r1, #20
 8008a58:	f100 0514 	add.w	r5, r0, #20
 8008a5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a60:	9301      	str	r3, [sp, #4]
 8008a62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a76:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a7a:	d331      	bcc.n	8008ae0 <quorem+0x9c>
 8008a7c:	f04f 0e00 	mov.w	lr, #0
 8008a80:	4640      	mov	r0, r8
 8008a82:	46ac      	mov	ip, r5
 8008a84:	46f2      	mov	sl, lr
 8008a86:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a8a:	b293      	uxth	r3, r2
 8008a8c:	fb06 e303 	mla	r3, r6, r3, lr
 8008a90:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a94:	0c1a      	lsrs	r2, r3, #16
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	ebaa 0303 	sub.w	r3, sl, r3
 8008a9c:	f8dc a000 	ldr.w	sl, [ip]
 8008aa0:	fa13 f38a 	uxtah	r3, r3, sl
 8008aa4:	fb06 220e 	mla	r2, r6, lr, r2
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	9b00      	ldr	r3, [sp, #0]
 8008aac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ab0:	b292      	uxth	r2, r2
 8008ab2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008ab6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008aba:	f8bd 3000 	ldrh.w	r3, [sp]
 8008abe:	4581      	cmp	r9, r0
 8008ac0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ac4:	f84c 3b04 	str.w	r3, [ip], #4
 8008ac8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008acc:	d2db      	bcs.n	8008a86 <quorem+0x42>
 8008ace:	f855 300b 	ldr.w	r3, [r5, fp]
 8008ad2:	b92b      	cbnz	r3, 8008ae0 <quorem+0x9c>
 8008ad4:	9b01      	ldr	r3, [sp, #4]
 8008ad6:	3b04      	subs	r3, #4
 8008ad8:	429d      	cmp	r5, r3
 8008ada:	461a      	mov	r2, r3
 8008adc:	d32c      	bcc.n	8008b38 <quorem+0xf4>
 8008ade:	613c      	str	r4, [r7, #16]
 8008ae0:	4638      	mov	r0, r7
 8008ae2:	f001 f9f1 	bl	8009ec8 <__mcmp>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	db22      	blt.n	8008b30 <quorem+0xec>
 8008aea:	3601      	adds	r6, #1
 8008aec:	4629      	mov	r1, r5
 8008aee:	2000      	movs	r0, #0
 8008af0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008af4:	f8d1 c000 	ldr.w	ip, [r1]
 8008af8:	b293      	uxth	r3, r2
 8008afa:	1ac3      	subs	r3, r0, r3
 8008afc:	0c12      	lsrs	r2, r2, #16
 8008afe:	fa13 f38c 	uxtah	r3, r3, ip
 8008b02:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008b06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b10:	45c1      	cmp	r9, r8
 8008b12:	f841 3b04 	str.w	r3, [r1], #4
 8008b16:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008b1a:	d2e9      	bcs.n	8008af0 <quorem+0xac>
 8008b1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b24:	b922      	cbnz	r2, 8008b30 <quorem+0xec>
 8008b26:	3b04      	subs	r3, #4
 8008b28:	429d      	cmp	r5, r3
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	d30a      	bcc.n	8008b44 <quorem+0x100>
 8008b2e:	613c      	str	r4, [r7, #16]
 8008b30:	4630      	mov	r0, r6
 8008b32:	b003      	add	sp, #12
 8008b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b38:	6812      	ldr	r2, [r2, #0]
 8008b3a:	3b04      	subs	r3, #4
 8008b3c:	2a00      	cmp	r2, #0
 8008b3e:	d1ce      	bne.n	8008ade <quorem+0x9a>
 8008b40:	3c01      	subs	r4, #1
 8008b42:	e7c9      	b.n	8008ad8 <quorem+0x94>
 8008b44:	6812      	ldr	r2, [r2, #0]
 8008b46:	3b04      	subs	r3, #4
 8008b48:	2a00      	cmp	r2, #0
 8008b4a:	d1f0      	bne.n	8008b2e <quorem+0xea>
 8008b4c:	3c01      	subs	r4, #1
 8008b4e:	e7eb      	b.n	8008b28 <quorem+0xe4>
 8008b50:	2000      	movs	r0, #0
 8008b52:	e7ee      	b.n	8008b32 <quorem+0xee>
 8008b54:	0000      	movs	r0, r0
	...

08008b58 <_dtoa_r>:
 8008b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b5c:	ed2d 8b04 	vpush	{d8-d9}
 8008b60:	69c5      	ldr	r5, [r0, #28]
 8008b62:	b093      	sub	sp, #76	; 0x4c
 8008b64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008b68:	ec57 6b10 	vmov	r6, r7, d0
 8008b6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b70:	9107      	str	r1, [sp, #28]
 8008b72:	4604      	mov	r4, r0
 8008b74:	920a      	str	r2, [sp, #40]	; 0x28
 8008b76:	930d      	str	r3, [sp, #52]	; 0x34
 8008b78:	b975      	cbnz	r5, 8008b98 <_dtoa_r+0x40>
 8008b7a:	2010      	movs	r0, #16
 8008b7c:	f000 fe2a 	bl	80097d4 <malloc>
 8008b80:	4602      	mov	r2, r0
 8008b82:	61e0      	str	r0, [r4, #28]
 8008b84:	b920      	cbnz	r0, 8008b90 <_dtoa_r+0x38>
 8008b86:	4bae      	ldr	r3, [pc, #696]	; (8008e40 <_dtoa_r+0x2e8>)
 8008b88:	21ef      	movs	r1, #239	; 0xef
 8008b8a:	48ae      	ldr	r0, [pc, #696]	; (8008e44 <_dtoa_r+0x2ec>)
 8008b8c:	f002 fc64 	bl	800b458 <__assert_func>
 8008b90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b94:	6005      	str	r5, [r0, #0]
 8008b96:	60c5      	str	r5, [r0, #12]
 8008b98:	69e3      	ldr	r3, [r4, #28]
 8008b9a:	6819      	ldr	r1, [r3, #0]
 8008b9c:	b151      	cbz	r1, 8008bb4 <_dtoa_r+0x5c>
 8008b9e:	685a      	ldr	r2, [r3, #4]
 8008ba0:	604a      	str	r2, [r1, #4]
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	4093      	lsls	r3, r2
 8008ba6:	608b      	str	r3, [r1, #8]
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f000 ff07 	bl	80099bc <_Bfree>
 8008bae:	69e3      	ldr	r3, [r4, #28]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	601a      	str	r2, [r3, #0]
 8008bb4:	1e3b      	subs	r3, r7, #0
 8008bb6:	bfbb      	ittet	lt
 8008bb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008bbc:	9303      	strlt	r3, [sp, #12]
 8008bbe:	2300      	movge	r3, #0
 8008bc0:	2201      	movlt	r2, #1
 8008bc2:	bfac      	ite	ge
 8008bc4:	f8c8 3000 	strge.w	r3, [r8]
 8008bc8:	f8c8 2000 	strlt.w	r2, [r8]
 8008bcc:	4b9e      	ldr	r3, [pc, #632]	; (8008e48 <_dtoa_r+0x2f0>)
 8008bce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008bd2:	ea33 0308 	bics.w	r3, r3, r8
 8008bd6:	d11b      	bne.n	8008c10 <_dtoa_r+0xb8>
 8008bd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bda:	f242 730f 	movw	r3, #9999	; 0x270f
 8008bde:	6013      	str	r3, [r2, #0]
 8008be0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008be4:	4333      	orrs	r3, r6
 8008be6:	f000 8593 	beq.w	8009710 <_dtoa_r+0xbb8>
 8008bea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bec:	b963      	cbnz	r3, 8008c08 <_dtoa_r+0xb0>
 8008bee:	4b97      	ldr	r3, [pc, #604]	; (8008e4c <_dtoa_r+0x2f4>)
 8008bf0:	e027      	b.n	8008c42 <_dtoa_r+0xea>
 8008bf2:	4b97      	ldr	r3, [pc, #604]	; (8008e50 <_dtoa_r+0x2f8>)
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	3308      	adds	r3, #8
 8008bf8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bfa:	6013      	str	r3, [r2, #0]
 8008bfc:	9800      	ldr	r0, [sp, #0]
 8008bfe:	b013      	add	sp, #76	; 0x4c
 8008c00:	ecbd 8b04 	vpop	{d8-d9}
 8008c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c08:	4b90      	ldr	r3, [pc, #576]	; (8008e4c <_dtoa_r+0x2f4>)
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	3303      	adds	r3, #3
 8008c0e:	e7f3      	b.n	8008bf8 <_dtoa_r+0xa0>
 8008c10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c14:	2200      	movs	r2, #0
 8008c16:	ec51 0b17 	vmov	r0, r1, d7
 8008c1a:	eeb0 8a47 	vmov.f32	s16, s14
 8008c1e:	eef0 8a67 	vmov.f32	s17, s15
 8008c22:	2300      	movs	r3, #0
 8008c24:	f7f7 ff70 	bl	8000b08 <__aeabi_dcmpeq>
 8008c28:	4681      	mov	r9, r0
 8008c2a:	b160      	cbz	r0, 8008c46 <_dtoa_r+0xee>
 8008c2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c2e:	2301      	movs	r3, #1
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 8568 	beq.w	800970a <_dtoa_r+0xbb2>
 8008c3a:	4b86      	ldr	r3, [pc, #536]	; (8008e54 <_dtoa_r+0x2fc>)
 8008c3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c3e:	6013      	str	r3, [r2, #0]
 8008c40:	3b01      	subs	r3, #1
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	e7da      	b.n	8008bfc <_dtoa_r+0xa4>
 8008c46:	aa10      	add	r2, sp, #64	; 0x40
 8008c48:	a911      	add	r1, sp, #68	; 0x44
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	eeb0 0a48 	vmov.f32	s0, s16
 8008c50:	eef0 0a68 	vmov.f32	s1, s17
 8008c54:	f001 fa4e 	bl	800a0f4 <__d2b>
 8008c58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008c5c:	4682      	mov	sl, r0
 8008c5e:	2d00      	cmp	r5, #0
 8008c60:	d07f      	beq.n	8008d62 <_dtoa_r+0x20a>
 8008c62:	ee18 3a90 	vmov	r3, s17
 8008c66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c6a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008c6e:	ec51 0b18 	vmov	r0, r1, d8
 8008c72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008c76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c7a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008c7e:	4619      	mov	r1, r3
 8008c80:	2200      	movs	r2, #0
 8008c82:	4b75      	ldr	r3, [pc, #468]	; (8008e58 <_dtoa_r+0x300>)
 8008c84:	f7f7 fb20 	bl	80002c8 <__aeabi_dsub>
 8008c88:	a367      	add	r3, pc, #412	; (adr r3, 8008e28 <_dtoa_r+0x2d0>)
 8008c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8e:	f7f7 fcd3 	bl	8000638 <__aeabi_dmul>
 8008c92:	a367      	add	r3, pc, #412	; (adr r3, 8008e30 <_dtoa_r+0x2d8>)
 8008c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c98:	f7f7 fb18 	bl	80002cc <__adddf3>
 8008c9c:	4606      	mov	r6, r0
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	460f      	mov	r7, r1
 8008ca2:	f7f7 fc5f 	bl	8000564 <__aeabi_i2d>
 8008ca6:	a364      	add	r3, pc, #400	; (adr r3, 8008e38 <_dtoa_r+0x2e0>)
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	f7f7 fcc4 	bl	8000638 <__aeabi_dmul>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	4639      	mov	r1, r7
 8008cb8:	f7f7 fb08 	bl	80002cc <__adddf3>
 8008cbc:	4606      	mov	r6, r0
 8008cbe:	460f      	mov	r7, r1
 8008cc0:	f7f7 ff6a 	bl	8000b98 <__aeabi_d2iz>
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	4683      	mov	fp, r0
 8008cc8:	2300      	movs	r3, #0
 8008cca:	4630      	mov	r0, r6
 8008ccc:	4639      	mov	r1, r7
 8008cce:	f7f7 ff25 	bl	8000b1c <__aeabi_dcmplt>
 8008cd2:	b148      	cbz	r0, 8008ce8 <_dtoa_r+0x190>
 8008cd4:	4658      	mov	r0, fp
 8008cd6:	f7f7 fc45 	bl	8000564 <__aeabi_i2d>
 8008cda:	4632      	mov	r2, r6
 8008cdc:	463b      	mov	r3, r7
 8008cde:	f7f7 ff13 	bl	8000b08 <__aeabi_dcmpeq>
 8008ce2:	b908      	cbnz	r0, 8008ce8 <_dtoa_r+0x190>
 8008ce4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ce8:	f1bb 0f16 	cmp.w	fp, #22
 8008cec:	d857      	bhi.n	8008d9e <_dtoa_r+0x246>
 8008cee:	4b5b      	ldr	r3, [pc, #364]	; (8008e5c <_dtoa_r+0x304>)
 8008cf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf8:	ec51 0b18 	vmov	r0, r1, d8
 8008cfc:	f7f7 ff0e 	bl	8000b1c <__aeabi_dcmplt>
 8008d00:	2800      	cmp	r0, #0
 8008d02:	d04e      	beq.n	8008da2 <_dtoa_r+0x24a>
 8008d04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d08:	2300      	movs	r3, #0
 8008d0a:	930c      	str	r3, [sp, #48]	; 0x30
 8008d0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d0e:	1b5b      	subs	r3, r3, r5
 8008d10:	1e5a      	subs	r2, r3, #1
 8008d12:	bf45      	ittet	mi
 8008d14:	f1c3 0301 	rsbmi	r3, r3, #1
 8008d18:	9305      	strmi	r3, [sp, #20]
 8008d1a:	2300      	movpl	r3, #0
 8008d1c:	2300      	movmi	r3, #0
 8008d1e:	9206      	str	r2, [sp, #24]
 8008d20:	bf54      	ite	pl
 8008d22:	9305      	strpl	r3, [sp, #20]
 8008d24:	9306      	strmi	r3, [sp, #24]
 8008d26:	f1bb 0f00 	cmp.w	fp, #0
 8008d2a:	db3c      	blt.n	8008da6 <_dtoa_r+0x24e>
 8008d2c:	9b06      	ldr	r3, [sp, #24]
 8008d2e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008d32:	445b      	add	r3, fp
 8008d34:	9306      	str	r3, [sp, #24]
 8008d36:	2300      	movs	r3, #0
 8008d38:	9308      	str	r3, [sp, #32]
 8008d3a:	9b07      	ldr	r3, [sp, #28]
 8008d3c:	2b09      	cmp	r3, #9
 8008d3e:	d868      	bhi.n	8008e12 <_dtoa_r+0x2ba>
 8008d40:	2b05      	cmp	r3, #5
 8008d42:	bfc4      	itt	gt
 8008d44:	3b04      	subgt	r3, #4
 8008d46:	9307      	strgt	r3, [sp, #28]
 8008d48:	9b07      	ldr	r3, [sp, #28]
 8008d4a:	f1a3 0302 	sub.w	r3, r3, #2
 8008d4e:	bfcc      	ite	gt
 8008d50:	2500      	movgt	r5, #0
 8008d52:	2501      	movle	r5, #1
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	f200 8085 	bhi.w	8008e64 <_dtoa_r+0x30c>
 8008d5a:	e8df f003 	tbb	[pc, r3]
 8008d5e:	3b2e      	.short	0x3b2e
 8008d60:	5839      	.short	0x5839
 8008d62:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008d66:	441d      	add	r5, r3
 8008d68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d6c:	2b20      	cmp	r3, #32
 8008d6e:	bfc1      	itttt	gt
 8008d70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d74:	fa08 f803 	lslgt.w	r8, r8, r3
 8008d78:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008d7c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008d80:	bfd6      	itet	le
 8008d82:	f1c3 0320 	rsble	r3, r3, #32
 8008d86:	ea48 0003 	orrgt.w	r0, r8, r3
 8008d8a:	fa06 f003 	lslle.w	r0, r6, r3
 8008d8e:	f7f7 fbd9 	bl	8000544 <__aeabi_ui2d>
 8008d92:	2201      	movs	r2, #1
 8008d94:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008d98:	3d01      	subs	r5, #1
 8008d9a:	920e      	str	r2, [sp, #56]	; 0x38
 8008d9c:	e76f      	b.n	8008c7e <_dtoa_r+0x126>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e7b3      	b.n	8008d0a <_dtoa_r+0x1b2>
 8008da2:	900c      	str	r0, [sp, #48]	; 0x30
 8008da4:	e7b2      	b.n	8008d0c <_dtoa_r+0x1b4>
 8008da6:	9b05      	ldr	r3, [sp, #20]
 8008da8:	eba3 030b 	sub.w	r3, r3, fp
 8008dac:	9305      	str	r3, [sp, #20]
 8008dae:	f1cb 0300 	rsb	r3, fp, #0
 8008db2:	9308      	str	r3, [sp, #32]
 8008db4:	2300      	movs	r3, #0
 8008db6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008db8:	e7bf      	b.n	8008d3a <_dtoa_r+0x1e2>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8008dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	dc52      	bgt.n	8008e6a <_dtoa_r+0x312>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	9301      	str	r3, [sp, #4]
 8008dc8:	9304      	str	r3, [sp, #16]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	920a      	str	r2, [sp, #40]	; 0x28
 8008dce:	e00b      	b.n	8008de8 <_dtoa_r+0x290>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e7f3      	b.n	8008dbc <_dtoa_r+0x264>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dda:	445b      	add	r3, fp
 8008ddc:	9301      	str	r3, [sp, #4]
 8008dde:	3301      	adds	r3, #1
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	9304      	str	r3, [sp, #16]
 8008de4:	bfb8      	it	lt
 8008de6:	2301      	movlt	r3, #1
 8008de8:	69e0      	ldr	r0, [r4, #28]
 8008dea:	2100      	movs	r1, #0
 8008dec:	2204      	movs	r2, #4
 8008dee:	f102 0614 	add.w	r6, r2, #20
 8008df2:	429e      	cmp	r6, r3
 8008df4:	d93d      	bls.n	8008e72 <_dtoa_r+0x31a>
 8008df6:	6041      	str	r1, [r0, #4]
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f000 fd9f 	bl	800993c <_Balloc>
 8008dfe:	9000      	str	r0, [sp, #0]
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d139      	bne.n	8008e78 <_dtoa_r+0x320>
 8008e04:	4b16      	ldr	r3, [pc, #88]	; (8008e60 <_dtoa_r+0x308>)
 8008e06:	4602      	mov	r2, r0
 8008e08:	f240 11af 	movw	r1, #431	; 0x1af
 8008e0c:	e6bd      	b.n	8008b8a <_dtoa_r+0x32>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e7e1      	b.n	8008dd6 <_dtoa_r+0x27e>
 8008e12:	2501      	movs	r5, #1
 8008e14:	2300      	movs	r3, #0
 8008e16:	9307      	str	r3, [sp, #28]
 8008e18:	9509      	str	r5, [sp, #36]	; 0x24
 8008e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e1e:	9301      	str	r3, [sp, #4]
 8008e20:	9304      	str	r3, [sp, #16]
 8008e22:	2200      	movs	r2, #0
 8008e24:	2312      	movs	r3, #18
 8008e26:	e7d1      	b.n	8008dcc <_dtoa_r+0x274>
 8008e28:	636f4361 	.word	0x636f4361
 8008e2c:	3fd287a7 	.word	0x3fd287a7
 8008e30:	8b60c8b3 	.word	0x8b60c8b3
 8008e34:	3fc68a28 	.word	0x3fc68a28
 8008e38:	509f79fb 	.word	0x509f79fb
 8008e3c:	3fd34413 	.word	0x3fd34413
 8008e40:	0800e387 	.word	0x0800e387
 8008e44:	0800e39e 	.word	0x0800e39e
 8008e48:	7ff00000 	.word	0x7ff00000
 8008e4c:	0800e383 	.word	0x0800e383
 8008e50:	0800e37a 	.word	0x0800e37a
 8008e54:	0800e352 	.word	0x0800e352
 8008e58:	3ff80000 	.word	0x3ff80000
 8008e5c:	0800e488 	.word	0x0800e488
 8008e60:	0800e3f6 	.word	0x0800e3f6
 8008e64:	2301      	movs	r3, #1
 8008e66:	9309      	str	r3, [sp, #36]	; 0x24
 8008e68:	e7d7      	b.n	8008e1a <_dtoa_r+0x2c2>
 8008e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e6c:	9301      	str	r3, [sp, #4]
 8008e6e:	9304      	str	r3, [sp, #16]
 8008e70:	e7ba      	b.n	8008de8 <_dtoa_r+0x290>
 8008e72:	3101      	adds	r1, #1
 8008e74:	0052      	lsls	r2, r2, #1
 8008e76:	e7ba      	b.n	8008dee <_dtoa_r+0x296>
 8008e78:	69e3      	ldr	r3, [r4, #28]
 8008e7a:	9a00      	ldr	r2, [sp, #0]
 8008e7c:	601a      	str	r2, [r3, #0]
 8008e7e:	9b04      	ldr	r3, [sp, #16]
 8008e80:	2b0e      	cmp	r3, #14
 8008e82:	f200 80a8 	bhi.w	8008fd6 <_dtoa_r+0x47e>
 8008e86:	2d00      	cmp	r5, #0
 8008e88:	f000 80a5 	beq.w	8008fd6 <_dtoa_r+0x47e>
 8008e8c:	f1bb 0f00 	cmp.w	fp, #0
 8008e90:	dd38      	ble.n	8008f04 <_dtoa_r+0x3ac>
 8008e92:	4bc0      	ldr	r3, [pc, #768]	; (8009194 <_dtoa_r+0x63c>)
 8008e94:	f00b 020f 	and.w	r2, fp, #15
 8008e98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e9c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008ea0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008ea4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008ea8:	d019      	beq.n	8008ede <_dtoa_r+0x386>
 8008eaa:	4bbb      	ldr	r3, [pc, #748]	; (8009198 <_dtoa_r+0x640>)
 8008eac:	ec51 0b18 	vmov	r0, r1, d8
 8008eb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008eb4:	f7f7 fcea 	bl	800088c <__aeabi_ddiv>
 8008eb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ebc:	f008 080f 	and.w	r8, r8, #15
 8008ec0:	2503      	movs	r5, #3
 8008ec2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009198 <_dtoa_r+0x640>
 8008ec6:	f1b8 0f00 	cmp.w	r8, #0
 8008eca:	d10a      	bne.n	8008ee2 <_dtoa_r+0x38a>
 8008ecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ed0:	4632      	mov	r2, r6
 8008ed2:	463b      	mov	r3, r7
 8008ed4:	f7f7 fcda 	bl	800088c <__aeabi_ddiv>
 8008ed8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008edc:	e02b      	b.n	8008f36 <_dtoa_r+0x3de>
 8008ede:	2502      	movs	r5, #2
 8008ee0:	e7ef      	b.n	8008ec2 <_dtoa_r+0x36a>
 8008ee2:	f018 0f01 	tst.w	r8, #1
 8008ee6:	d008      	beq.n	8008efa <_dtoa_r+0x3a2>
 8008ee8:	4630      	mov	r0, r6
 8008eea:	4639      	mov	r1, r7
 8008eec:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008ef0:	f7f7 fba2 	bl	8000638 <__aeabi_dmul>
 8008ef4:	3501      	adds	r5, #1
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	460f      	mov	r7, r1
 8008efa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008efe:	f109 0908 	add.w	r9, r9, #8
 8008f02:	e7e0      	b.n	8008ec6 <_dtoa_r+0x36e>
 8008f04:	f000 809f 	beq.w	8009046 <_dtoa_r+0x4ee>
 8008f08:	f1cb 0600 	rsb	r6, fp, #0
 8008f0c:	4ba1      	ldr	r3, [pc, #644]	; (8009194 <_dtoa_r+0x63c>)
 8008f0e:	4fa2      	ldr	r7, [pc, #648]	; (8009198 <_dtoa_r+0x640>)
 8008f10:	f006 020f 	and.w	r2, r6, #15
 8008f14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1c:	ec51 0b18 	vmov	r0, r1, d8
 8008f20:	f7f7 fb8a 	bl	8000638 <__aeabi_dmul>
 8008f24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f28:	1136      	asrs	r6, r6, #4
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	2502      	movs	r5, #2
 8008f2e:	2e00      	cmp	r6, #0
 8008f30:	d17e      	bne.n	8009030 <_dtoa_r+0x4d8>
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1d0      	bne.n	8008ed8 <_dtoa_r+0x380>
 8008f36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f38:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	f000 8084 	beq.w	800904a <_dtoa_r+0x4f2>
 8008f42:	4b96      	ldr	r3, [pc, #600]	; (800919c <_dtoa_r+0x644>)
 8008f44:	2200      	movs	r2, #0
 8008f46:	4640      	mov	r0, r8
 8008f48:	4649      	mov	r1, r9
 8008f4a:	f7f7 fde7 	bl	8000b1c <__aeabi_dcmplt>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	d07b      	beq.n	800904a <_dtoa_r+0x4f2>
 8008f52:	9b04      	ldr	r3, [sp, #16]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d078      	beq.n	800904a <_dtoa_r+0x4f2>
 8008f58:	9b01      	ldr	r3, [sp, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	dd39      	ble.n	8008fd2 <_dtoa_r+0x47a>
 8008f5e:	4b90      	ldr	r3, [pc, #576]	; (80091a0 <_dtoa_r+0x648>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	4640      	mov	r0, r8
 8008f64:	4649      	mov	r1, r9
 8008f66:	f7f7 fb67 	bl	8000638 <__aeabi_dmul>
 8008f6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f6e:	9e01      	ldr	r6, [sp, #4]
 8008f70:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008f74:	3501      	adds	r5, #1
 8008f76:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	f7f7 faf2 	bl	8000564 <__aeabi_i2d>
 8008f80:	4642      	mov	r2, r8
 8008f82:	464b      	mov	r3, r9
 8008f84:	f7f7 fb58 	bl	8000638 <__aeabi_dmul>
 8008f88:	4b86      	ldr	r3, [pc, #536]	; (80091a4 <_dtoa_r+0x64c>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f7f7 f99e 	bl	80002cc <__adddf3>
 8008f90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008f94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f98:	9303      	str	r3, [sp, #12]
 8008f9a:	2e00      	cmp	r6, #0
 8008f9c:	d158      	bne.n	8009050 <_dtoa_r+0x4f8>
 8008f9e:	4b82      	ldr	r3, [pc, #520]	; (80091a8 <_dtoa_r+0x650>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	4640      	mov	r0, r8
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	f7f7 f98f 	bl	80002c8 <__aeabi_dsub>
 8008faa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fae:	4680      	mov	r8, r0
 8008fb0:	4689      	mov	r9, r1
 8008fb2:	f7f7 fdd1 	bl	8000b58 <__aeabi_dcmpgt>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	f040 8296 	bne.w	80094e8 <_dtoa_r+0x990>
 8008fbc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008fc0:	4640      	mov	r0, r8
 8008fc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fc6:	4649      	mov	r1, r9
 8008fc8:	f7f7 fda8 	bl	8000b1c <__aeabi_dcmplt>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	f040 8289 	bne.w	80094e4 <_dtoa_r+0x98c>
 8008fd2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008fd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	f2c0 814e 	blt.w	800927a <_dtoa_r+0x722>
 8008fde:	f1bb 0f0e 	cmp.w	fp, #14
 8008fe2:	f300 814a 	bgt.w	800927a <_dtoa_r+0x722>
 8008fe6:	4b6b      	ldr	r3, [pc, #428]	; (8009194 <_dtoa_r+0x63c>)
 8008fe8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008fec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f280 80dc 	bge.w	80091b0 <_dtoa_r+0x658>
 8008ff8:	9b04      	ldr	r3, [sp, #16]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f300 80d8 	bgt.w	80091b0 <_dtoa_r+0x658>
 8009000:	f040 826f 	bne.w	80094e2 <_dtoa_r+0x98a>
 8009004:	4b68      	ldr	r3, [pc, #416]	; (80091a8 <_dtoa_r+0x650>)
 8009006:	2200      	movs	r2, #0
 8009008:	4640      	mov	r0, r8
 800900a:	4649      	mov	r1, r9
 800900c:	f7f7 fb14 	bl	8000638 <__aeabi_dmul>
 8009010:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009014:	f7f7 fd96 	bl	8000b44 <__aeabi_dcmpge>
 8009018:	9e04      	ldr	r6, [sp, #16]
 800901a:	4637      	mov	r7, r6
 800901c:	2800      	cmp	r0, #0
 800901e:	f040 8245 	bne.w	80094ac <_dtoa_r+0x954>
 8009022:	9d00      	ldr	r5, [sp, #0]
 8009024:	2331      	movs	r3, #49	; 0x31
 8009026:	f805 3b01 	strb.w	r3, [r5], #1
 800902a:	f10b 0b01 	add.w	fp, fp, #1
 800902e:	e241      	b.n	80094b4 <_dtoa_r+0x95c>
 8009030:	07f2      	lsls	r2, r6, #31
 8009032:	d505      	bpl.n	8009040 <_dtoa_r+0x4e8>
 8009034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009038:	f7f7 fafe 	bl	8000638 <__aeabi_dmul>
 800903c:	3501      	adds	r5, #1
 800903e:	2301      	movs	r3, #1
 8009040:	1076      	asrs	r6, r6, #1
 8009042:	3708      	adds	r7, #8
 8009044:	e773      	b.n	8008f2e <_dtoa_r+0x3d6>
 8009046:	2502      	movs	r5, #2
 8009048:	e775      	b.n	8008f36 <_dtoa_r+0x3de>
 800904a:	9e04      	ldr	r6, [sp, #16]
 800904c:	465f      	mov	r7, fp
 800904e:	e792      	b.n	8008f76 <_dtoa_r+0x41e>
 8009050:	9900      	ldr	r1, [sp, #0]
 8009052:	4b50      	ldr	r3, [pc, #320]	; (8009194 <_dtoa_r+0x63c>)
 8009054:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009058:	4431      	add	r1, r6
 800905a:	9102      	str	r1, [sp, #8]
 800905c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800905e:	eeb0 9a47 	vmov.f32	s18, s14
 8009062:	eef0 9a67 	vmov.f32	s19, s15
 8009066:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800906a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800906e:	2900      	cmp	r1, #0
 8009070:	d044      	beq.n	80090fc <_dtoa_r+0x5a4>
 8009072:	494e      	ldr	r1, [pc, #312]	; (80091ac <_dtoa_r+0x654>)
 8009074:	2000      	movs	r0, #0
 8009076:	f7f7 fc09 	bl	800088c <__aeabi_ddiv>
 800907a:	ec53 2b19 	vmov	r2, r3, d9
 800907e:	f7f7 f923 	bl	80002c8 <__aeabi_dsub>
 8009082:	9d00      	ldr	r5, [sp, #0]
 8009084:	ec41 0b19 	vmov	d9, r0, r1
 8009088:	4649      	mov	r1, r9
 800908a:	4640      	mov	r0, r8
 800908c:	f7f7 fd84 	bl	8000b98 <__aeabi_d2iz>
 8009090:	4606      	mov	r6, r0
 8009092:	f7f7 fa67 	bl	8000564 <__aeabi_i2d>
 8009096:	4602      	mov	r2, r0
 8009098:	460b      	mov	r3, r1
 800909a:	4640      	mov	r0, r8
 800909c:	4649      	mov	r1, r9
 800909e:	f7f7 f913 	bl	80002c8 <__aeabi_dsub>
 80090a2:	3630      	adds	r6, #48	; 0x30
 80090a4:	f805 6b01 	strb.w	r6, [r5], #1
 80090a8:	ec53 2b19 	vmov	r2, r3, d9
 80090ac:	4680      	mov	r8, r0
 80090ae:	4689      	mov	r9, r1
 80090b0:	f7f7 fd34 	bl	8000b1c <__aeabi_dcmplt>
 80090b4:	2800      	cmp	r0, #0
 80090b6:	d164      	bne.n	8009182 <_dtoa_r+0x62a>
 80090b8:	4642      	mov	r2, r8
 80090ba:	464b      	mov	r3, r9
 80090bc:	4937      	ldr	r1, [pc, #220]	; (800919c <_dtoa_r+0x644>)
 80090be:	2000      	movs	r0, #0
 80090c0:	f7f7 f902 	bl	80002c8 <__aeabi_dsub>
 80090c4:	ec53 2b19 	vmov	r2, r3, d9
 80090c8:	f7f7 fd28 	bl	8000b1c <__aeabi_dcmplt>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	f040 80b6 	bne.w	800923e <_dtoa_r+0x6e6>
 80090d2:	9b02      	ldr	r3, [sp, #8]
 80090d4:	429d      	cmp	r5, r3
 80090d6:	f43f af7c 	beq.w	8008fd2 <_dtoa_r+0x47a>
 80090da:	4b31      	ldr	r3, [pc, #196]	; (80091a0 <_dtoa_r+0x648>)
 80090dc:	ec51 0b19 	vmov	r0, r1, d9
 80090e0:	2200      	movs	r2, #0
 80090e2:	f7f7 faa9 	bl	8000638 <__aeabi_dmul>
 80090e6:	4b2e      	ldr	r3, [pc, #184]	; (80091a0 <_dtoa_r+0x648>)
 80090e8:	ec41 0b19 	vmov	d9, r0, r1
 80090ec:	2200      	movs	r2, #0
 80090ee:	4640      	mov	r0, r8
 80090f0:	4649      	mov	r1, r9
 80090f2:	f7f7 faa1 	bl	8000638 <__aeabi_dmul>
 80090f6:	4680      	mov	r8, r0
 80090f8:	4689      	mov	r9, r1
 80090fa:	e7c5      	b.n	8009088 <_dtoa_r+0x530>
 80090fc:	ec51 0b17 	vmov	r0, r1, d7
 8009100:	f7f7 fa9a 	bl	8000638 <__aeabi_dmul>
 8009104:	9b02      	ldr	r3, [sp, #8]
 8009106:	9d00      	ldr	r5, [sp, #0]
 8009108:	930f      	str	r3, [sp, #60]	; 0x3c
 800910a:	ec41 0b19 	vmov	d9, r0, r1
 800910e:	4649      	mov	r1, r9
 8009110:	4640      	mov	r0, r8
 8009112:	f7f7 fd41 	bl	8000b98 <__aeabi_d2iz>
 8009116:	4606      	mov	r6, r0
 8009118:	f7f7 fa24 	bl	8000564 <__aeabi_i2d>
 800911c:	3630      	adds	r6, #48	; 0x30
 800911e:	4602      	mov	r2, r0
 8009120:	460b      	mov	r3, r1
 8009122:	4640      	mov	r0, r8
 8009124:	4649      	mov	r1, r9
 8009126:	f7f7 f8cf 	bl	80002c8 <__aeabi_dsub>
 800912a:	f805 6b01 	strb.w	r6, [r5], #1
 800912e:	9b02      	ldr	r3, [sp, #8]
 8009130:	429d      	cmp	r5, r3
 8009132:	4680      	mov	r8, r0
 8009134:	4689      	mov	r9, r1
 8009136:	f04f 0200 	mov.w	r2, #0
 800913a:	d124      	bne.n	8009186 <_dtoa_r+0x62e>
 800913c:	4b1b      	ldr	r3, [pc, #108]	; (80091ac <_dtoa_r+0x654>)
 800913e:	ec51 0b19 	vmov	r0, r1, d9
 8009142:	f7f7 f8c3 	bl	80002cc <__adddf3>
 8009146:	4602      	mov	r2, r0
 8009148:	460b      	mov	r3, r1
 800914a:	4640      	mov	r0, r8
 800914c:	4649      	mov	r1, r9
 800914e:	f7f7 fd03 	bl	8000b58 <__aeabi_dcmpgt>
 8009152:	2800      	cmp	r0, #0
 8009154:	d173      	bne.n	800923e <_dtoa_r+0x6e6>
 8009156:	ec53 2b19 	vmov	r2, r3, d9
 800915a:	4914      	ldr	r1, [pc, #80]	; (80091ac <_dtoa_r+0x654>)
 800915c:	2000      	movs	r0, #0
 800915e:	f7f7 f8b3 	bl	80002c8 <__aeabi_dsub>
 8009162:	4602      	mov	r2, r0
 8009164:	460b      	mov	r3, r1
 8009166:	4640      	mov	r0, r8
 8009168:	4649      	mov	r1, r9
 800916a:	f7f7 fcd7 	bl	8000b1c <__aeabi_dcmplt>
 800916e:	2800      	cmp	r0, #0
 8009170:	f43f af2f 	beq.w	8008fd2 <_dtoa_r+0x47a>
 8009174:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009176:	1e6b      	subs	r3, r5, #1
 8009178:	930f      	str	r3, [sp, #60]	; 0x3c
 800917a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800917e:	2b30      	cmp	r3, #48	; 0x30
 8009180:	d0f8      	beq.n	8009174 <_dtoa_r+0x61c>
 8009182:	46bb      	mov	fp, r7
 8009184:	e04a      	b.n	800921c <_dtoa_r+0x6c4>
 8009186:	4b06      	ldr	r3, [pc, #24]	; (80091a0 <_dtoa_r+0x648>)
 8009188:	f7f7 fa56 	bl	8000638 <__aeabi_dmul>
 800918c:	4680      	mov	r8, r0
 800918e:	4689      	mov	r9, r1
 8009190:	e7bd      	b.n	800910e <_dtoa_r+0x5b6>
 8009192:	bf00      	nop
 8009194:	0800e488 	.word	0x0800e488
 8009198:	0800e460 	.word	0x0800e460
 800919c:	3ff00000 	.word	0x3ff00000
 80091a0:	40240000 	.word	0x40240000
 80091a4:	401c0000 	.word	0x401c0000
 80091a8:	40140000 	.word	0x40140000
 80091ac:	3fe00000 	.word	0x3fe00000
 80091b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80091b4:	9d00      	ldr	r5, [sp, #0]
 80091b6:	4642      	mov	r2, r8
 80091b8:	464b      	mov	r3, r9
 80091ba:	4630      	mov	r0, r6
 80091bc:	4639      	mov	r1, r7
 80091be:	f7f7 fb65 	bl	800088c <__aeabi_ddiv>
 80091c2:	f7f7 fce9 	bl	8000b98 <__aeabi_d2iz>
 80091c6:	9001      	str	r0, [sp, #4]
 80091c8:	f7f7 f9cc 	bl	8000564 <__aeabi_i2d>
 80091cc:	4642      	mov	r2, r8
 80091ce:	464b      	mov	r3, r9
 80091d0:	f7f7 fa32 	bl	8000638 <__aeabi_dmul>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	4630      	mov	r0, r6
 80091da:	4639      	mov	r1, r7
 80091dc:	f7f7 f874 	bl	80002c8 <__aeabi_dsub>
 80091e0:	9e01      	ldr	r6, [sp, #4]
 80091e2:	9f04      	ldr	r7, [sp, #16]
 80091e4:	3630      	adds	r6, #48	; 0x30
 80091e6:	f805 6b01 	strb.w	r6, [r5], #1
 80091ea:	9e00      	ldr	r6, [sp, #0]
 80091ec:	1bae      	subs	r6, r5, r6
 80091ee:	42b7      	cmp	r7, r6
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	d134      	bne.n	8009260 <_dtoa_r+0x708>
 80091f6:	f7f7 f869 	bl	80002cc <__adddf3>
 80091fa:	4642      	mov	r2, r8
 80091fc:	464b      	mov	r3, r9
 80091fe:	4606      	mov	r6, r0
 8009200:	460f      	mov	r7, r1
 8009202:	f7f7 fca9 	bl	8000b58 <__aeabi_dcmpgt>
 8009206:	b9c8      	cbnz	r0, 800923c <_dtoa_r+0x6e4>
 8009208:	4642      	mov	r2, r8
 800920a:	464b      	mov	r3, r9
 800920c:	4630      	mov	r0, r6
 800920e:	4639      	mov	r1, r7
 8009210:	f7f7 fc7a 	bl	8000b08 <__aeabi_dcmpeq>
 8009214:	b110      	cbz	r0, 800921c <_dtoa_r+0x6c4>
 8009216:	9b01      	ldr	r3, [sp, #4]
 8009218:	07db      	lsls	r3, r3, #31
 800921a:	d40f      	bmi.n	800923c <_dtoa_r+0x6e4>
 800921c:	4651      	mov	r1, sl
 800921e:	4620      	mov	r0, r4
 8009220:	f000 fbcc 	bl	80099bc <_Bfree>
 8009224:	2300      	movs	r3, #0
 8009226:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009228:	702b      	strb	r3, [r5, #0]
 800922a:	f10b 0301 	add.w	r3, fp, #1
 800922e:	6013      	str	r3, [r2, #0]
 8009230:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009232:	2b00      	cmp	r3, #0
 8009234:	f43f ace2 	beq.w	8008bfc <_dtoa_r+0xa4>
 8009238:	601d      	str	r5, [r3, #0]
 800923a:	e4df      	b.n	8008bfc <_dtoa_r+0xa4>
 800923c:	465f      	mov	r7, fp
 800923e:	462b      	mov	r3, r5
 8009240:	461d      	mov	r5, r3
 8009242:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009246:	2a39      	cmp	r2, #57	; 0x39
 8009248:	d106      	bne.n	8009258 <_dtoa_r+0x700>
 800924a:	9a00      	ldr	r2, [sp, #0]
 800924c:	429a      	cmp	r2, r3
 800924e:	d1f7      	bne.n	8009240 <_dtoa_r+0x6e8>
 8009250:	9900      	ldr	r1, [sp, #0]
 8009252:	2230      	movs	r2, #48	; 0x30
 8009254:	3701      	adds	r7, #1
 8009256:	700a      	strb	r2, [r1, #0]
 8009258:	781a      	ldrb	r2, [r3, #0]
 800925a:	3201      	adds	r2, #1
 800925c:	701a      	strb	r2, [r3, #0]
 800925e:	e790      	b.n	8009182 <_dtoa_r+0x62a>
 8009260:	4ba3      	ldr	r3, [pc, #652]	; (80094f0 <_dtoa_r+0x998>)
 8009262:	2200      	movs	r2, #0
 8009264:	f7f7 f9e8 	bl	8000638 <__aeabi_dmul>
 8009268:	2200      	movs	r2, #0
 800926a:	2300      	movs	r3, #0
 800926c:	4606      	mov	r6, r0
 800926e:	460f      	mov	r7, r1
 8009270:	f7f7 fc4a 	bl	8000b08 <__aeabi_dcmpeq>
 8009274:	2800      	cmp	r0, #0
 8009276:	d09e      	beq.n	80091b6 <_dtoa_r+0x65e>
 8009278:	e7d0      	b.n	800921c <_dtoa_r+0x6c4>
 800927a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800927c:	2a00      	cmp	r2, #0
 800927e:	f000 80ca 	beq.w	8009416 <_dtoa_r+0x8be>
 8009282:	9a07      	ldr	r2, [sp, #28]
 8009284:	2a01      	cmp	r2, #1
 8009286:	f300 80ad 	bgt.w	80093e4 <_dtoa_r+0x88c>
 800928a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800928c:	2a00      	cmp	r2, #0
 800928e:	f000 80a5 	beq.w	80093dc <_dtoa_r+0x884>
 8009292:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009296:	9e08      	ldr	r6, [sp, #32]
 8009298:	9d05      	ldr	r5, [sp, #20]
 800929a:	9a05      	ldr	r2, [sp, #20]
 800929c:	441a      	add	r2, r3
 800929e:	9205      	str	r2, [sp, #20]
 80092a0:	9a06      	ldr	r2, [sp, #24]
 80092a2:	2101      	movs	r1, #1
 80092a4:	441a      	add	r2, r3
 80092a6:	4620      	mov	r0, r4
 80092a8:	9206      	str	r2, [sp, #24]
 80092aa:	f000 fc87 	bl	8009bbc <__i2b>
 80092ae:	4607      	mov	r7, r0
 80092b0:	b165      	cbz	r5, 80092cc <_dtoa_r+0x774>
 80092b2:	9b06      	ldr	r3, [sp, #24]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	dd09      	ble.n	80092cc <_dtoa_r+0x774>
 80092b8:	42ab      	cmp	r3, r5
 80092ba:	9a05      	ldr	r2, [sp, #20]
 80092bc:	bfa8      	it	ge
 80092be:	462b      	movge	r3, r5
 80092c0:	1ad2      	subs	r2, r2, r3
 80092c2:	9205      	str	r2, [sp, #20]
 80092c4:	9a06      	ldr	r2, [sp, #24]
 80092c6:	1aed      	subs	r5, r5, r3
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	9306      	str	r3, [sp, #24]
 80092cc:	9b08      	ldr	r3, [sp, #32]
 80092ce:	b1f3      	cbz	r3, 800930e <_dtoa_r+0x7b6>
 80092d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f000 80a3 	beq.w	800941e <_dtoa_r+0x8c6>
 80092d8:	2e00      	cmp	r6, #0
 80092da:	dd10      	ble.n	80092fe <_dtoa_r+0x7a6>
 80092dc:	4639      	mov	r1, r7
 80092de:	4632      	mov	r2, r6
 80092e0:	4620      	mov	r0, r4
 80092e2:	f000 fd2b 	bl	8009d3c <__pow5mult>
 80092e6:	4652      	mov	r2, sl
 80092e8:	4601      	mov	r1, r0
 80092ea:	4607      	mov	r7, r0
 80092ec:	4620      	mov	r0, r4
 80092ee:	f000 fc7b 	bl	8009be8 <__multiply>
 80092f2:	4651      	mov	r1, sl
 80092f4:	4680      	mov	r8, r0
 80092f6:	4620      	mov	r0, r4
 80092f8:	f000 fb60 	bl	80099bc <_Bfree>
 80092fc:	46c2      	mov	sl, r8
 80092fe:	9b08      	ldr	r3, [sp, #32]
 8009300:	1b9a      	subs	r2, r3, r6
 8009302:	d004      	beq.n	800930e <_dtoa_r+0x7b6>
 8009304:	4651      	mov	r1, sl
 8009306:	4620      	mov	r0, r4
 8009308:	f000 fd18 	bl	8009d3c <__pow5mult>
 800930c:	4682      	mov	sl, r0
 800930e:	2101      	movs	r1, #1
 8009310:	4620      	mov	r0, r4
 8009312:	f000 fc53 	bl	8009bbc <__i2b>
 8009316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009318:	2b00      	cmp	r3, #0
 800931a:	4606      	mov	r6, r0
 800931c:	f340 8081 	ble.w	8009422 <_dtoa_r+0x8ca>
 8009320:	461a      	mov	r2, r3
 8009322:	4601      	mov	r1, r0
 8009324:	4620      	mov	r0, r4
 8009326:	f000 fd09 	bl	8009d3c <__pow5mult>
 800932a:	9b07      	ldr	r3, [sp, #28]
 800932c:	2b01      	cmp	r3, #1
 800932e:	4606      	mov	r6, r0
 8009330:	dd7a      	ble.n	8009428 <_dtoa_r+0x8d0>
 8009332:	f04f 0800 	mov.w	r8, #0
 8009336:	6933      	ldr	r3, [r6, #16]
 8009338:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800933c:	6918      	ldr	r0, [r3, #16]
 800933e:	f000 fbef 	bl	8009b20 <__hi0bits>
 8009342:	f1c0 0020 	rsb	r0, r0, #32
 8009346:	9b06      	ldr	r3, [sp, #24]
 8009348:	4418      	add	r0, r3
 800934a:	f010 001f 	ands.w	r0, r0, #31
 800934e:	f000 8094 	beq.w	800947a <_dtoa_r+0x922>
 8009352:	f1c0 0320 	rsb	r3, r0, #32
 8009356:	2b04      	cmp	r3, #4
 8009358:	f340 8085 	ble.w	8009466 <_dtoa_r+0x90e>
 800935c:	9b05      	ldr	r3, [sp, #20]
 800935e:	f1c0 001c 	rsb	r0, r0, #28
 8009362:	4403      	add	r3, r0
 8009364:	9305      	str	r3, [sp, #20]
 8009366:	9b06      	ldr	r3, [sp, #24]
 8009368:	4403      	add	r3, r0
 800936a:	4405      	add	r5, r0
 800936c:	9306      	str	r3, [sp, #24]
 800936e:	9b05      	ldr	r3, [sp, #20]
 8009370:	2b00      	cmp	r3, #0
 8009372:	dd05      	ble.n	8009380 <_dtoa_r+0x828>
 8009374:	4651      	mov	r1, sl
 8009376:	461a      	mov	r2, r3
 8009378:	4620      	mov	r0, r4
 800937a:	f000 fd39 	bl	8009df0 <__lshift>
 800937e:	4682      	mov	sl, r0
 8009380:	9b06      	ldr	r3, [sp, #24]
 8009382:	2b00      	cmp	r3, #0
 8009384:	dd05      	ble.n	8009392 <_dtoa_r+0x83a>
 8009386:	4631      	mov	r1, r6
 8009388:	461a      	mov	r2, r3
 800938a:	4620      	mov	r0, r4
 800938c:	f000 fd30 	bl	8009df0 <__lshift>
 8009390:	4606      	mov	r6, r0
 8009392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009394:	2b00      	cmp	r3, #0
 8009396:	d072      	beq.n	800947e <_dtoa_r+0x926>
 8009398:	4631      	mov	r1, r6
 800939a:	4650      	mov	r0, sl
 800939c:	f000 fd94 	bl	8009ec8 <__mcmp>
 80093a0:	2800      	cmp	r0, #0
 80093a2:	da6c      	bge.n	800947e <_dtoa_r+0x926>
 80093a4:	2300      	movs	r3, #0
 80093a6:	4651      	mov	r1, sl
 80093a8:	220a      	movs	r2, #10
 80093aa:	4620      	mov	r0, r4
 80093ac:	f000 fb28 	bl	8009a00 <__multadd>
 80093b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80093b6:	4682      	mov	sl, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 81b0 	beq.w	800971e <_dtoa_r+0xbc6>
 80093be:	2300      	movs	r3, #0
 80093c0:	4639      	mov	r1, r7
 80093c2:	220a      	movs	r2, #10
 80093c4:	4620      	mov	r0, r4
 80093c6:	f000 fb1b 	bl	8009a00 <__multadd>
 80093ca:	9b01      	ldr	r3, [sp, #4]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	4607      	mov	r7, r0
 80093d0:	f300 8096 	bgt.w	8009500 <_dtoa_r+0x9a8>
 80093d4:	9b07      	ldr	r3, [sp, #28]
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	dc59      	bgt.n	800948e <_dtoa_r+0x936>
 80093da:	e091      	b.n	8009500 <_dtoa_r+0x9a8>
 80093dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093e2:	e758      	b.n	8009296 <_dtoa_r+0x73e>
 80093e4:	9b04      	ldr	r3, [sp, #16]
 80093e6:	1e5e      	subs	r6, r3, #1
 80093e8:	9b08      	ldr	r3, [sp, #32]
 80093ea:	42b3      	cmp	r3, r6
 80093ec:	bfbf      	itttt	lt
 80093ee:	9b08      	ldrlt	r3, [sp, #32]
 80093f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80093f2:	9608      	strlt	r6, [sp, #32]
 80093f4:	1af3      	sublt	r3, r6, r3
 80093f6:	bfb4      	ite	lt
 80093f8:	18d2      	addlt	r2, r2, r3
 80093fa:	1b9e      	subge	r6, r3, r6
 80093fc:	9b04      	ldr	r3, [sp, #16]
 80093fe:	bfbc      	itt	lt
 8009400:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009402:	2600      	movlt	r6, #0
 8009404:	2b00      	cmp	r3, #0
 8009406:	bfb7      	itett	lt
 8009408:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800940c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009410:	1a9d      	sublt	r5, r3, r2
 8009412:	2300      	movlt	r3, #0
 8009414:	e741      	b.n	800929a <_dtoa_r+0x742>
 8009416:	9e08      	ldr	r6, [sp, #32]
 8009418:	9d05      	ldr	r5, [sp, #20]
 800941a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800941c:	e748      	b.n	80092b0 <_dtoa_r+0x758>
 800941e:	9a08      	ldr	r2, [sp, #32]
 8009420:	e770      	b.n	8009304 <_dtoa_r+0x7ac>
 8009422:	9b07      	ldr	r3, [sp, #28]
 8009424:	2b01      	cmp	r3, #1
 8009426:	dc19      	bgt.n	800945c <_dtoa_r+0x904>
 8009428:	9b02      	ldr	r3, [sp, #8]
 800942a:	b9bb      	cbnz	r3, 800945c <_dtoa_r+0x904>
 800942c:	9b03      	ldr	r3, [sp, #12]
 800942e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009432:	b99b      	cbnz	r3, 800945c <_dtoa_r+0x904>
 8009434:	9b03      	ldr	r3, [sp, #12]
 8009436:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800943a:	0d1b      	lsrs	r3, r3, #20
 800943c:	051b      	lsls	r3, r3, #20
 800943e:	b183      	cbz	r3, 8009462 <_dtoa_r+0x90a>
 8009440:	9b05      	ldr	r3, [sp, #20]
 8009442:	3301      	adds	r3, #1
 8009444:	9305      	str	r3, [sp, #20]
 8009446:	9b06      	ldr	r3, [sp, #24]
 8009448:	3301      	adds	r3, #1
 800944a:	9306      	str	r3, [sp, #24]
 800944c:	f04f 0801 	mov.w	r8, #1
 8009450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009452:	2b00      	cmp	r3, #0
 8009454:	f47f af6f 	bne.w	8009336 <_dtoa_r+0x7de>
 8009458:	2001      	movs	r0, #1
 800945a:	e774      	b.n	8009346 <_dtoa_r+0x7ee>
 800945c:	f04f 0800 	mov.w	r8, #0
 8009460:	e7f6      	b.n	8009450 <_dtoa_r+0x8f8>
 8009462:	4698      	mov	r8, r3
 8009464:	e7f4      	b.n	8009450 <_dtoa_r+0x8f8>
 8009466:	d082      	beq.n	800936e <_dtoa_r+0x816>
 8009468:	9a05      	ldr	r2, [sp, #20]
 800946a:	331c      	adds	r3, #28
 800946c:	441a      	add	r2, r3
 800946e:	9205      	str	r2, [sp, #20]
 8009470:	9a06      	ldr	r2, [sp, #24]
 8009472:	441a      	add	r2, r3
 8009474:	441d      	add	r5, r3
 8009476:	9206      	str	r2, [sp, #24]
 8009478:	e779      	b.n	800936e <_dtoa_r+0x816>
 800947a:	4603      	mov	r3, r0
 800947c:	e7f4      	b.n	8009468 <_dtoa_r+0x910>
 800947e:	9b04      	ldr	r3, [sp, #16]
 8009480:	2b00      	cmp	r3, #0
 8009482:	dc37      	bgt.n	80094f4 <_dtoa_r+0x99c>
 8009484:	9b07      	ldr	r3, [sp, #28]
 8009486:	2b02      	cmp	r3, #2
 8009488:	dd34      	ble.n	80094f4 <_dtoa_r+0x99c>
 800948a:	9b04      	ldr	r3, [sp, #16]
 800948c:	9301      	str	r3, [sp, #4]
 800948e:	9b01      	ldr	r3, [sp, #4]
 8009490:	b963      	cbnz	r3, 80094ac <_dtoa_r+0x954>
 8009492:	4631      	mov	r1, r6
 8009494:	2205      	movs	r2, #5
 8009496:	4620      	mov	r0, r4
 8009498:	f000 fab2 	bl	8009a00 <__multadd>
 800949c:	4601      	mov	r1, r0
 800949e:	4606      	mov	r6, r0
 80094a0:	4650      	mov	r0, sl
 80094a2:	f000 fd11 	bl	8009ec8 <__mcmp>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	f73f adbb 	bgt.w	8009022 <_dtoa_r+0x4ca>
 80094ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ae:	9d00      	ldr	r5, [sp, #0]
 80094b0:	ea6f 0b03 	mvn.w	fp, r3
 80094b4:	f04f 0800 	mov.w	r8, #0
 80094b8:	4631      	mov	r1, r6
 80094ba:	4620      	mov	r0, r4
 80094bc:	f000 fa7e 	bl	80099bc <_Bfree>
 80094c0:	2f00      	cmp	r7, #0
 80094c2:	f43f aeab 	beq.w	800921c <_dtoa_r+0x6c4>
 80094c6:	f1b8 0f00 	cmp.w	r8, #0
 80094ca:	d005      	beq.n	80094d8 <_dtoa_r+0x980>
 80094cc:	45b8      	cmp	r8, r7
 80094ce:	d003      	beq.n	80094d8 <_dtoa_r+0x980>
 80094d0:	4641      	mov	r1, r8
 80094d2:	4620      	mov	r0, r4
 80094d4:	f000 fa72 	bl	80099bc <_Bfree>
 80094d8:	4639      	mov	r1, r7
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 fa6e 	bl	80099bc <_Bfree>
 80094e0:	e69c      	b.n	800921c <_dtoa_r+0x6c4>
 80094e2:	2600      	movs	r6, #0
 80094e4:	4637      	mov	r7, r6
 80094e6:	e7e1      	b.n	80094ac <_dtoa_r+0x954>
 80094e8:	46bb      	mov	fp, r7
 80094ea:	4637      	mov	r7, r6
 80094ec:	e599      	b.n	8009022 <_dtoa_r+0x4ca>
 80094ee:	bf00      	nop
 80094f0:	40240000 	.word	0x40240000
 80094f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f000 80c8 	beq.w	800968c <_dtoa_r+0xb34>
 80094fc:	9b04      	ldr	r3, [sp, #16]
 80094fe:	9301      	str	r3, [sp, #4]
 8009500:	2d00      	cmp	r5, #0
 8009502:	dd05      	ble.n	8009510 <_dtoa_r+0x9b8>
 8009504:	4639      	mov	r1, r7
 8009506:	462a      	mov	r2, r5
 8009508:	4620      	mov	r0, r4
 800950a:	f000 fc71 	bl	8009df0 <__lshift>
 800950e:	4607      	mov	r7, r0
 8009510:	f1b8 0f00 	cmp.w	r8, #0
 8009514:	d05b      	beq.n	80095ce <_dtoa_r+0xa76>
 8009516:	6879      	ldr	r1, [r7, #4]
 8009518:	4620      	mov	r0, r4
 800951a:	f000 fa0f 	bl	800993c <_Balloc>
 800951e:	4605      	mov	r5, r0
 8009520:	b928      	cbnz	r0, 800952e <_dtoa_r+0x9d6>
 8009522:	4b83      	ldr	r3, [pc, #524]	; (8009730 <_dtoa_r+0xbd8>)
 8009524:	4602      	mov	r2, r0
 8009526:	f240 21ef 	movw	r1, #751	; 0x2ef
 800952a:	f7ff bb2e 	b.w	8008b8a <_dtoa_r+0x32>
 800952e:	693a      	ldr	r2, [r7, #16]
 8009530:	3202      	adds	r2, #2
 8009532:	0092      	lsls	r2, r2, #2
 8009534:	f107 010c 	add.w	r1, r7, #12
 8009538:	300c      	adds	r0, #12
 800953a:	f7ff fa6e 	bl	8008a1a <memcpy>
 800953e:	2201      	movs	r2, #1
 8009540:	4629      	mov	r1, r5
 8009542:	4620      	mov	r0, r4
 8009544:	f000 fc54 	bl	8009df0 <__lshift>
 8009548:	9b00      	ldr	r3, [sp, #0]
 800954a:	3301      	adds	r3, #1
 800954c:	9304      	str	r3, [sp, #16]
 800954e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009552:	4413      	add	r3, r2
 8009554:	9308      	str	r3, [sp, #32]
 8009556:	9b02      	ldr	r3, [sp, #8]
 8009558:	f003 0301 	and.w	r3, r3, #1
 800955c:	46b8      	mov	r8, r7
 800955e:	9306      	str	r3, [sp, #24]
 8009560:	4607      	mov	r7, r0
 8009562:	9b04      	ldr	r3, [sp, #16]
 8009564:	4631      	mov	r1, r6
 8009566:	3b01      	subs	r3, #1
 8009568:	4650      	mov	r0, sl
 800956a:	9301      	str	r3, [sp, #4]
 800956c:	f7ff fa6a 	bl	8008a44 <quorem>
 8009570:	4641      	mov	r1, r8
 8009572:	9002      	str	r0, [sp, #8]
 8009574:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009578:	4650      	mov	r0, sl
 800957a:	f000 fca5 	bl	8009ec8 <__mcmp>
 800957e:	463a      	mov	r2, r7
 8009580:	9005      	str	r0, [sp, #20]
 8009582:	4631      	mov	r1, r6
 8009584:	4620      	mov	r0, r4
 8009586:	f000 fcbb 	bl	8009f00 <__mdiff>
 800958a:	68c2      	ldr	r2, [r0, #12]
 800958c:	4605      	mov	r5, r0
 800958e:	bb02      	cbnz	r2, 80095d2 <_dtoa_r+0xa7a>
 8009590:	4601      	mov	r1, r0
 8009592:	4650      	mov	r0, sl
 8009594:	f000 fc98 	bl	8009ec8 <__mcmp>
 8009598:	4602      	mov	r2, r0
 800959a:	4629      	mov	r1, r5
 800959c:	4620      	mov	r0, r4
 800959e:	9209      	str	r2, [sp, #36]	; 0x24
 80095a0:	f000 fa0c 	bl	80099bc <_Bfree>
 80095a4:	9b07      	ldr	r3, [sp, #28]
 80095a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095a8:	9d04      	ldr	r5, [sp, #16]
 80095aa:	ea43 0102 	orr.w	r1, r3, r2
 80095ae:	9b06      	ldr	r3, [sp, #24]
 80095b0:	4319      	orrs	r1, r3
 80095b2:	d110      	bne.n	80095d6 <_dtoa_r+0xa7e>
 80095b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80095b8:	d029      	beq.n	800960e <_dtoa_r+0xab6>
 80095ba:	9b05      	ldr	r3, [sp, #20]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	dd02      	ble.n	80095c6 <_dtoa_r+0xa6e>
 80095c0:	9b02      	ldr	r3, [sp, #8]
 80095c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80095c6:	9b01      	ldr	r3, [sp, #4]
 80095c8:	f883 9000 	strb.w	r9, [r3]
 80095cc:	e774      	b.n	80094b8 <_dtoa_r+0x960>
 80095ce:	4638      	mov	r0, r7
 80095d0:	e7ba      	b.n	8009548 <_dtoa_r+0x9f0>
 80095d2:	2201      	movs	r2, #1
 80095d4:	e7e1      	b.n	800959a <_dtoa_r+0xa42>
 80095d6:	9b05      	ldr	r3, [sp, #20]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	db04      	blt.n	80095e6 <_dtoa_r+0xa8e>
 80095dc:	9907      	ldr	r1, [sp, #28]
 80095de:	430b      	orrs	r3, r1
 80095e0:	9906      	ldr	r1, [sp, #24]
 80095e2:	430b      	orrs	r3, r1
 80095e4:	d120      	bne.n	8009628 <_dtoa_r+0xad0>
 80095e6:	2a00      	cmp	r2, #0
 80095e8:	dded      	ble.n	80095c6 <_dtoa_r+0xa6e>
 80095ea:	4651      	mov	r1, sl
 80095ec:	2201      	movs	r2, #1
 80095ee:	4620      	mov	r0, r4
 80095f0:	f000 fbfe 	bl	8009df0 <__lshift>
 80095f4:	4631      	mov	r1, r6
 80095f6:	4682      	mov	sl, r0
 80095f8:	f000 fc66 	bl	8009ec8 <__mcmp>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	dc03      	bgt.n	8009608 <_dtoa_r+0xab0>
 8009600:	d1e1      	bne.n	80095c6 <_dtoa_r+0xa6e>
 8009602:	f019 0f01 	tst.w	r9, #1
 8009606:	d0de      	beq.n	80095c6 <_dtoa_r+0xa6e>
 8009608:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800960c:	d1d8      	bne.n	80095c0 <_dtoa_r+0xa68>
 800960e:	9a01      	ldr	r2, [sp, #4]
 8009610:	2339      	movs	r3, #57	; 0x39
 8009612:	7013      	strb	r3, [r2, #0]
 8009614:	462b      	mov	r3, r5
 8009616:	461d      	mov	r5, r3
 8009618:	3b01      	subs	r3, #1
 800961a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800961e:	2a39      	cmp	r2, #57	; 0x39
 8009620:	d06c      	beq.n	80096fc <_dtoa_r+0xba4>
 8009622:	3201      	adds	r2, #1
 8009624:	701a      	strb	r2, [r3, #0]
 8009626:	e747      	b.n	80094b8 <_dtoa_r+0x960>
 8009628:	2a00      	cmp	r2, #0
 800962a:	dd07      	ble.n	800963c <_dtoa_r+0xae4>
 800962c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009630:	d0ed      	beq.n	800960e <_dtoa_r+0xab6>
 8009632:	9a01      	ldr	r2, [sp, #4]
 8009634:	f109 0301 	add.w	r3, r9, #1
 8009638:	7013      	strb	r3, [r2, #0]
 800963a:	e73d      	b.n	80094b8 <_dtoa_r+0x960>
 800963c:	9b04      	ldr	r3, [sp, #16]
 800963e:	9a08      	ldr	r2, [sp, #32]
 8009640:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009644:	4293      	cmp	r3, r2
 8009646:	d043      	beq.n	80096d0 <_dtoa_r+0xb78>
 8009648:	4651      	mov	r1, sl
 800964a:	2300      	movs	r3, #0
 800964c:	220a      	movs	r2, #10
 800964e:	4620      	mov	r0, r4
 8009650:	f000 f9d6 	bl	8009a00 <__multadd>
 8009654:	45b8      	cmp	r8, r7
 8009656:	4682      	mov	sl, r0
 8009658:	f04f 0300 	mov.w	r3, #0
 800965c:	f04f 020a 	mov.w	r2, #10
 8009660:	4641      	mov	r1, r8
 8009662:	4620      	mov	r0, r4
 8009664:	d107      	bne.n	8009676 <_dtoa_r+0xb1e>
 8009666:	f000 f9cb 	bl	8009a00 <__multadd>
 800966a:	4680      	mov	r8, r0
 800966c:	4607      	mov	r7, r0
 800966e:	9b04      	ldr	r3, [sp, #16]
 8009670:	3301      	adds	r3, #1
 8009672:	9304      	str	r3, [sp, #16]
 8009674:	e775      	b.n	8009562 <_dtoa_r+0xa0a>
 8009676:	f000 f9c3 	bl	8009a00 <__multadd>
 800967a:	4639      	mov	r1, r7
 800967c:	4680      	mov	r8, r0
 800967e:	2300      	movs	r3, #0
 8009680:	220a      	movs	r2, #10
 8009682:	4620      	mov	r0, r4
 8009684:	f000 f9bc 	bl	8009a00 <__multadd>
 8009688:	4607      	mov	r7, r0
 800968a:	e7f0      	b.n	800966e <_dtoa_r+0xb16>
 800968c:	9b04      	ldr	r3, [sp, #16]
 800968e:	9301      	str	r3, [sp, #4]
 8009690:	9d00      	ldr	r5, [sp, #0]
 8009692:	4631      	mov	r1, r6
 8009694:	4650      	mov	r0, sl
 8009696:	f7ff f9d5 	bl	8008a44 <quorem>
 800969a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800969e:	9b00      	ldr	r3, [sp, #0]
 80096a0:	f805 9b01 	strb.w	r9, [r5], #1
 80096a4:	1aea      	subs	r2, r5, r3
 80096a6:	9b01      	ldr	r3, [sp, #4]
 80096a8:	4293      	cmp	r3, r2
 80096aa:	dd07      	ble.n	80096bc <_dtoa_r+0xb64>
 80096ac:	4651      	mov	r1, sl
 80096ae:	2300      	movs	r3, #0
 80096b0:	220a      	movs	r2, #10
 80096b2:	4620      	mov	r0, r4
 80096b4:	f000 f9a4 	bl	8009a00 <__multadd>
 80096b8:	4682      	mov	sl, r0
 80096ba:	e7ea      	b.n	8009692 <_dtoa_r+0xb3a>
 80096bc:	9b01      	ldr	r3, [sp, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	bfc8      	it	gt
 80096c2:	461d      	movgt	r5, r3
 80096c4:	9b00      	ldr	r3, [sp, #0]
 80096c6:	bfd8      	it	le
 80096c8:	2501      	movle	r5, #1
 80096ca:	441d      	add	r5, r3
 80096cc:	f04f 0800 	mov.w	r8, #0
 80096d0:	4651      	mov	r1, sl
 80096d2:	2201      	movs	r2, #1
 80096d4:	4620      	mov	r0, r4
 80096d6:	f000 fb8b 	bl	8009df0 <__lshift>
 80096da:	4631      	mov	r1, r6
 80096dc:	4682      	mov	sl, r0
 80096de:	f000 fbf3 	bl	8009ec8 <__mcmp>
 80096e2:	2800      	cmp	r0, #0
 80096e4:	dc96      	bgt.n	8009614 <_dtoa_r+0xabc>
 80096e6:	d102      	bne.n	80096ee <_dtoa_r+0xb96>
 80096e8:	f019 0f01 	tst.w	r9, #1
 80096ec:	d192      	bne.n	8009614 <_dtoa_r+0xabc>
 80096ee:	462b      	mov	r3, r5
 80096f0:	461d      	mov	r5, r3
 80096f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096f6:	2a30      	cmp	r2, #48	; 0x30
 80096f8:	d0fa      	beq.n	80096f0 <_dtoa_r+0xb98>
 80096fa:	e6dd      	b.n	80094b8 <_dtoa_r+0x960>
 80096fc:	9a00      	ldr	r2, [sp, #0]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d189      	bne.n	8009616 <_dtoa_r+0xabe>
 8009702:	f10b 0b01 	add.w	fp, fp, #1
 8009706:	2331      	movs	r3, #49	; 0x31
 8009708:	e796      	b.n	8009638 <_dtoa_r+0xae0>
 800970a:	4b0a      	ldr	r3, [pc, #40]	; (8009734 <_dtoa_r+0xbdc>)
 800970c:	f7ff ba99 	b.w	8008c42 <_dtoa_r+0xea>
 8009710:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009712:	2b00      	cmp	r3, #0
 8009714:	f47f aa6d 	bne.w	8008bf2 <_dtoa_r+0x9a>
 8009718:	4b07      	ldr	r3, [pc, #28]	; (8009738 <_dtoa_r+0xbe0>)
 800971a:	f7ff ba92 	b.w	8008c42 <_dtoa_r+0xea>
 800971e:	9b01      	ldr	r3, [sp, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	dcb5      	bgt.n	8009690 <_dtoa_r+0xb38>
 8009724:	9b07      	ldr	r3, [sp, #28]
 8009726:	2b02      	cmp	r3, #2
 8009728:	f73f aeb1 	bgt.w	800948e <_dtoa_r+0x936>
 800972c:	e7b0      	b.n	8009690 <_dtoa_r+0xb38>
 800972e:	bf00      	nop
 8009730:	0800e3f6 	.word	0x0800e3f6
 8009734:	0800e351 	.word	0x0800e351
 8009738:	0800e37a 	.word	0x0800e37a

0800973c <_free_r>:
 800973c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800973e:	2900      	cmp	r1, #0
 8009740:	d044      	beq.n	80097cc <_free_r+0x90>
 8009742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009746:	9001      	str	r0, [sp, #4]
 8009748:	2b00      	cmp	r3, #0
 800974a:	f1a1 0404 	sub.w	r4, r1, #4
 800974e:	bfb8      	it	lt
 8009750:	18e4      	addlt	r4, r4, r3
 8009752:	f000 f8e7 	bl	8009924 <__malloc_lock>
 8009756:	4a1e      	ldr	r2, [pc, #120]	; (80097d0 <_free_r+0x94>)
 8009758:	9801      	ldr	r0, [sp, #4]
 800975a:	6813      	ldr	r3, [r2, #0]
 800975c:	b933      	cbnz	r3, 800976c <_free_r+0x30>
 800975e:	6063      	str	r3, [r4, #4]
 8009760:	6014      	str	r4, [r2, #0]
 8009762:	b003      	add	sp, #12
 8009764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009768:	f000 b8e2 	b.w	8009930 <__malloc_unlock>
 800976c:	42a3      	cmp	r3, r4
 800976e:	d908      	bls.n	8009782 <_free_r+0x46>
 8009770:	6825      	ldr	r5, [r4, #0]
 8009772:	1961      	adds	r1, r4, r5
 8009774:	428b      	cmp	r3, r1
 8009776:	bf01      	itttt	eq
 8009778:	6819      	ldreq	r1, [r3, #0]
 800977a:	685b      	ldreq	r3, [r3, #4]
 800977c:	1949      	addeq	r1, r1, r5
 800977e:	6021      	streq	r1, [r4, #0]
 8009780:	e7ed      	b.n	800975e <_free_r+0x22>
 8009782:	461a      	mov	r2, r3
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	b10b      	cbz	r3, 800978c <_free_r+0x50>
 8009788:	42a3      	cmp	r3, r4
 800978a:	d9fa      	bls.n	8009782 <_free_r+0x46>
 800978c:	6811      	ldr	r1, [r2, #0]
 800978e:	1855      	adds	r5, r2, r1
 8009790:	42a5      	cmp	r5, r4
 8009792:	d10b      	bne.n	80097ac <_free_r+0x70>
 8009794:	6824      	ldr	r4, [r4, #0]
 8009796:	4421      	add	r1, r4
 8009798:	1854      	adds	r4, r2, r1
 800979a:	42a3      	cmp	r3, r4
 800979c:	6011      	str	r1, [r2, #0]
 800979e:	d1e0      	bne.n	8009762 <_free_r+0x26>
 80097a0:	681c      	ldr	r4, [r3, #0]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	6053      	str	r3, [r2, #4]
 80097a6:	440c      	add	r4, r1
 80097a8:	6014      	str	r4, [r2, #0]
 80097aa:	e7da      	b.n	8009762 <_free_r+0x26>
 80097ac:	d902      	bls.n	80097b4 <_free_r+0x78>
 80097ae:	230c      	movs	r3, #12
 80097b0:	6003      	str	r3, [r0, #0]
 80097b2:	e7d6      	b.n	8009762 <_free_r+0x26>
 80097b4:	6825      	ldr	r5, [r4, #0]
 80097b6:	1961      	adds	r1, r4, r5
 80097b8:	428b      	cmp	r3, r1
 80097ba:	bf04      	itt	eq
 80097bc:	6819      	ldreq	r1, [r3, #0]
 80097be:	685b      	ldreq	r3, [r3, #4]
 80097c0:	6063      	str	r3, [r4, #4]
 80097c2:	bf04      	itt	eq
 80097c4:	1949      	addeq	r1, r1, r5
 80097c6:	6021      	streq	r1, [r4, #0]
 80097c8:	6054      	str	r4, [r2, #4]
 80097ca:	e7ca      	b.n	8009762 <_free_r+0x26>
 80097cc:	b003      	add	sp, #12
 80097ce:	bd30      	pop	{r4, r5, pc}
 80097d0:	20005204 	.word	0x20005204

080097d4 <malloc>:
 80097d4:	4b02      	ldr	r3, [pc, #8]	; (80097e0 <malloc+0xc>)
 80097d6:	4601      	mov	r1, r0
 80097d8:	6818      	ldr	r0, [r3, #0]
 80097da:	f000 b823 	b.w	8009824 <_malloc_r>
 80097de:	bf00      	nop
 80097e0:	20000078 	.word	0x20000078

080097e4 <sbrk_aligned>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	4e0e      	ldr	r6, [pc, #56]	; (8009820 <sbrk_aligned+0x3c>)
 80097e8:	460c      	mov	r4, r1
 80097ea:	6831      	ldr	r1, [r6, #0]
 80097ec:	4605      	mov	r5, r0
 80097ee:	b911      	cbnz	r1, 80097f6 <sbrk_aligned+0x12>
 80097f0:	f001 fe1a 	bl	800b428 <_sbrk_r>
 80097f4:	6030      	str	r0, [r6, #0]
 80097f6:	4621      	mov	r1, r4
 80097f8:	4628      	mov	r0, r5
 80097fa:	f001 fe15 	bl	800b428 <_sbrk_r>
 80097fe:	1c43      	adds	r3, r0, #1
 8009800:	d00a      	beq.n	8009818 <sbrk_aligned+0x34>
 8009802:	1cc4      	adds	r4, r0, #3
 8009804:	f024 0403 	bic.w	r4, r4, #3
 8009808:	42a0      	cmp	r0, r4
 800980a:	d007      	beq.n	800981c <sbrk_aligned+0x38>
 800980c:	1a21      	subs	r1, r4, r0
 800980e:	4628      	mov	r0, r5
 8009810:	f001 fe0a 	bl	800b428 <_sbrk_r>
 8009814:	3001      	adds	r0, #1
 8009816:	d101      	bne.n	800981c <sbrk_aligned+0x38>
 8009818:	f04f 34ff 	mov.w	r4, #4294967295
 800981c:	4620      	mov	r0, r4
 800981e:	bd70      	pop	{r4, r5, r6, pc}
 8009820:	20005208 	.word	0x20005208

08009824 <_malloc_r>:
 8009824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009828:	1ccd      	adds	r5, r1, #3
 800982a:	f025 0503 	bic.w	r5, r5, #3
 800982e:	3508      	adds	r5, #8
 8009830:	2d0c      	cmp	r5, #12
 8009832:	bf38      	it	cc
 8009834:	250c      	movcc	r5, #12
 8009836:	2d00      	cmp	r5, #0
 8009838:	4607      	mov	r7, r0
 800983a:	db01      	blt.n	8009840 <_malloc_r+0x1c>
 800983c:	42a9      	cmp	r1, r5
 800983e:	d905      	bls.n	800984c <_malloc_r+0x28>
 8009840:	230c      	movs	r3, #12
 8009842:	603b      	str	r3, [r7, #0]
 8009844:	2600      	movs	r6, #0
 8009846:	4630      	mov	r0, r6
 8009848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800984c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009920 <_malloc_r+0xfc>
 8009850:	f000 f868 	bl	8009924 <__malloc_lock>
 8009854:	f8d8 3000 	ldr.w	r3, [r8]
 8009858:	461c      	mov	r4, r3
 800985a:	bb5c      	cbnz	r4, 80098b4 <_malloc_r+0x90>
 800985c:	4629      	mov	r1, r5
 800985e:	4638      	mov	r0, r7
 8009860:	f7ff ffc0 	bl	80097e4 <sbrk_aligned>
 8009864:	1c43      	adds	r3, r0, #1
 8009866:	4604      	mov	r4, r0
 8009868:	d155      	bne.n	8009916 <_malloc_r+0xf2>
 800986a:	f8d8 4000 	ldr.w	r4, [r8]
 800986e:	4626      	mov	r6, r4
 8009870:	2e00      	cmp	r6, #0
 8009872:	d145      	bne.n	8009900 <_malloc_r+0xdc>
 8009874:	2c00      	cmp	r4, #0
 8009876:	d048      	beq.n	800990a <_malloc_r+0xe6>
 8009878:	6823      	ldr	r3, [r4, #0]
 800987a:	4631      	mov	r1, r6
 800987c:	4638      	mov	r0, r7
 800987e:	eb04 0903 	add.w	r9, r4, r3
 8009882:	f001 fdd1 	bl	800b428 <_sbrk_r>
 8009886:	4581      	cmp	r9, r0
 8009888:	d13f      	bne.n	800990a <_malloc_r+0xe6>
 800988a:	6821      	ldr	r1, [r4, #0]
 800988c:	1a6d      	subs	r5, r5, r1
 800988e:	4629      	mov	r1, r5
 8009890:	4638      	mov	r0, r7
 8009892:	f7ff ffa7 	bl	80097e4 <sbrk_aligned>
 8009896:	3001      	adds	r0, #1
 8009898:	d037      	beq.n	800990a <_malloc_r+0xe6>
 800989a:	6823      	ldr	r3, [r4, #0]
 800989c:	442b      	add	r3, r5
 800989e:	6023      	str	r3, [r4, #0]
 80098a0:	f8d8 3000 	ldr.w	r3, [r8]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d038      	beq.n	800991a <_malloc_r+0xf6>
 80098a8:	685a      	ldr	r2, [r3, #4]
 80098aa:	42a2      	cmp	r2, r4
 80098ac:	d12b      	bne.n	8009906 <_malloc_r+0xe2>
 80098ae:	2200      	movs	r2, #0
 80098b0:	605a      	str	r2, [r3, #4]
 80098b2:	e00f      	b.n	80098d4 <_malloc_r+0xb0>
 80098b4:	6822      	ldr	r2, [r4, #0]
 80098b6:	1b52      	subs	r2, r2, r5
 80098b8:	d41f      	bmi.n	80098fa <_malloc_r+0xd6>
 80098ba:	2a0b      	cmp	r2, #11
 80098bc:	d917      	bls.n	80098ee <_malloc_r+0xca>
 80098be:	1961      	adds	r1, r4, r5
 80098c0:	42a3      	cmp	r3, r4
 80098c2:	6025      	str	r5, [r4, #0]
 80098c4:	bf18      	it	ne
 80098c6:	6059      	strne	r1, [r3, #4]
 80098c8:	6863      	ldr	r3, [r4, #4]
 80098ca:	bf08      	it	eq
 80098cc:	f8c8 1000 	streq.w	r1, [r8]
 80098d0:	5162      	str	r2, [r4, r5]
 80098d2:	604b      	str	r3, [r1, #4]
 80098d4:	4638      	mov	r0, r7
 80098d6:	f104 060b 	add.w	r6, r4, #11
 80098da:	f000 f829 	bl	8009930 <__malloc_unlock>
 80098de:	f026 0607 	bic.w	r6, r6, #7
 80098e2:	1d23      	adds	r3, r4, #4
 80098e4:	1af2      	subs	r2, r6, r3
 80098e6:	d0ae      	beq.n	8009846 <_malloc_r+0x22>
 80098e8:	1b9b      	subs	r3, r3, r6
 80098ea:	50a3      	str	r3, [r4, r2]
 80098ec:	e7ab      	b.n	8009846 <_malloc_r+0x22>
 80098ee:	42a3      	cmp	r3, r4
 80098f0:	6862      	ldr	r2, [r4, #4]
 80098f2:	d1dd      	bne.n	80098b0 <_malloc_r+0x8c>
 80098f4:	f8c8 2000 	str.w	r2, [r8]
 80098f8:	e7ec      	b.n	80098d4 <_malloc_r+0xb0>
 80098fa:	4623      	mov	r3, r4
 80098fc:	6864      	ldr	r4, [r4, #4]
 80098fe:	e7ac      	b.n	800985a <_malloc_r+0x36>
 8009900:	4634      	mov	r4, r6
 8009902:	6876      	ldr	r6, [r6, #4]
 8009904:	e7b4      	b.n	8009870 <_malloc_r+0x4c>
 8009906:	4613      	mov	r3, r2
 8009908:	e7cc      	b.n	80098a4 <_malloc_r+0x80>
 800990a:	230c      	movs	r3, #12
 800990c:	603b      	str	r3, [r7, #0]
 800990e:	4638      	mov	r0, r7
 8009910:	f000 f80e 	bl	8009930 <__malloc_unlock>
 8009914:	e797      	b.n	8009846 <_malloc_r+0x22>
 8009916:	6025      	str	r5, [r4, #0]
 8009918:	e7dc      	b.n	80098d4 <_malloc_r+0xb0>
 800991a:	605b      	str	r3, [r3, #4]
 800991c:	deff      	udf	#255	; 0xff
 800991e:	bf00      	nop
 8009920:	20005204 	.word	0x20005204

08009924 <__malloc_lock>:
 8009924:	4801      	ldr	r0, [pc, #4]	; (800992c <__malloc_lock+0x8>)
 8009926:	f7ff b876 	b.w	8008a16 <__retarget_lock_acquire_recursive>
 800992a:	bf00      	nop
 800992c:	20005200 	.word	0x20005200

08009930 <__malloc_unlock>:
 8009930:	4801      	ldr	r0, [pc, #4]	; (8009938 <__malloc_unlock+0x8>)
 8009932:	f7ff b871 	b.w	8008a18 <__retarget_lock_release_recursive>
 8009936:	bf00      	nop
 8009938:	20005200 	.word	0x20005200

0800993c <_Balloc>:
 800993c:	b570      	push	{r4, r5, r6, lr}
 800993e:	69c6      	ldr	r6, [r0, #28]
 8009940:	4604      	mov	r4, r0
 8009942:	460d      	mov	r5, r1
 8009944:	b976      	cbnz	r6, 8009964 <_Balloc+0x28>
 8009946:	2010      	movs	r0, #16
 8009948:	f7ff ff44 	bl	80097d4 <malloc>
 800994c:	4602      	mov	r2, r0
 800994e:	61e0      	str	r0, [r4, #28]
 8009950:	b920      	cbnz	r0, 800995c <_Balloc+0x20>
 8009952:	4b18      	ldr	r3, [pc, #96]	; (80099b4 <_Balloc+0x78>)
 8009954:	4818      	ldr	r0, [pc, #96]	; (80099b8 <_Balloc+0x7c>)
 8009956:	216b      	movs	r1, #107	; 0x6b
 8009958:	f001 fd7e 	bl	800b458 <__assert_func>
 800995c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009960:	6006      	str	r6, [r0, #0]
 8009962:	60c6      	str	r6, [r0, #12]
 8009964:	69e6      	ldr	r6, [r4, #28]
 8009966:	68f3      	ldr	r3, [r6, #12]
 8009968:	b183      	cbz	r3, 800998c <_Balloc+0x50>
 800996a:	69e3      	ldr	r3, [r4, #28]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009972:	b9b8      	cbnz	r0, 80099a4 <_Balloc+0x68>
 8009974:	2101      	movs	r1, #1
 8009976:	fa01 f605 	lsl.w	r6, r1, r5
 800997a:	1d72      	adds	r2, r6, #5
 800997c:	0092      	lsls	r2, r2, #2
 800997e:	4620      	mov	r0, r4
 8009980:	f001 fd88 	bl	800b494 <_calloc_r>
 8009984:	b160      	cbz	r0, 80099a0 <_Balloc+0x64>
 8009986:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800998a:	e00e      	b.n	80099aa <_Balloc+0x6e>
 800998c:	2221      	movs	r2, #33	; 0x21
 800998e:	2104      	movs	r1, #4
 8009990:	4620      	mov	r0, r4
 8009992:	f001 fd7f 	bl	800b494 <_calloc_r>
 8009996:	69e3      	ldr	r3, [r4, #28]
 8009998:	60f0      	str	r0, [r6, #12]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d1e4      	bne.n	800996a <_Balloc+0x2e>
 80099a0:	2000      	movs	r0, #0
 80099a2:	bd70      	pop	{r4, r5, r6, pc}
 80099a4:	6802      	ldr	r2, [r0, #0]
 80099a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80099aa:	2300      	movs	r3, #0
 80099ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80099b0:	e7f7      	b.n	80099a2 <_Balloc+0x66>
 80099b2:	bf00      	nop
 80099b4:	0800e387 	.word	0x0800e387
 80099b8:	0800e407 	.word	0x0800e407

080099bc <_Bfree>:
 80099bc:	b570      	push	{r4, r5, r6, lr}
 80099be:	69c6      	ldr	r6, [r0, #28]
 80099c0:	4605      	mov	r5, r0
 80099c2:	460c      	mov	r4, r1
 80099c4:	b976      	cbnz	r6, 80099e4 <_Bfree+0x28>
 80099c6:	2010      	movs	r0, #16
 80099c8:	f7ff ff04 	bl	80097d4 <malloc>
 80099cc:	4602      	mov	r2, r0
 80099ce:	61e8      	str	r0, [r5, #28]
 80099d0:	b920      	cbnz	r0, 80099dc <_Bfree+0x20>
 80099d2:	4b09      	ldr	r3, [pc, #36]	; (80099f8 <_Bfree+0x3c>)
 80099d4:	4809      	ldr	r0, [pc, #36]	; (80099fc <_Bfree+0x40>)
 80099d6:	218f      	movs	r1, #143	; 0x8f
 80099d8:	f001 fd3e 	bl	800b458 <__assert_func>
 80099dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099e0:	6006      	str	r6, [r0, #0]
 80099e2:	60c6      	str	r6, [r0, #12]
 80099e4:	b13c      	cbz	r4, 80099f6 <_Bfree+0x3a>
 80099e6:	69eb      	ldr	r3, [r5, #28]
 80099e8:	6862      	ldr	r2, [r4, #4]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80099f0:	6021      	str	r1, [r4, #0]
 80099f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80099f6:	bd70      	pop	{r4, r5, r6, pc}
 80099f8:	0800e387 	.word	0x0800e387
 80099fc:	0800e407 	.word	0x0800e407

08009a00 <__multadd>:
 8009a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a04:	690d      	ldr	r5, [r1, #16]
 8009a06:	4607      	mov	r7, r0
 8009a08:	460c      	mov	r4, r1
 8009a0a:	461e      	mov	r6, r3
 8009a0c:	f101 0c14 	add.w	ip, r1, #20
 8009a10:	2000      	movs	r0, #0
 8009a12:	f8dc 3000 	ldr.w	r3, [ip]
 8009a16:	b299      	uxth	r1, r3
 8009a18:	fb02 6101 	mla	r1, r2, r1, r6
 8009a1c:	0c1e      	lsrs	r6, r3, #16
 8009a1e:	0c0b      	lsrs	r3, r1, #16
 8009a20:	fb02 3306 	mla	r3, r2, r6, r3
 8009a24:	b289      	uxth	r1, r1
 8009a26:	3001      	adds	r0, #1
 8009a28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a2c:	4285      	cmp	r5, r0
 8009a2e:	f84c 1b04 	str.w	r1, [ip], #4
 8009a32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a36:	dcec      	bgt.n	8009a12 <__multadd+0x12>
 8009a38:	b30e      	cbz	r6, 8009a7e <__multadd+0x7e>
 8009a3a:	68a3      	ldr	r3, [r4, #8]
 8009a3c:	42ab      	cmp	r3, r5
 8009a3e:	dc19      	bgt.n	8009a74 <__multadd+0x74>
 8009a40:	6861      	ldr	r1, [r4, #4]
 8009a42:	4638      	mov	r0, r7
 8009a44:	3101      	adds	r1, #1
 8009a46:	f7ff ff79 	bl	800993c <_Balloc>
 8009a4a:	4680      	mov	r8, r0
 8009a4c:	b928      	cbnz	r0, 8009a5a <__multadd+0x5a>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	4b0c      	ldr	r3, [pc, #48]	; (8009a84 <__multadd+0x84>)
 8009a52:	480d      	ldr	r0, [pc, #52]	; (8009a88 <__multadd+0x88>)
 8009a54:	21ba      	movs	r1, #186	; 0xba
 8009a56:	f001 fcff 	bl	800b458 <__assert_func>
 8009a5a:	6922      	ldr	r2, [r4, #16]
 8009a5c:	3202      	adds	r2, #2
 8009a5e:	f104 010c 	add.w	r1, r4, #12
 8009a62:	0092      	lsls	r2, r2, #2
 8009a64:	300c      	adds	r0, #12
 8009a66:	f7fe ffd8 	bl	8008a1a <memcpy>
 8009a6a:	4621      	mov	r1, r4
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	f7ff ffa5 	bl	80099bc <_Bfree>
 8009a72:	4644      	mov	r4, r8
 8009a74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a78:	3501      	adds	r5, #1
 8009a7a:	615e      	str	r6, [r3, #20]
 8009a7c:	6125      	str	r5, [r4, #16]
 8009a7e:	4620      	mov	r0, r4
 8009a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a84:	0800e3f6 	.word	0x0800e3f6
 8009a88:	0800e407 	.word	0x0800e407

08009a8c <__s2b>:
 8009a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a90:	460c      	mov	r4, r1
 8009a92:	4615      	mov	r5, r2
 8009a94:	461f      	mov	r7, r3
 8009a96:	2209      	movs	r2, #9
 8009a98:	3308      	adds	r3, #8
 8009a9a:	4606      	mov	r6, r0
 8009a9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	db09      	blt.n	8009abc <__s2b+0x30>
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	f7ff ff47 	bl	800993c <_Balloc>
 8009aae:	b940      	cbnz	r0, 8009ac2 <__s2b+0x36>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	4b19      	ldr	r3, [pc, #100]	; (8009b18 <__s2b+0x8c>)
 8009ab4:	4819      	ldr	r0, [pc, #100]	; (8009b1c <__s2b+0x90>)
 8009ab6:	21d3      	movs	r1, #211	; 0xd3
 8009ab8:	f001 fcce 	bl	800b458 <__assert_func>
 8009abc:	0052      	lsls	r2, r2, #1
 8009abe:	3101      	adds	r1, #1
 8009ac0:	e7f0      	b.n	8009aa4 <__s2b+0x18>
 8009ac2:	9b08      	ldr	r3, [sp, #32]
 8009ac4:	6143      	str	r3, [r0, #20]
 8009ac6:	2d09      	cmp	r5, #9
 8009ac8:	f04f 0301 	mov.w	r3, #1
 8009acc:	6103      	str	r3, [r0, #16]
 8009ace:	dd16      	ble.n	8009afe <__s2b+0x72>
 8009ad0:	f104 0909 	add.w	r9, r4, #9
 8009ad4:	46c8      	mov	r8, r9
 8009ad6:	442c      	add	r4, r5
 8009ad8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009adc:	4601      	mov	r1, r0
 8009ade:	3b30      	subs	r3, #48	; 0x30
 8009ae0:	220a      	movs	r2, #10
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	f7ff ff8c 	bl	8009a00 <__multadd>
 8009ae8:	45a0      	cmp	r8, r4
 8009aea:	d1f5      	bne.n	8009ad8 <__s2b+0x4c>
 8009aec:	f1a5 0408 	sub.w	r4, r5, #8
 8009af0:	444c      	add	r4, r9
 8009af2:	1b2d      	subs	r5, r5, r4
 8009af4:	1963      	adds	r3, r4, r5
 8009af6:	42bb      	cmp	r3, r7
 8009af8:	db04      	blt.n	8009b04 <__s2b+0x78>
 8009afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009afe:	340a      	adds	r4, #10
 8009b00:	2509      	movs	r5, #9
 8009b02:	e7f6      	b.n	8009af2 <__s2b+0x66>
 8009b04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b08:	4601      	mov	r1, r0
 8009b0a:	3b30      	subs	r3, #48	; 0x30
 8009b0c:	220a      	movs	r2, #10
 8009b0e:	4630      	mov	r0, r6
 8009b10:	f7ff ff76 	bl	8009a00 <__multadd>
 8009b14:	e7ee      	b.n	8009af4 <__s2b+0x68>
 8009b16:	bf00      	nop
 8009b18:	0800e3f6 	.word	0x0800e3f6
 8009b1c:	0800e407 	.word	0x0800e407

08009b20 <__hi0bits>:
 8009b20:	0c03      	lsrs	r3, r0, #16
 8009b22:	041b      	lsls	r3, r3, #16
 8009b24:	b9d3      	cbnz	r3, 8009b5c <__hi0bits+0x3c>
 8009b26:	0400      	lsls	r0, r0, #16
 8009b28:	2310      	movs	r3, #16
 8009b2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b2e:	bf04      	itt	eq
 8009b30:	0200      	lsleq	r0, r0, #8
 8009b32:	3308      	addeq	r3, #8
 8009b34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b38:	bf04      	itt	eq
 8009b3a:	0100      	lsleq	r0, r0, #4
 8009b3c:	3304      	addeq	r3, #4
 8009b3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b42:	bf04      	itt	eq
 8009b44:	0080      	lsleq	r0, r0, #2
 8009b46:	3302      	addeq	r3, #2
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	db05      	blt.n	8009b58 <__hi0bits+0x38>
 8009b4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b50:	f103 0301 	add.w	r3, r3, #1
 8009b54:	bf08      	it	eq
 8009b56:	2320      	moveq	r3, #32
 8009b58:	4618      	mov	r0, r3
 8009b5a:	4770      	bx	lr
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	e7e4      	b.n	8009b2a <__hi0bits+0xa>

08009b60 <__lo0bits>:
 8009b60:	6803      	ldr	r3, [r0, #0]
 8009b62:	f013 0207 	ands.w	r2, r3, #7
 8009b66:	d00c      	beq.n	8009b82 <__lo0bits+0x22>
 8009b68:	07d9      	lsls	r1, r3, #31
 8009b6a:	d422      	bmi.n	8009bb2 <__lo0bits+0x52>
 8009b6c:	079a      	lsls	r2, r3, #30
 8009b6e:	bf49      	itett	mi
 8009b70:	085b      	lsrmi	r3, r3, #1
 8009b72:	089b      	lsrpl	r3, r3, #2
 8009b74:	6003      	strmi	r3, [r0, #0]
 8009b76:	2201      	movmi	r2, #1
 8009b78:	bf5c      	itt	pl
 8009b7a:	6003      	strpl	r3, [r0, #0]
 8009b7c:	2202      	movpl	r2, #2
 8009b7e:	4610      	mov	r0, r2
 8009b80:	4770      	bx	lr
 8009b82:	b299      	uxth	r1, r3
 8009b84:	b909      	cbnz	r1, 8009b8a <__lo0bits+0x2a>
 8009b86:	0c1b      	lsrs	r3, r3, #16
 8009b88:	2210      	movs	r2, #16
 8009b8a:	b2d9      	uxtb	r1, r3
 8009b8c:	b909      	cbnz	r1, 8009b92 <__lo0bits+0x32>
 8009b8e:	3208      	adds	r2, #8
 8009b90:	0a1b      	lsrs	r3, r3, #8
 8009b92:	0719      	lsls	r1, r3, #28
 8009b94:	bf04      	itt	eq
 8009b96:	091b      	lsreq	r3, r3, #4
 8009b98:	3204      	addeq	r2, #4
 8009b9a:	0799      	lsls	r1, r3, #30
 8009b9c:	bf04      	itt	eq
 8009b9e:	089b      	lsreq	r3, r3, #2
 8009ba0:	3202      	addeq	r2, #2
 8009ba2:	07d9      	lsls	r1, r3, #31
 8009ba4:	d403      	bmi.n	8009bae <__lo0bits+0x4e>
 8009ba6:	085b      	lsrs	r3, r3, #1
 8009ba8:	f102 0201 	add.w	r2, r2, #1
 8009bac:	d003      	beq.n	8009bb6 <__lo0bits+0x56>
 8009bae:	6003      	str	r3, [r0, #0]
 8009bb0:	e7e5      	b.n	8009b7e <__lo0bits+0x1e>
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	e7e3      	b.n	8009b7e <__lo0bits+0x1e>
 8009bb6:	2220      	movs	r2, #32
 8009bb8:	e7e1      	b.n	8009b7e <__lo0bits+0x1e>
	...

08009bbc <__i2b>:
 8009bbc:	b510      	push	{r4, lr}
 8009bbe:	460c      	mov	r4, r1
 8009bc0:	2101      	movs	r1, #1
 8009bc2:	f7ff febb 	bl	800993c <_Balloc>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	b928      	cbnz	r0, 8009bd6 <__i2b+0x1a>
 8009bca:	4b05      	ldr	r3, [pc, #20]	; (8009be0 <__i2b+0x24>)
 8009bcc:	4805      	ldr	r0, [pc, #20]	; (8009be4 <__i2b+0x28>)
 8009bce:	f240 1145 	movw	r1, #325	; 0x145
 8009bd2:	f001 fc41 	bl	800b458 <__assert_func>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	6144      	str	r4, [r0, #20]
 8009bda:	6103      	str	r3, [r0, #16]
 8009bdc:	bd10      	pop	{r4, pc}
 8009bde:	bf00      	nop
 8009be0:	0800e3f6 	.word	0x0800e3f6
 8009be4:	0800e407 	.word	0x0800e407

08009be8 <__multiply>:
 8009be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bec:	4691      	mov	r9, r2
 8009bee:	690a      	ldr	r2, [r1, #16]
 8009bf0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	bfb8      	it	lt
 8009bf8:	460b      	movlt	r3, r1
 8009bfa:	460c      	mov	r4, r1
 8009bfc:	bfbc      	itt	lt
 8009bfe:	464c      	movlt	r4, r9
 8009c00:	4699      	movlt	r9, r3
 8009c02:	6927      	ldr	r7, [r4, #16]
 8009c04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c08:	68a3      	ldr	r3, [r4, #8]
 8009c0a:	6861      	ldr	r1, [r4, #4]
 8009c0c:	eb07 060a 	add.w	r6, r7, sl
 8009c10:	42b3      	cmp	r3, r6
 8009c12:	b085      	sub	sp, #20
 8009c14:	bfb8      	it	lt
 8009c16:	3101      	addlt	r1, #1
 8009c18:	f7ff fe90 	bl	800993c <_Balloc>
 8009c1c:	b930      	cbnz	r0, 8009c2c <__multiply+0x44>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	4b44      	ldr	r3, [pc, #272]	; (8009d34 <__multiply+0x14c>)
 8009c22:	4845      	ldr	r0, [pc, #276]	; (8009d38 <__multiply+0x150>)
 8009c24:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009c28:	f001 fc16 	bl	800b458 <__assert_func>
 8009c2c:	f100 0514 	add.w	r5, r0, #20
 8009c30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c34:	462b      	mov	r3, r5
 8009c36:	2200      	movs	r2, #0
 8009c38:	4543      	cmp	r3, r8
 8009c3a:	d321      	bcc.n	8009c80 <__multiply+0x98>
 8009c3c:	f104 0314 	add.w	r3, r4, #20
 8009c40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c44:	f109 0314 	add.w	r3, r9, #20
 8009c48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c4c:	9202      	str	r2, [sp, #8]
 8009c4e:	1b3a      	subs	r2, r7, r4
 8009c50:	3a15      	subs	r2, #21
 8009c52:	f022 0203 	bic.w	r2, r2, #3
 8009c56:	3204      	adds	r2, #4
 8009c58:	f104 0115 	add.w	r1, r4, #21
 8009c5c:	428f      	cmp	r7, r1
 8009c5e:	bf38      	it	cc
 8009c60:	2204      	movcc	r2, #4
 8009c62:	9201      	str	r2, [sp, #4]
 8009c64:	9a02      	ldr	r2, [sp, #8]
 8009c66:	9303      	str	r3, [sp, #12]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d80c      	bhi.n	8009c86 <__multiply+0x9e>
 8009c6c:	2e00      	cmp	r6, #0
 8009c6e:	dd03      	ble.n	8009c78 <__multiply+0x90>
 8009c70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d05b      	beq.n	8009d30 <__multiply+0x148>
 8009c78:	6106      	str	r6, [r0, #16]
 8009c7a:	b005      	add	sp, #20
 8009c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c80:	f843 2b04 	str.w	r2, [r3], #4
 8009c84:	e7d8      	b.n	8009c38 <__multiply+0x50>
 8009c86:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c8a:	f1ba 0f00 	cmp.w	sl, #0
 8009c8e:	d024      	beq.n	8009cda <__multiply+0xf2>
 8009c90:	f104 0e14 	add.w	lr, r4, #20
 8009c94:	46a9      	mov	r9, r5
 8009c96:	f04f 0c00 	mov.w	ip, #0
 8009c9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c9e:	f8d9 1000 	ldr.w	r1, [r9]
 8009ca2:	fa1f fb82 	uxth.w	fp, r2
 8009ca6:	b289      	uxth	r1, r1
 8009ca8:	fb0a 110b 	mla	r1, sl, fp, r1
 8009cac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009cb0:	f8d9 2000 	ldr.w	r2, [r9]
 8009cb4:	4461      	add	r1, ip
 8009cb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cba:	fb0a c20b 	mla	r2, sl, fp, ip
 8009cbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009cc2:	b289      	uxth	r1, r1
 8009cc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009cc8:	4577      	cmp	r7, lr
 8009cca:	f849 1b04 	str.w	r1, [r9], #4
 8009cce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cd2:	d8e2      	bhi.n	8009c9a <__multiply+0xb2>
 8009cd4:	9a01      	ldr	r2, [sp, #4]
 8009cd6:	f845 c002 	str.w	ip, [r5, r2]
 8009cda:	9a03      	ldr	r2, [sp, #12]
 8009cdc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ce0:	3304      	adds	r3, #4
 8009ce2:	f1b9 0f00 	cmp.w	r9, #0
 8009ce6:	d021      	beq.n	8009d2c <__multiply+0x144>
 8009ce8:	6829      	ldr	r1, [r5, #0]
 8009cea:	f104 0c14 	add.w	ip, r4, #20
 8009cee:	46ae      	mov	lr, r5
 8009cf0:	f04f 0a00 	mov.w	sl, #0
 8009cf4:	f8bc b000 	ldrh.w	fp, [ip]
 8009cf8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009cfc:	fb09 220b 	mla	r2, r9, fp, r2
 8009d00:	4452      	add	r2, sl
 8009d02:	b289      	uxth	r1, r1
 8009d04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d08:	f84e 1b04 	str.w	r1, [lr], #4
 8009d0c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009d10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d14:	f8be 1000 	ldrh.w	r1, [lr]
 8009d18:	fb09 110a 	mla	r1, r9, sl, r1
 8009d1c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009d20:	4567      	cmp	r7, ip
 8009d22:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d26:	d8e5      	bhi.n	8009cf4 <__multiply+0x10c>
 8009d28:	9a01      	ldr	r2, [sp, #4]
 8009d2a:	50a9      	str	r1, [r5, r2]
 8009d2c:	3504      	adds	r5, #4
 8009d2e:	e799      	b.n	8009c64 <__multiply+0x7c>
 8009d30:	3e01      	subs	r6, #1
 8009d32:	e79b      	b.n	8009c6c <__multiply+0x84>
 8009d34:	0800e3f6 	.word	0x0800e3f6
 8009d38:	0800e407 	.word	0x0800e407

08009d3c <__pow5mult>:
 8009d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d40:	4615      	mov	r5, r2
 8009d42:	f012 0203 	ands.w	r2, r2, #3
 8009d46:	4606      	mov	r6, r0
 8009d48:	460f      	mov	r7, r1
 8009d4a:	d007      	beq.n	8009d5c <__pow5mult+0x20>
 8009d4c:	4c25      	ldr	r4, [pc, #148]	; (8009de4 <__pow5mult+0xa8>)
 8009d4e:	3a01      	subs	r2, #1
 8009d50:	2300      	movs	r3, #0
 8009d52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d56:	f7ff fe53 	bl	8009a00 <__multadd>
 8009d5a:	4607      	mov	r7, r0
 8009d5c:	10ad      	asrs	r5, r5, #2
 8009d5e:	d03d      	beq.n	8009ddc <__pow5mult+0xa0>
 8009d60:	69f4      	ldr	r4, [r6, #28]
 8009d62:	b97c      	cbnz	r4, 8009d84 <__pow5mult+0x48>
 8009d64:	2010      	movs	r0, #16
 8009d66:	f7ff fd35 	bl	80097d4 <malloc>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	61f0      	str	r0, [r6, #28]
 8009d6e:	b928      	cbnz	r0, 8009d7c <__pow5mult+0x40>
 8009d70:	4b1d      	ldr	r3, [pc, #116]	; (8009de8 <__pow5mult+0xac>)
 8009d72:	481e      	ldr	r0, [pc, #120]	; (8009dec <__pow5mult+0xb0>)
 8009d74:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009d78:	f001 fb6e 	bl	800b458 <__assert_func>
 8009d7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d80:	6004      	str	r4, [r0, #0]
 8009d82:	60c4      	str	r4, [r0, #12]
 8009d84:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009d88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d8c:	b94c      	cbnz	r4, 8009da2 <__pow5mult+0x66>
 8009d8e:	f240 2171 	movw	r1, #625	; 0x271
 8009d92:	4630      	mov	r0, r6
 8009d94:	f7ff ff12 	bl	8009bbc <__i2b>
 8009d98:	2300      	movs	r3, #0
 8009d9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d9e:	4604      	mov	r4, r0
 8009da0:	6003      	str	r3, [r0, #0]
 8009da2:	f04f 0900 	mov.w	r9, #0
 8009da6:	07eb      	lsls	r3, r5, #31
 8009da8:	d50a      	bpl.n	8009dc0 <__pow5mult+0x84>
 8009daa:	4639      	mov	r1, r7
 8009dac:	4622      	mov	r2, r4
 8009dae:	4630      	mov	r0, r6
 8009db0:	f7ff ff1a 	bl	8009be8 <__multiply>
 8009db4:	4639      	mov	r1, r7
 8009db6:	4680      	mov	r8, r0
 8009db8:	4630      	mov	r0, r6
 8009dba:	f7ff fdff 	bl	80099bc <_Bfree>
 8009dbe:	4647      	mov	r7, r8
 8009dc0:	106d      	asrs	r5, r5, #1
 8009dc2:	d00b      	beq.n	8009ddc <__pow5mult+0xa0>
 8009dc4:	6820      	ldr	r0, [r4, #0]
 8009dc6:	b938      	cbnz	r0, 8009dd8 <__pow5mult+0x9c>
 8009dc8:	4622      	mov	r2, r4
 8009dca:	4621      	mov	r1, r4
 8009dcc:	4630      	mov	r0, r6
 8009dce:	f7ff ff0b 	bl	8009be8 <__multiply>
 8009dd2:	6020      	str	r0, [r4, #0]
 8009dd4:	f8c0 9000 	str.w	r9, [r0]
 8009dd8:	4604      	mov	r4, r0
 8009dda:	e7e4      	b.n	8009da6 <__pow5mult+0x6a>
 8009ddc:	4638      	mov	r0, r7
 8009dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009de2:	bf00      	nop
 8009de4:	0800e550 	.word	0x0800e550
 8009de8:	0800e387 	.word	0x0800e387
 8009dec:	0800e407 	.word	0x0800e407

08009df0 <__lshift>:
 8009df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009df4:	460c      	mov	r4, r1
 8009df6:	6849      	ldr	r1, [r1, #4]
 8009df8:	6923      	ldr	r3, [r4, #16]
 8009dfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009dfe:	68a3      	ldr	r3, [r4, #8]
 8009e00:	4607      	mov	r7, r0
 8009e02:	4691      	mov	r9, r2
 8009e04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e08:	f108 0601 	add.w	r6, r8, #1
 8009e0c:	42b3      	cmp	r3, r6
 8009e0e:	db0b      	blt.n	8009e28 <__lshift+0x38>
 8009e10:	4638      	mov	r0, r7
 8009e12:	f7ff fd93 	bl	800993c <_Balloc>
 8009e16:	4605      	mov	r5, r0
 8009e18:	b948      	cbnz	r0, 8009e2e <__lshift+0x3e>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	4b28      	ldr	r3, [pc, #160]	; (8009ec0 <__lshift+0xd0>)
 8009e1e:	4829      	ldr	r0, [pc, #164]	; (8009ec4 <__lshift+0xd4>)
 8009e20:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009e24:	f001 fb18 	bl	800b458 <__assert_func>
 8009e28:	3101      	adds	r1, #1
 8009e2a:	005b      	lsls	r3, r3, #1
 8009e2c:	e7ee      	b.n	8009e0c <__lshift+0x1c>
 8009e2e:	2300      	movs	r3, #0
 8009e30:	f100 0114 	add.w	r1, r0, #20
 8009e34:	f100 0210 	add.w	r2, r0, #16
 8009e38:	4618      	mov	r0, r3
 8009e3a:	4553      	cmp	r3, sl
 8009e3c:	db33      	blt.n	8009ea6 <__lshift+0xb6>
 8009e3e:	6920      	ldr	r0, [r4, #16]
 8009e40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e44:	f104 0314 	add.w	r3, r4, #20
 8009e48:	f019 091f 	ands.w	r9, r9, #31
 8009e4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e54:	d02b      	beq.n	8009eae <__lshift+0xbe>
 8009e56:	f1c9 0e20 	rsb	lr, r9, #32
 8009e5a:	468a      	mov	sl, r1
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	6818      	ldr	r0, [r3, #0]
 8009e60:	fa00 f009 	lsl.w	r0, r0, r9
 8009e64:	4310      	orrs	r0, r2
 8009e66:	f84a 0b04 	str.w	r0, [sl], #4
 8009e6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e6e:	459c      	cmp	ip, r3
 8009e70:	fa22 f20e 	lsr.w	r2, r2, lr
 8009e74:	d8f3      	bhi.n	8009e5e <__lshift+0x6e>
 8009e76:	ebac 0304 	sub.w	r3, ip, r4
 8009e7a:	3b15      	subs	r3, #21
 8009e7c:	f023 0303 	bic.w	r3, r3, #3
 8009e80:	3304      	adds	r3, #4
 8009e82:	f104 0015 	add.w	r0, r4, #21
 8009e86:	4584      	cmp	ip, r0
 8009e88:	bf38      	it	cc
 8009e8a:	2304      	movcc	r3, #4
 8009e8c:	50ca      	str	r2, [r1, r3]
 8009e8e:	b10a      	cbz	r2, 8009e94 <__lshift+0xa4>
 8009e90:	f108 0602 	add.w	r6, r8, #2
 8009e94:	3e01      	subs	r6, #1
 8009e96:	4638      	mov	r0, r7
 8009e98:	612e      	str	r6, [r5, #16]
 8009e9a:	4621      	mov	r1, r4
 8009e9c:	f7ff fd8e 	bl	80099bc <_Bfree>
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ea6:	f842 0f04 	str.w	r0, [r2, #4]!
 8009eaa:	3301      	adds	r3, #1
 8009eac:	e7c5      	b.n	8009e3a <__lshift+0x4a>
 8009eae:	3904      	subs	r1, #4
 8009eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eb4:	f841 2f04 	str.w	r2, [r1, #4]!
 8009eb8:	459c      	cmp	ip, r3
 8009eba:	d8f9      	bhi.n	8009eb0 <__lshift+0xc0>
 8009ebc:	e7ea      	b.n	8009e94 <__lshift+0xa4>
 8009ebe:	bf00      	nop
 8009ec0:	0800e3f6 	.word	0x0800e3f6
 8009ec4:	0800e407 	.word	0x0800e407

08009ec8 <__mcmp>:
 8009ec8:	b530      	push	{r4, r5, lr}
 8009eca:	6902      	ldr	r2, [r0, #16]
 8009ecc:	690c      	ldr	r4, [r1, #16]
 8009ece:	1b12      	subs	r2, r2, r4
 8009ed0:	d10e      	bne.n	8009ef0 <__mcmp+0x28>
 8009ed2:	f100 0314 	add.w	r3, r0, #20
 8009ed6:	3114      	adds	r1, #20
 8009ed8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009edc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ee0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ee4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ee8:	42a5      	cmp	r5, r4
 8009eea:	d003      	beq.n	8009ef4 <__mcmp+0x2c>
 8009eec:	d305      	bcc.n	8009efa <__mcmp+0x32>
 8009eee:	2201      	movs	r2, #1
 8009ef0:	4610      	mov	r0, r2
 8009ef2:	bd30      	pop	{r4, r5, pc}
 8009ef4:	4283      	cmp	r3, r0
 8009ef6:	d3f3      	bcc.n	8009ee0 <__mcmp+0x18>
 8009ef8:	e7fa      	b.n	8009ef0 <__mcmp+0x28>
 8009efa:	f04f 32ff 	mov.w	r2, #4294967295
 8009efe:	e7f7      	b.n	8009ef0 <__mcmp+0x28>

08009f00 <__mdiff>:
 8009f00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f04:	460c      	mov	r4, r1
 8009f06:	4606      	mov	r6, r0
 8009f08:	4611      	mov	r1, r2
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	4690      	mov	r8, r2
 8009f0e:	f7ff ffdb 	bl	8009ec8 <__mcmp>
 8009f12:	1e05      	subs	r5, r0, #0
 8009f14:	d110      	bne.n	8009f38 <__mdiff+0x38>
 8009f16:	4629      	mov	r1, r5
 8009f18:	4630      	mov	r0, r6
 8009f1a:	f7ff fd0f 	bl	800993c <_Balloc>
 8009f1e:	b930      	cbnz	r0, 8009f2e <__mdiff+0x2e>
 8009f20:	4b3a      	ldr	r3, [pc, #232]	; (800a00c <__mdiff+0x10c>)
 8009f22:	4602      	mov	r2, r0
 8009f24:	f240 2137 	movw	r1, #567	; 0x237
 8009f28:	4839      	ldr	r0, [pc, #228]	; (800a010 <__mdiff+0x110>)
 8009f2a:	f001 fa95 	bl	800b458 <__assert_func>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f38:	bfa4      	itt	ge
 8009f3a:	4643      	movge	r3, r8
 8009f3c:	46a0      	movge	r8, r4
 8009f3e:	4630      	mov	r0, r6
 8009f40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f44:	bfa6      	itte	ge
 8009f46:	461c      	movge	r4, r3
 8009f48:	2500      	movge	r5, #0
 8009f4a:	2501      	movlt	r5, #1
 8009f4c:	f7ff fcf6 	bl	800993c <_Balloc>
 8009f50:	b920      	cbnz	r0, 8009f5c <__mdiff+0x5c>
 8009f52:	4b2e      	ldr	r3, [pc, #184]	; (800a00c <__mdiff+0x10c>)
 8009f54:	4602      	mov	r2, r0
 8009f56:	f240 2145 	movw	r1, #581	; 0x245
 8009f5a:	e7e5      	b.n	8009f28 <__mdiff+0x28>
 8009f5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f60:	6926      	ldr	r6, [r4, #16]
 8009f62:	60c5      	str	r5, [r0, #12]
 8009f64:	f104 0914 	add.w	r9, r4, #20
 8009f68:	f108 0514 	add.w	r5, r8, #20
 8009f6c:	f100 0e14 	add.w	lr, r0, #20
 8009f70:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f78:	f108 0210 	add.w	r2, r8, #16
 8009f7c:	46f2      	mov	sl, lr
 8009f7e:	2100      	movs	r1, #0
 8009f80:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f88:	fa11 f88b 	uxtah	r8, r1, fp
 8009f8c:	b299      	uxth	r1, r3
 8009f8e:	0c1b      	lsrs	r3, r3, #16
 8009f90:	eba8 0801 	sub.w	r8, r8, r1
 8009f94:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f98:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f9c:	fa1f f888 	uxth.w	r8, r8
 8009fa0:	1419      	asrs	r1, r3, #16
 8009fa2:	454e      	cmp	r6, r9
 8009fa4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009fa8:	f84a 3b04 	str.w	r3, [sl], #4
 8009fac:	d8e8      	bhi.n	8009f80 <__mdiff+0x80>
 8009fae:	1b33      	subs	r3, r6, r4
 8009fb0:	3b15      	subs	r3, #21
 8009fb2:	f023 0303 	bic.w	r3, r3, #3
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	3415      	adds	r4, #21
 8009fba:	42a6      	cmp	r6, r4
 8009fbc:	bf38      	it	cc
 8009fbe:	2304      	movcc	r3, #4
 8009fc0:	441d      	add	r5, r3
 8009fc2:	4473      	add	r3, lr
 8009fc4:	469e      	mov	lr, r3
 8009fc6:	462e      	mov	r6, r5
 8009fc8:	4566      	cmp	r6, ip
 8009fca:	d30e      	bcc.n	8009fea <__mdiff+0xea>
 8009fcc:	f10c 0203 	add.w	r2, ip, #3
 8009fd0:	1b52      	subs	r2, r2, r5
 8009fd2:	f022 0203 	bic.w	r2, r2, #3
 8009fd6:	3d03      	subs	r5, #3
 8009fd8:	45ac      	cmp	ip, r5
 8009fda:	bf38      	it	cc
 8009fdc:	2200      	movcc	r2, #0
 8009fde:	4413      	add	r3, r2
 8009fe0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009fe4:	b17a      	cbz	r2, 800a006 <__mdiff+0x106>
 8009fe6:	6107      	str	r7, [r0, #16]
 8009fe8:	e7a4      	b.n	8009f34 <__mdiff+0x34>
 8009fea:	f856 8b04 	ldr.w	r8, [r6], #4
 8009fee:	fa11 f288 	uxtah	r2, r1, r8
 8009ff2:	1414      	asrs	r4, r2, #16
 8009ff4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009ff8:	b292      	uxth	r2, r2
 8009ffa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009ffe:	f84e 2b04 	str.w	r2, [lr], #4
 800a002:	1421      	asrs	r1, r4, #16
 800a004:	e7e0      	b.n	8009fc8 <__mdiff+0xc8>
 800a006:	3f01      	subs	r7, #1
 800a008:	e7ea      	b.n	8009fe0 <__mdiff+0xe0>
 800a00a:	bf00      	nop
 800a00c:	0800e3f6 	.word	0x0800e3f6
 800a010:	0800e407 	.word	0x0800e407

0800a014 <__ulp>:
 800a014:	b082      	sub	sp, #8
 800a016:	ed8d 0b00 	vstr	d0, [sp]
 800a01a:	9a01      	ldr	r2, [sp, #4]
 800a01c:	4b0f      	ldr	r3, [pc, #60]	; (800a05c <__ulp+0x48>)
 800a01e:	4013      	ands	r3, r2
 800a020:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a024:	2b00      	cmp	r3, #0
 800a026:	dc08      	bgt.n	800a03a <__ulp+0x26>
 800a028:	425b      	negs	r3, r3
 800a02a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a02e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a032:	da04      	bge.n	800a03e <__ulp+0x2a>
 800a034:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a038:	4113      	asrs	r3, r2
 800a03a:	2200      	movs	r2, #0
 800a03c:	e008      	b.n	800a050 <__ulp+0x3c>
 800a03e:	f1a2 0314 	sub.w	r3, r2, #20
 800a042:	2b1e      	cmp	r3, #30
 800a044:	bfda      	itte	le
 800a046:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a04a:	40da      	lsrle	r2, r3
 800a04c:	2201      	movgt	r2, #1
 800a04e:	2300      	movs	r3, #0
 800a050:	4619      	mov	r1, r3
 800a052:	4610      	mov	r0, r2
 800a054:	ec41 0b10 	vmov	d0, r0, r1
 800a058:	b002      	add	sp, #8
 800a05a:	4770      	bx	lr
 800a05c:	7ff00000 	.word	0x7ff00000

0800a060 <__b2d>:
 800a060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a064:	6906      	ldr	r6, [r0, #16]
 800a066:	f100 0814 	add.w	r8, r0, #20
 800a06a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a06e:	1f37      	subs	r7, r6, #4
 800a070:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a074:	4610      	mov	r0, r2
 800a076:	f7ff fd53 	bl	8009b20 <__hi0bits>
 800a07a:	f1c0 0320 	rsb	r3, r0, #32
 800a07e:	280a      	cmp	r0, #10
 800a080:	600b      	str	r3, [r1, #0]
 800a082:	491b      	ldr	r1, [pc, #108]	; (800a0f0 <__b2d+0x90>)
 800a084:	dc15      	bgt.n	800a0b2 <__b2d+0x52>
 800a086:	f1c0 0c0b 	rsb	ip, r0, #11
 800a08a:	fa22 f30c 	lsr.w	r3, r2, ip
 800a08e:	45b8      	cmp	r8, r7
 800a090:	ea43 0501 	orr.w	r5, r3, r1
 800a094:	bf34      	ite	cc
 800a096:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a09a:	2300      	movcs	r3, #0
 800a09c:	3015      	adds	r0, #21
 800a09e:	fa02 f000 	lsl.w	r0, r2, r0
 800a0a2:	fa23 f30c 	lsr.w	r3, r3, ip
 800a0a6:	4303      	orrs	r3, r0
 800a0a8:	461c      	mov	r4, r3
 800a0aa:	ec45 4b10 	vmov	d0, r4, r5
 800a0ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0b2:	45b8      	cmp	r8, r7
 800a0b4:	bf3a      	itte	cc
 800a0b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a0ba:	f1a6 0708 	subcc.w	r7, r6, #8
 800a0be:	2300      	movcs	r3, #0
 800a0c0:	380b      	subs	r0, #11
 800a0c2:	d012      	beq.n	800a0ea <__b2d+0x8a>
 800a0c4:	f1c0 0120 	rsb	r1, r0, #32
 800a0c8:	fa23 f401 	lsr.w	r4, r3, r1
 800a0cc:	4082      	lsls	r2, r0
 800a0ce:	4322      	orrs	r2, r4
 800a0d0:	4547      	cmp	r7, r8
 800a0d2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a0d6:	bf8c      	ite	hi
 800a0d8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a0dc:	2200      	movls	r2, #0
 800a0de:	4083      	lsls	r3, r0
 800a0e0:	40ca      	lsrs	r2, r1
 800a0e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	e7de      	b.n	800a0a8 <__b2d+0x48>
 800a0ea:	ea42 0501 	orr.w	r5, r2, r1
 800a0ee:	e7db      	b.n	800a0a8 <__b2d+0x48>
 800a0f0:	3ff00000 	.word	0x3ff00000

0800a0f4 <__d2b>:
 800a0f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0f8:	460f      	mov	r7, r1
 800a0fa:	2101      	movs	r1, #1
 800a0fc:	ec59 8b10 	vmov	r8, r9, d0
 800a100:	4616      	mov	r6, r2
 800a102:	f7ff fc1b 	bl	800993c <_Balloc>
 800a106:	4604      	mov	r4, r0
 800a108:	b930      	cbnz	r0, 800a118 <__d2b+0x24>
 800a10a:	4602      	mov	r2, r0
 800a10c:	4b24      	ldr	r3, [pc, #144]	; (800a1a0 <__d2b+0xac>)
 800a10e:	4825      	ldr	r0, [pc, #148]	; (800a1a4 <__d2b+0xb0>)
 800a110:	f240 310f 	movw	r1, #783	; 0x30f
 800a114:	f001 f9a0 	bl	800b458 <__assert_func>
 800a118:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a11c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a120:	bb2d      	cbnz	r5, 800a16e <__d2b+0x7a>
 800a122:	9301      	str	r3, [sp, #4]
 800a124:	f1b8 0300 	subs.w	r3, r8, #0
 800a128:	d026      	beq.n	800a178 <__d2b+0x84>
 800a12a:	4668      	mov	r0, sp
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	f7ff fd17 	bl	8009b60 <__lo0bits>
 800a132:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a136:	b1e8      	cbz	r0, 800a174 <__d2b+0x80>
 800a138:	f1c0 0320 	rsb	r3, r0, #32
 800a13c:	fa02 f303 	lsl.w	r3, r2, r3
 800a140:	430b      	orrs	r3, r1
 800a142:	40c2      	lsrs	r2, r0
 800a144:	6163      	str	r3, [r4, #20]
 800a146:	9201      	str	r2, [sp, #4]
 800a148:	9b01      	ldr	r3, [sp, #4]
 800a14a:	61a3      	str	r3, [r4, #24]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	bf14      	ite	ne
 800a150:	2202      	movne	r2, #2
 800a152:	2201      	moveq	r2, #1
 800a154:	6122      	str	r2, [r4, #16]
 800a156:	b1bd      	cbz	r5, 800a188 <__d2b+0x94>
 800a158:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a15c:	4405      	add	r5, r0
 800a15e:	603d      	str	r5, [r7, #0]
 800a160:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a164:	6030      	str	r0, [r6, #0]
 800a166:	4620      	mov	r0, r4
 800a168:	b003      	add	sp, #12
 800a16a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a16e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a172:	e7d6      	b.n	800a122 <__d2b+0x2e>
 800a174:	6161      	str	r1, [r4, #20]
 800a176:	e7e7      	b.n	800a148 <__d2b+0x54>
 800a178:	a801      	add	r0, sp, #4
 800a17a:	f7ff fcf1 	bl	8009b60 <__lo0bits>
 800a17e:	9b01      	ldr	r3, [sp, #4]
 800a180:	6163      	str	r3, [r4, #20]
 800a182:	3020      	adds	r0, #32
 800a184:	2201      	movs	r2, #1
 800a186:	e7e5      	b.n	800a154 <__d2b+0x60>
 800a188:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a18c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a190:	6038      	str	r0, [r7, #0]
 800a192:	6918      	ldr	r0, [r3, #16]
 800a194:	f7ff fcc4 	bl	8009b20 <__hi0bits>
 800a198:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a19c:	e7e2      	b.n	800a164 <__d2b+0x70>
 800a19e:	bf00      	nop
 800a1a0:	0800e3f6 	.word	0x0800e3f6
 800a1a4:	0800e407 	.word	0x0800e407

0800a1a8 <__ratio>:
 800a1a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ac:	4688      	mov	r8, r1
 800a1ae:	4669      	mov	r1, sp
 800a1b0:	4681      	mov	r9, r0
 800a1b2:	f7ff ff55 	bl	800a060 <__b2d>
 800a1b6:	a901      	add	r1, sp, #4
 800a1b8:	4640      	mov	r0, r8
 800a1ba:	ec55 4b10 	vmov	r4, r5, d0
 800a1be:	f7ff ff4f 	bl	800a060 <__b2d>
 800a1c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a1c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a1ca:	eba3 0c02 	sub.w	ip, r3, r2
 800a1ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a1d2:	1a9b      	subs	r3, r3, r2
 800a1d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a1d8:	ec51 0b10 	vmov	r0, r1, d0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	bfd6      	itet	le
 800a1e0:	460a      	movle	r2, r1
 800a1e2:	462a      	movgt	r2, r5
 800a1e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a1e8:	468b      	mov	fp, r1
 800a1ea:	462f      	mov	r7, r5
 800a1ec:	bfd4      	ite	le
 800a1ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a1f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	ee10 2a10 	vmov	r2, s0
 800a1fc:	465b      	mov	r3, fp
 800a1fe:	4639      	mov	r1, r7
 800a200:	f7f6 fb44 	bl	800088c <__aeabi_ddiv>
 800a204:	ec41 0b10 	vmov	d0, r0, r1
 800a208:	b003      	add	sp, #12
 800a20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a20e <__copybits>:
 800a20e:	3901      	subs	r1, #1
 800a210:	b570      	push	{r4, r5, r6, lr}
 800a212:	1149      	asrs	r1, r1, #5
 800a214:	6914      	ldr	r4, [r2, #16]
 800a216:	3101      	adds	r1, #1
 800a218:	f102 0314 	add.w	r3, r2, #20
 800a21c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a220:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a224:	1f05      	subs	r5, r0, #4
 800a226:	42a3      	cmp	r3, r4
 800a228:	d30c      	bcc.n	800a244 <__copybits+0x36>
 800a22a:	1aa3      	subs	r3, r4, r2
 800a22c:	3b11      	subs	r3, #17
 800a22e:	f023 0303 	bic.w	r3, r3, #3
 800a232:	3211      	adds	r2, #17
 800a234:	42a2      	cmp	r2, r4
 800a236:	bf88      	it	hi
 800a238:	2300      	movhi	r3, #0
 800a23a:	4418      	add	r0, r3
 800a23c:	2300      	movs	r3, #0
 800a23e:	4288      	cmp	r0, r1
 800a240:	d305      	bcc.n	800a24e <__copybits+0x40>
 800a242:	bd70      	pop	{r4, r5, r6, pc}
 800a244:	f853 6b04 	ldr.w	r6, [r3], #4
 800a248:	f845 6f04 	str.w	r6, [r5, #4]!
 800a24c:	e7eb      	b.n	800a226 <__copybits+0x18>
 800a24e:	f840 3b04 	str.w	r3, [r0], #4
 800a252:	e7f4      	b.n	800a23e <__copybits+0x30>

0800a254 <__any_on>:
 800a254:	f100 0214 	add.w	r2, r0, #20
 800a258:	6900      	ldr	r0, [r0, #16]
 800a25a:	114b      	asrs	r3, r1, #5
 800a25c:	4298      	cmp	r0, r3
 800a25e:	b510      	push	{r4, lr}
 800a260:	db11      	blt.n	800a286 <__any_on+0x32>
 800a262:	dd0a      	ble.n	800a27a <__any_on+0x26>
 800a264:	f011 011f 	ands.w	r1, r1, #31
 800a268:	d007      	beq.n	800a27a <__any_on+0x26>
 800a26a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a26e:	fa24 f001 	lsr.w	r0, r4, r1
 800a272:	fa00 f101 	lsl.w	r1, r0, r1
 800a276:	428c      	cmp	r4, r1
 800a278:	d10b      	bne.n	800a292 <__any_on+0x3e>
 800a27a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a27e:	4293      	cmp	r3, r2
 800a280:	d803      	bhi.n	800a28a <__any_on+0x36>
 800a282:	2000      	movs	r0, #0
 800a284:	bd10      	pop	{r4, pc}
 800a286:	4603      	mov	r3, r0
 800a288:	e7f7      	b.n	800a27a <__any_on+0x26>
 800a28a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a28e:	2900      	cmp	r1, #0
 800a290:	d0f5      	beq.n	800a27e <__any_on+0x2a>
 800a292:	2001      	movs	r0, #1
 800a294:	e7f6      	b.n	800a284 <__any_on+0x30>

0800a296 <sulp>:
 800a296:	b570      	push	{r4, r5, r6, lr}
 800a298:	4604      	mov	r4, r0
 800a29a:	460d      	mov	r5, r1
 800a29c:	ec45 4b10 	vmov	d0, r4, r5
 800a2a0:	4616      	mov	r6, r2
 800a2a2:	f7ff feb7 	bl	800a014 <__ulp>
 800a2a6:	ec51 0b10 	vmov	r0, r1, d0
 800a2aa:	b17e      	cbz	r6, 800a2cc <sulp+0x36>
 800a2ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a2b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	dd09      	ble.n	800a2cc <sulp+0x36>
 800a2b8:	051b      	lsls	r3, r3, #20
 800a2ba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a2be:	2400      	movs	r4, #0
 800a2c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a2c4:	4622      	mov	r2, r4
 800a2c6:	462b      	mov	r3, r5
 800a2c8:	f7f6 f9b6 	bl	8000638 <__aeabi_dmul>
 800a2cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a2d0 <_strtod_l>:
 800a2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d4:	ed2d 8b02 	vpush	{d8}
 800a2d8:	b09b      	sub	sp, #108	; 0x6c
 800a2da:	4604      	mov	r4, r0
 800a2dc:	9213      	str	r2, [sp, #76]	; 0x4c
 800a2de:	2200      	movs	r2, #0
 800a2e0:	9216      	str	r2, [sp, #88]	; 0x58
 800a2e2:	460d      	mov	r5, r1
 800a2e4:	f04f 0800 	mov.w	r8, #0
 800a2e8:	f04f 0900 	mov.w	r9, #0
 800a2ec:	460a      	mov	r2, r1
 800a2ee:	9215      	str	r2, [sp, #84]	; 0x54
 800a2f0:	7811      	ldrb	r1, [r2, #0]
 800a2f2:	292b      	cmp	r1, #43	; 0x2b
 800a2f4:	d04c      	beq.n	800a390 <_strtod_l+0xc0>
 800a2f6:	d83a      	bhi.n	800a36e <_strtod_l+0x9e>
 800a2f8:	290d      	cmp	r1, #13
 800a2fa:	d834      	bhi.n	800a366 <_strtod_l+0x96>
 800a2fc:	2908      	cmp	r1, #8
 800a2fe:	d834      	bhi.n	800a36a <_strtod_l+0x9a>
 800a300:	2900      	cmp	r1, #0
 800a302:	d03d      	beq.n	800a380 <_strtod_l+0xb0>
 800a304:	2200      	movs	r2, #0
 800a306:	920a      	str	r2, [sp, #40]	; 0x28
 800a308:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a30a:	7832      	ldrb	r2, [r6, #0]
 800a30c:	2a30      	cmp	r2, #48	; 0x30
 800a30e:	f040 80b4 	bne.w	800a47a <_strtod_l+0x1aa>
 800a312:	7872      	ldrb	r2, [r6, #1]
 800a314:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a318:	2a58      	cmp	r2, #88	; 0x58
 800a31a:	d170      	bne.n	800a3fe <_strtod_l+0x12e>
 800a31c:	9302      	str	r3, [sp, #8]
 800a31e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a320:	9301      	str	r3, [sp, #4]
 800a322:	ab16      	add	r3, sp, #88	; 0x58
 800a324:	9300      	str	r3, [sp, #0]
 800a326:	4a8e      	ldr	r2, [pc, #568]	; (800a560 <_strtod_l+0x290>)
 800a328:	ab17      	add	r3, sp, #92	; 0x5c
 800a32a:	a915      	add	r1, sp, #84	; 0x54
 800a32c:	4620      	mov	r0, r4
 800a32e:	f001 f92f 	bl	800b590 <__gethex>
 800a332:	f010 070f 	ands.w	r7, r0, #15
 800a336:	4605      	mov	r5, r0
 800a338:	d005      	beq.n	800a346 <_strtod_l+0x76>
 800a33a:	2f06      	cmp	r7, #6
 800a33c:	d12a      	bne.n	800a394 <_strtod_l+0xc4>
 800a33e:	3601      	adds	r6, #1
 800a340:	2300      	movs	r3, #0
 800a342:	9615      	str	r6, [sp, #84]	; 0x54
 800a344:	930a      	str	r3, [sp, #40]	; 0x28
 800a346:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f040 857f 	bne.w	800ae4c <_strtod_l+0xb7c>
 800a34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a350:	b1db      	cbz	r3, 800a38a <_strtod_l+0xba>
 800a352:	4642      	mov	r2, r8
 800a354:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a358:	ec43 2b10 	vmov	d0, r2, r3
 800a35c:	b01b      	add	sp, #108	; 0x6c
 800a35e:	ecbd 8b02 	vpop	{d8}
 800a362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a366:	2920      	cmp	r1, #32
 800a368:	d1cc      	bne.n	800a304 <_strtod_l+0x34>
 800a36a:	3201      	adds	r2, #1
 800a36c:	e7bf      	b.n	800a2ee <_strtod_l+0x1e>
 800a36e:	292d      	cmp	r1, #45	; 0x2d
 800a370:	d1c8      	bne.n	800a304 <_strtod_l+0x34>
 800a372:	2101      	movs	r1, #1
 800a374:	910a      	str	r1, [sp, #40]	; 0x28
 800a376:	1c51      	adds	r1, r2, #1
 800a378:	9115      	str	r1, [sp, #84]	; 0x54
 800a37a:	7852      	ldrb	r2, [r2, #1]
 800a37c:	2a00      	cmp	r2, #0
 800a37e:	d1c3      	bne.n	800a308 <_strtod_l+0x38>
 800a380:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a382:	9515      	str	r5, [sp, #84]	; 0x54
 800a384:	2b00      	cmp	r3, #0
 800a386:	f040 855f 	bne.w	800ae48 <_strtod_l+0xb78>
 800a38a:	4642      	mov	r2, r8
 800a38c:	464b      	mov	r3, r9
 800a38e:	e7e3      	b.n	800a358 <_strtod_l+0x88>
 800a390:	2100      	movs	r1, #0
 800a392:	e7ef      	b.n	800a374 <_strtod_l+0xa4>
 800a394:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a396:	b13a      	cbz	r2, 800a3a8 <_strtod_l+0xd8>
 800a398:	2135      	movs	r1, #53	; 0x35
 800a39a:	a818      	add	r0, sp, #96	; 0x60
 800a39c:	f7ff ff37 	bl	800a20e <__copybits>
 800a3a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f7ff fb0a 	bl	80099bc <_Bfree>
 800a3a8:	3f01      	subs	r7, #1
 800a3aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a3ac:	2f04      	cmp	r7, #4
 800a3ae:	d806      	bhi.n	800a3be <_strtod_l+0xee>
 800a3b0:	e8df f007 	tbb	[pc, r7]
 800a3b4:	201d0314 	.word	0x201d0314
 800a3b8:	14          	.byte	0x14
 800a3b9:	00          	.byte	0x00
 800a3ba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a3be:	05e9      	lsls	r1, r5, #23
 800a3c0:	bf48      	it	mi
 800a3c2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a3c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a3ca:	0d1b      	lsrs	r3, r3, #20
 800a3cc:	051b      	lsls	r3, r3, #20
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d1b9      	bne.n	800a346 <_strtod_l+0x76>
 800a3d2:	f7fe faf5 	bl	80089c0 <__errno>
 800a3d6:	2322      	movs	r3, #34	; 0x22
 800a3d8:	6003      	str	r3, [r0, #0]
 800a3da:	e7b4      	b.n	800a346 <_strtod_l+0x76>
 800a3dc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a3e0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a3e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a3e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a3ec:	e7e7      	b.n	800a3be <_strtod_l+0xee>
 800a3ee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a568 <_strtod_l+0x298>
 800a3f2:	e7e4      	b.n	800a3be <_strtod_l+0xee>
 800a3f4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a3f8:	f04f 38ff 	mov.w	r8, #4294967295
 800a3fc:	e7df      	b.n	800a3be <_strtod_l+0xee>
 800a3fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a400:	1c5a      	adds	r2, r3, #1
 800a402:	9215      	str	r2, [sp, #84]	; 0x54
 800a404:	785b      	ldrb	r3, [r3, #1]
 800a406:	2b30      	cmp	r3, #48	; 0x30
 800a408:	d0f9      	beq.n	800a3fe <_strtod_l+0x12e>
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d09b      	beq.n	800a346 <_strtod_l+0x76>
 800a40e:	2301      	movs	r3, #1
 800a410:	f04f 0a00 	mov.w	sl, #0
 800a414:	9304      	str	r3, [sp, #16]
 800a416:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a418:	930b      	str	r3, [sp, #44]	; 0x2c
 800a41a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a41e:	46d3      	mov	fp, sl
 800a420:	220a      	movs	r2, #10
 800a422:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a424:	7806      	ldrb	r6, [r0, #0]
 800a426:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a42a:	b2d9      	uxtb	r1, r3
 800a42c:	2909      	cmp	r1, #9
 800a42e:	d926      	bls.n	800a47e <_strtod_l+0x1ae>
 800a430:	494c      	ldr	r1, [pc, #304]	; (800a564 <_strtod_l+0x294>)
 800a432:	2201      	movs	r2, #1
 800a434:	f000 ffe6 	bl	800b404 <strncmp>
 800a438:	2800      	cmp	r0, #0
 800a43a:	d030      	beq.n	800a49e <_strtod_l+0x1ce>
 800a43c:	2000      	movs	r0, #0
 800a43e:	4632      	mov	r2, r6
 800a440:	9005      	str	r0, [sp, #20]
 800a442:	465e      	mov	r6, fp
 800a444:	4603      	mov	r3, r0
 800a446:	2a65      	cmp	r2, #101	; 0x65
 800a448:	d001      	beq.n	800a44e <_strtod_l+0x17e>
 800a44a:	2a45      	cmp	r2, #69	; 0x45
 800a44c:	d113      	bne.n	800a476 <_strtod_l+0x1a6>
 800a44e:	b91e      	cbnz	r6, 800a458 <_strtod_l+0x188>
 800a450:	9a04      	ldr	r2, [sp, #16]
 800a452:	4302      	orrs	r2, r0
 800a454:	d094      	beq.n	800a380 <_strtod_l+0xb0>
 800a456:	2600      	movs	r6, #0
 800a458:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a45a:	1c6a      	adds	r2, r5, #1
 800a45c:	9215      	str	r2, [sp, #84]	; 0x54
 800a45e:	786a      	ldrb	r2, [r5, #1]
 800a460:	2a2b      	cmp	r2, #43	; 0x2b
 800a462:	d074      	beq.n	800a54e <_strtod_l+0x27e>
 800a464:	2a2d      	cmp	r2, #45	; 0x2d
 800a466:	d078      	beq.n	800a55a <_strtod_l+0x28a>
 800a468:	f04f 0c00 	mov.w	ip, #0
 800a46c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a470:	2909      	cmp	r1, #9
 800a472:	d97f      	bls.n	800a574 <_strtod_l+0x2a4>
 800a474:	9515      	str	r5, [sp, #84]	; 0x54
 800a476:	2700      	movs	r7, #0
 800a478:	e09e      	b.n	800a5b8 <_strtod_l+0x2e8>
 800a47a:	2300      	movs	r3, #0
 800a47c:	e7c8      	b.n	800a410 <_strtod_l+0x140>
 800a47e:	f1bb 0f08 	cmp.w	fp, #8
 800a482:	bfd8      	it	le
 800a484:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a486:	f100 0001 	add.w	r0, r0, #1
 800a48a:	bfda      	itte	le
 800a48c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a490:	9309      	strle	r3, [sp, #36]	; 0x24
 800a492:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a496:	f10b 0b01 	add.w	fp, fp, #1
 800a49a:	9015      	str	r0, [sp, #84]	; 0x54
 800a49c:	e7c1      	b.n	800a422 <_strtod_l+0x152>
 800a49e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4a0:	1c5a      	adds	r2, r3, #1
 800a4a2:	9215      	str	r2, [sp, #84]	; 0x54
 800a4a4:	785a      	ldrb	r2, [r3, #1]
 800a4a6:	f1bb 0f00 	cmp.w	fp, #0
 800a4aa:	d037      	beq.n	800a51c <_strtod_l+0x24c>
 800a4ac:	9005      	str	r0, [sp, #20]
 800a4ae:	465e      	mov	r6, fp
 800a4b0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a4b4:	2b09      	cmp	r3, #9
 800a4b6:	d912      	bls.n	800a4de <_strtod_l+0x20e>
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e7c4      	b.n	800a446 <_strtod_l+0x176>
 800a4bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4be:	1c5a      	adds	r2, r3, #1
 800a4c0:	9215      	str	r2, [sp, #84]	; 0x54
 800a4c2:	785a      	ldrb	r2, [r3, #1]
 800a4c4:	3001      	adds	r0, #1
 800a4c6:	2a30      	cmp	r2, #48	; 0x30
 800a4c8:	d0f8      	beq.n	800a4bc <_strtod_l+0x1ec>
 800a4ca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a4ce:	2b08      	cmp	r3, #8
 800a4d0:	f200 84c1 	bhi.w	800ae56 <_strtod_l+0xb86>
 800a4d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4d6:	9005      	str	r0, [sp, #20]
 800a4d8:	2000      	movs	r0, #0
 800a4da:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4dc:	4606      	mov	r6, r0
 800a4de:	3a30      	subs	r2, #48	; 0x30
 800a4e0:	f100 0301 	add.w	r3, r0, #1
 800a4e4:	d014      	beq.n	800a510 <_strtod_l+0x240>
 800a4e6:	9905      	ldr	r1, [sp, #20]
 800a4e8:	4419      	add	r1, r3
 800a4ea:	9105      	str	r1, [sp, #20]
 800a4ec:	4633      	mov	r3, r6
 800a4ee:	eb00 0c06 	add.w	ip, r0, r6
 800a4f2:	210a      	movs	r1, #10
 800a4f4:	4563      	cmp	r3, ip
 800a4f6:	d113      	bne.n	800a520 <_strtod_l+0x250>
 800a4f8:	1833      	adds	r3, r6, r0
 800a4fa:	2b08      	cmp	r3, #8
 800a4fc:	f106 0601 	add.w	r6, r6, #1
 800a500:	4406      	add	r6, r0
 800a502:	dc1a      	bgt.n	800a53a <_strtod_l+0x26a>
 800a504:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a506:	230a      	movs	r3, #10
 800a508:	fb03 2301 	mla	r3, r3, r1, r2
 800a50c:	9309      	str	r3, [sp, #36]	; 0x24
 800a50e:	2300      	movs	r3, #0
 800a510:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a512:	1c51      	adds	r1, r2, #1
 800a514:	9115      	str	r1, [sp, #84]	; 0x54
 800a516:	7852      	ldrb	r2, [r2, #1]
 800a518:	4618      	mov	r0, r3
 800a51a:	e7c9      	b.n	800a4b0 <_strtod_l+0x1e0>
 800a51c:	4658      	mov	r0, fp
 800a51e:	e7d2      	b.n	800a4c6 <_strtod_l+0x1f6>
 800a520:	2b08      	cmp	r3, #8
 800a522:	f103 0301 	add.w	r3, r3, #1
 800a526:	dc03      	bgt.n	800a530 <_strtod_l+0x260>
 800a528:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a52a:	434f      	muls	r7, r1
 800a52c:	9709      	str	r7, [sp, #36]	; 0x24
 800a52e:	e7e1      	b.n	800a4f4 <_strtod_l+0x224>
 800a530:	2b10      	cmp	r3, #16
 800a532:	bfd8      	it	le
 800a534:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a538:	e7dc      	b.n	800a4f4 <_strtod_l+0x224>
 800a53a:	2e10      	cmp	r6, #16
 800a53c:	bfdc      	itt	le
 800a53e:	230a      	movle	r3, #10
 800a540:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a544:	e7e3      	b.n	800a50e <_strtod_l+0x23e>
 800a546:	2300      	movs	r3, #0
 800a548:	9305      	str	r3, [sp, #20]
 800a54a:	2301      	movs	r3, #1
 800a54c:	e780      	b.n	800a450 <_strtod_l+0x180>
 800a54e:	f04f 0c00 	mov.w	ip, #0
 800a552:	1caa      	adds	r2, r5, #2
 800a554:	9215      	str	r2, [sp, #84]	; 0x54
 800a556:	78aa      	ldrb	r2, [r5, #2]
 800a558:	e788      	b.n	800a46c <_strtod_l+0x19c>
 800a55a:	f04f 0c01 	mov.w	ip, #1
 800a55e:	e7f8      	b.n	800a552 <_strtod_l+0x282>
 800a560:	0800e560 	.word	0x0800e560
 800a564:	0800e55c 	.word	0x0800e55c
 800a568:	7ff00000 	.word	0x7ff00000
 800a56c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a56e:	1c51      	adds	r1, r2, #1
 800a570:	9115      	str	r1, [sp, #84]	; 0x54
 800a572:	7852      	ldrb	r2, [r2, #1]
 800a574:	2a30      	cmp	r2, #48	; 0x30
 800a576:	d0f9      	beq.n	800a56c <_strtod_l+0x29c>
 800a578:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a57c:	2908      	cmp	r1, #8
 800a57e:	f63f af7a 	bhi.w	800a476 <_strtod_l+0x1a6>
 800a582:	3a30      	subs	r2, #48	; 0x30
 800a584:	9208      	str	r2, [sp, #32]
 800a586:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a588:	920c      	str	r2, [sp, #48]	; 0x30
 800a58a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a58c:	1c57      	adds	r7, r2, #1
 800a58e:	9715      	str	r7, [sp, #84]	; 0x54
 800a590:	7852      	ldrb	r2, [r2, #1]
 800a592:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a596:	f1be 0f09 	cmp.w	lr, #9
 800a59a:	d938      	bls.n	800a60e <_strtod_l+0x33e>
 800a59c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a59e:	1a7f      	subs	r7, r7, r1
 800a5a0:	2f08      	cmp	r7, #8
 800a5a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a5a6:	dc03      	bgt.n	800a5b0 <_strtod_l+0x2e0>
 800a5a8:	9908      	ldr	r1, [sp, #32]
 800a5aa:	428f      	cmp	r7, r1
 800a5ac:	bfa8      	it	ge
 800a5ae:	460f      	movge	r7, r1
 800a5b0:	f1bc 0f00 	cmp.w	ip, #0
 800a5b4:	d000      	beq.n	800a5b8 <_strtod_l+0x2e8>
 800a5b6:	427f      	negs	r7, r7
 800a5b8:	2e00      	cmp	r6, #0
 800a5ba:	d14f      	bne.n	800a65c <_strtod_l+0x38c>
 800a5bc:	9904      	ldr	r1, [sp, #16]
 800a5be:	4301      	orrs	r1, r0
 800a5c0:	f47f aec1 	bne.w	800a346 <_strtod_l+0x76>
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	f47f aedb 	bne.w	800a380 <_strtod_l+0xb0>
 800a5ca:	2a69      	cmp	r2, #105	; 0x69
 800a5cc:	d029      	beq.n	800a622 <_strtod_l+0x352>
 800a5ce:	dc26      	bgt.n	800a61e <_strtod_l+0x34e>
 800a5d0:	2a49      	cmp	r2, #73	; 0x49
 800a5d2:	d026      	beq.n	800a622 <_strtod_l+0x352>
 800a5d4:	2a4e      	cmp	r2, #78	; 0x4e
 800a5d6:	f47f aed3 	bne.w	800a380 <_strtod_l+0xb0>
 800a5da:	499b      	ldr	r1, [pc, #620]	; (800a848 <_strtod_l+0x578>)
 800a5dc:	a815      	add	r0, sp, #84	; 0x54
 800a5de:	f001 fa17 	bl	800ba10 <__match>
 800a5e2:	2800      	cmp	r0, #0
 800a5e4:	f43f aecc 	beq.w	800a380 <_strtod_l+0xb0>
 800a5e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	2b28      	cmp	r3, #40	; 0x28
 800a5ee:	d12f      	bne.n	800a650 <_strtod_l+0x380>
 800a5f0:	4996      	ldr	r1, [pc, #600]	; (800a84c <_strtod_l+0x57c>)
 800a5f2:	aa18      	add	r2, sp, #96	; 0x60
 800a5f4:	a815      	add	r0, sp, #84	; 0x54
 800a5f6:	f001 fa1f 	bl	800ba38 <__hexnan>
 800a5fa:	2805      	cmp	r0, #5
 800a5fc:	d128      	bne.n	800a650 <_strtod_l+0x380>
 800a5fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a600:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a604:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a608:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a60c:	e69b      	b.n	800a346 <_strtod_l+0x76>
 800a60e:	9f08      	ldr	r7, [sp, #32]
 800a610:	210a      	movs	r1, #10
 800a612:	fb01 2107 	mla	r1, r1, r7, r2
 800a616:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a61a:	9208      	str	r2, [sp, #32]
 800a61c:	e7b5      	b.n	800a58a <_strtod_l+0x2ba>
 800a61e:	2a6e      	cmp	r2, #110	; 0x6e
 800a620:	e7d9      	b.n	800a5d6 <_strtod_l+0x306>
 800a622:	498b      	ldr	r1, [pc, #556]	; (800a850 <_strtod_l+0x580>)
 800a624:	a815      	add	r0, sp, #84	; 0x54
 800a626:	f001 f9f3 	bl	800ba10 <__match>
 800a62a:	2800      	cmp	r0, #0
 800a62c:	f43f aea8 	beq.w	800a380 <_strtod_l+0xb0>
 800a630:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a632:	4988      	ldr	r1, [pc, #544]	; (800a854 <_strtod_l+0x584>)
 800a634:	3b01      	subs	r3, #1
 800a636:	a815      	add	r0, sp, #84	; 0x54
 800a638:	9315      	str	r3, [sp, #84]	; 0x54
 800a63a:	f001 f9e9 	bl	800ba10 <__match>
 800a63e:	b910      	cbnz	r0, 800a646 <_strtod_l+0x376>
 800a640:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a642:	3301      	adds	r3, #1
 800a644:	9315      	str	r3, [sp, #84]	; 0x54
 800a646:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a864 <_strtod_l+0x594>
 800a64a:	f04f 0800 	mov.w	r8, #0
 800a64e:	e67a      	b.n	800a346 <_strtod_l+0x76>
 800a650:	4881      	ldr	r0, [pc, #516]	; (800a858 <_strtod_l+0x588>)
 800a652:	f000 fef9 	bl	800b448 <nan>
 800a656:	ec59 8b10 	vmov	r8, r9, d0
 800a65a:	e674      	b.n	800a346 <_strtod_l+0x76>
 800a65c:	9b05      	ldr	r3, [sp, #20]
 800a65e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a660:	1afb      	subs	r3, r7, r3
 800a662:	f1bb 0f00 	cmp.w	fp, #0
 800a666:	bf08      	it	eq
 800a668:	46b3      	moveq	fp, r6
 800a66a:	2e10      	cmp	r6, #16
 800a66c:	9308      	str	r3, [sp, #32]
 800a66e:	4635      	mov	r5, r6
 800a670:	bfa8      	it	ge
 800a672:	2510      	movge	r5, #16
 800a674:	f7f5 ff66 	bl	8000544 <__aeabi_ui2d>
 800a678:	2e09      	cmp	r6, #9
 800a67a:	4680      	mov	r8, r0
 800a67c:	4689      	mov	r9, r1
 800a67e:	dd13      	ble.n	800a6a8 <_strtod_l+0x3d8>
 800a680:	4b76      	ldr	r3, [pc, #472]	; (800a85c <_strtod_l+0x58c>)
 800a682:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a686:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a68a:	f7f5 ffd5 	bl	8000638 <__aeabi_dmul>
 800a68e:	4680      	mov	r8, r0
 800a690:	4650      	mov	r0, sl
 800a692:	4689      	mov	r9, r1
 800a694:	f7f5 ff56 	bl	8000544 <__aeabi_ui2d>
 800a698:	4602      	mov	r2, r0
 800a69a:	460b      	mov	r3, r1
 800a69c:	4640      	mov	r0, r8
 800a69e:	4649      	mov	r1, r9
 800a6a0:	f7f5 fe14 	bl	80002cc <__adddf3>
 800a6a4:	4680      	mov	r8, r0
 800a6a6:	4689      	mov	r9, r1
 800a6a8:	2e0f      	cmp	r6, #15
 800a6aa:	dc38      	bgt.n	800a71e <_strtod_l+0x44e>
 800a6ac:	9b08      	ldr	r3, [sp, #32]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	f43f ae49 	beq.w	800a346 <_strtod_l+0x76>
 800a6b4:	dd24      	ble.n	800a700 <_strtod_l+0x430>
 800a6b6:	2b16      	cmp	r3, #22
 800a6b8:	dc0b      	bgt.n	800a6d2 <_strtod_l+0x402>
 800a6ba:	4968      	ldr	r1, [pc, #416]	; (800a85c <_strtod_l+0x58c>)
 800a6bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a6c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6c4:	4642      	mov	r2, r8
 800a6c6:	464b      	mov	r3, r9
 800a6c8:	f7f5 ffb6 	bl	8000638 <__aeabi_dmul>
 800a6cc:	4680      	mov	r8, r0
 800a6ce:	4689      	mov	r9, r1
 800a6d0:	e639      	b.n	800a346 <_strtod_l+0x76>
 800a6d2:	9a08      	ldr	r2, [sp, #32]
 800a6d4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	db20      	blt.n	800a71e <_strtod_l+0x44e>
 800a6dc:	4c5f      	ldr	r4, [pc, #380]	; (800a85c <_strtod_l+0x58c>)
 800a6de:	f1c6 060f 	rsb	r6, r6, #15
 800a6e2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a6e6:	4642      	mov	r2, r8
 800a6e8:	464b      	mov	r3, r9
 800a6ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6ee:	f7f5 ffa3 	bl	8000638 <__aeabi_dmul>
 800a6f2:	9b08      	ldr	r3, [sp, #32]
 800a6f4:	1b9e      	subs	r6, r3, r6
 800a6f6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a6fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a6fe:	e7e3      	b.n	800a6c8 <_strtod_l+0x3f8>
 800a700:	9b08      	ldr	r3, [sp, #32]
 800a702:	3316      	adds	r3, #22
 800a704:	db0b      	blt.n	800a71e <_strtod_l+0x44e>
 800a706:	9b05      	ldr	r3, [sp, #20]
 800a708:	1bdf      	subs	r7, r3, r7
 800a70a:	4b54      	ldr	r3, [pc, #336]	; (800a85c <_strtod_l+0x58c>)
 800a70c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a710:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a714:	4640      	mov	r0, r8
 800a716:	4649      	mov	r1, r9
 800a718:	f7f6 f8b8 	bl	800088c <__aeabi_ddiv>
 800a71c:	e7d6      	b.n	800a6cc <_strtod_l+0x3fc>
 800a71e:	9b08      	ldr	r3, [sp, #32]
 800a720:	1b75      	subs	r5, r6, r5
 800a722:	441d      	add	r5, r3
 800a724:	2d00      	cmp	r5, #0
 800a726:	dd70      	ble.n	800a80a <_strtod_l+0x53a>
 800a728:	f015 030f 	ands.w	r3, r5, #15
 800a72c:	d00a      	beq.n	800a744 <_strtod_l+0x474>
 800a72e:	494b      	ldr	r1, [pc, #300]	; (800a85c <_strtod_l+0x58c>)
 800a730:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a734:	4642      	mov	r2, r8
 800a736:	464b      	mov	r3, r9
 800a738:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a73c:	f7f5 ff7c 	bl	8000638 <__aeabi_dmul>
 800a740:	4680      	mov	r8, r0
 800a742:	4689      	mov	r9, r1
 800a744:	f035 050f 	bics.w	r5, r5, #15
 800a748:	d04d      	beq.n	800a7e6 <_strtod_l+0x516>
 800a74a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a74e:	dd22      	ble.n	800a796 <_strtod_l+0x4c6>
 800a750:	2500      	movs	r5, #0
 800a752:	46ab      	mov	fp, r5
 800a754:	9509      	str	r5, [sp, #36]	; 0x24
 800a756:	9505      	str	r5, [sp, #20]
 800a758:	2322      	movs	r3, #34	; 0x22
 800a75a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a864 <_strtod_l+0x594>
 800a75e:	6023      	str	r3, [r4, #0]
 800a760:	f04f 0800 	mov.w	r8, #0
 800a764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a766:	2b00      	cmp	r3, #0
 800a768:	f43f aded 	beq.w	800a346 <_strtod_l+0x76>
 800a76c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a76e:	4620      	mov	r0, r4
 800a770:	f7ff f924 	bl	80099bc <_Bfree>
 800a774:	9905      	ldr	r1, [sp, #20]
 800a776:	4620      	mov	r0, r4
 800a778:	f7ff f920 	bl	80099bc <_Bfree>
 800a77c:	4659      	mov	r1, fp
 800a77e:	4620      	mov	r0, r4
 800a780:	f7ff f91c 	bl	80099bc <_Bfree>
 800a784:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a786:	4620      	mov	r0, r4
 800a788:	f7ff f918 	bl	80099bc <_Bfree>
 800a78c:	4629      	mov	r1, r5
 800a78e:	4620      	mov	r0, r4
 800a790:	f7ff f914 	bl	80099bc <_Bfree>
 800a794:	e5d7      	b.n	800a346 <_strtod_l+0x76>
 800a796:	4b32      	ldr	r3, [pc, #200]	; (800a860 <_strtod_l+0x590>)
 800a798:	9304      	str	r3, [sp, #16]
 800a79a:	2300      	movs	r3, #0
 800a79c:	112d      	asrs	r5, r5, #4
 800a79e:	4640      	mov	r0, r8
 800a7a0:	4649      	mov	r1, r9
 800a7a2:	469a      	mov	sl, r3
 800a7a4:	2d01      	cmp	r5, #1
 800a7a6:	dc21      	bgt.n	800a7ec <_strtod_l+0x51c>
 800a7a8:	b10b      	cbz	r3, 800a7ae <_strtod_l+0x4de>
 800a7aa:	4680      	mov	r8, r0
 800a7ac:	4689      	mov	r9, r1
 800a7ae:	492c      	ldr	r1, [pc, #176]	; (800a860 <_strtod_l+0x590>)
 800a7b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a7b4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a7b8:	4642      	mov	r2, r8
 800a7ba:	464b      	mov	r3, r9
 800a7bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7c0:	f7f5 ff3a 	bl	8000638 <__aeabi_dmul>
 800a7c4:	4b27      	ldr	r3, [pc, #156]	; (800a864 <_strtod_l+0x594>)
 800a7c6:	460a      	mov	r2, r1
 800a7c8:	400b      	ands	r3, r1
 800a7ca:	4927      	ldr	r1, [pc, #156]	; (800a868 <_strtod_l+0x598>)
 800a7cc:	428b      	cmp	r3, r1
 800a7ce:	4680      	mov	r8, r0
 800a7d0:	d8be      	bhi.n	800a750 <_strtod_l+0x480>
 800a7d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a7d6:	428b      	cmp	r3, r1
 800a7d8:	bf86      	itte	hi
 800a7da:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a86c <_strtod_l+0x59c>
 800a7de:	f04f 38ff 	movhi.w	r8, #4294967295
 800a7e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	9304      	str	r3, [sp, #16]
 800a7ea:	e07b      	b.n	800a8e4 <_strtod_l+0x614>
 800a7ec:	07ea      	lsls	r2, r5, #31
 800a7ee:	d505      	bpl.n	800a7fc <_strtod_l+0x52c>
 800a7f0:	9b04      	ldr	r3, [sp, #16]
 800a7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f6:	f7f5 ff1f 	bl	8000638 <__aeabi_dmul>
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	9a04      	ldr	r2, [sp, #16]
 800a7fe:	3208      	adds	r2, #8
 800a800:	f10a 0a01 	add.w	sl, sl, #1
 800a804:	106d      	asrs	r5, r5, #1
 800a806:	9204      	str	r2, [sp, #16]
 800a808:	e7cc      	b.n	800a7a4 <_strtod_l+0x4d4>
 800a80a:	d0ec      	beq.n	800a7e6 <_strtod_l+0x516>
 800a80c:	426d      	negs	r5, r5
 800a80e:	f015 020f 	ands.w	r2, r5, #15
 800a812:	d00a      	beq.n	800a82a <_strtod_l+0x55a>
 800a814:	4b11      	ldr	r3, [pc, #68]	; (800a85c <_strtod_l+0x58c>)
 800a816:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a81a:	4640      	mov	r0, r8
 800a81c:	4649      	mov	r1, r9
 800a81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a822:	f7f6 f833 	bl	800088c <__aeabi_ddiv>
 800a826:	4680      	mov	r8, r0
 800a828:	4689      	mov	r9, r1
 800a82a:	112d      	asrs	r5, r5, #4
 800a82c:	d0db      	beq.n	800a7e6 <_strtod_l+0x516>
 800a82e:	2d1f      	cmp	r5, #31
 800a830:	dd1e      	ble.n	800a870 <_strtod_l+0x5a0>
 800a832:	2500      	movs	r5, #0
 800a834:	46ab      	mov	fp, r5
 800a836:	9509      	str	r5, [sp, #36]	; 0x24
 800a838:	9505      	str	r5, [sp, #20]
 800a83a:	2322      	movs	r3, #34	; 0x22
 800a83c:	f04f 0800 	mov.w	r8, #0
 800a840:	f04f 0900 	mov.w	r9, #0
 800a844:	6023      	str	r3, [r4, #0]
 800a846:	e78d      	b.n	800a764 <_strtod_l+0x494>
 800a848:	0800e34e 	.word	0x0800e34e
 800a84c:	0800e574 	.word	0x0800e574
 800a850:	0800e346 	.word	0x0800e346
 800a854:	0800e37d 	.word	0x0800e37d
 800a858:	0800e705 	.word	0x0800e705
 800a85c:	0800e488 	.word	0x0800e488
 800a860:	0800e460 	.word	0x0800e460
 800a864:	7ff00000 	.word	0x7ff00000
 800a868:	7ca00000 	.word	0x7ca00000
 800a86c:	7fefffff 	.word	0x7fefffff
 800a870:	f015 0310 	ands.w	r3, r5, #16
 800a874:	bf18      	it	ne
 800a876:	236a      	movne	r3, #106	; 0x6a
 800a878:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800ac1c <_strtod_l+0x94c>
 800a87c:	9304      	str	r3, [sp, #16]
 800a87e:	4640      	mov	r0, r8
 800a880:	4649      	mov	r1, r9
 800a882:	2300      	movs	r3, #0
 800a884:	07ea      	lsls	r2, r5, #31
 800a886:	d504      	bpl.n	800a892 <_strtod_l+0x5c2>
 800a888:	e9da 2300 	ldrd	r2, r3, [sl]
 800a88c:	f7f5 fed4 	bl	8000638 <__aeabi_dmul>
 800a890:	2301      	movs	r3, #1
 800a892:	106d      	asrs	r5, r5, #1
 800a894:	f10a 0a08 	add.w	sl, sl, #8
 800a898:	d1f4      	bne.n	800a884 <_strtod_l+0x5b4>
 800a89a:	b10b      	cbz	r3, 800a8a0 <_strtod_l+0x5d0>
 800a89c:	4680      	mov	r8, r0
 800a89e:	4689      	mov	r9, r1
 800a8a0:	9b04      	ldr	r3, [sp, #16]
 800a8a2:	b1bb      	cbz	r3, 800a8d4 <_strtod_l+0x604>
 800a8a4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a8a8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	4649      	mov	r1, r9
 800a8b0:	dd10      	ble.n	800a8d4 <_strtod_l+0x604>
 800a8b2:	2b1f      	cmp	r3, #31
 800a8b4:	f340 811e 	ble.w	800aaf4 <_strtod_l+0x824>
 800a8b8:	2b34      	cmp	r3, #52	; 0x34
 800a8ba:	bfde      	ittt	le
 800a8bc:	f04f 33ff 	movle.w	r3, #4294967295
 800a8c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a8c4:	4093      	lslle	r3, r2
 800a8c6:	f04f 0800 	mov.w	r8, #0
 800a8ca:	bfcc      	ite	gt
 800a8cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a8d0:	ea03 0901 	andle.w	r9, r3, r1
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	4640      	mov	r0, r8
 800a8da:	4649      	mov	r1, r9
 800a8dc:	f7f6 f914 	bl	8000b08 <__aeabi_dcmpeq>
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	d1a6      	bne.n	800a832 <_strtod_l+0x562>
 800a8e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e6:	9300      	str	r3, [sp, #0]
 800a8e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a8ea:	4633      	mov	r3, r6
 800a8ec:	465a      	mov	r2, fp
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	f7ff f8cc 	bl	8009a8c <__s2b>
 800a8f4:	9009      	str	r0, [sp, #36]	; 0x24
 800a8f6:	2800      	cmp	r0, #0
 800a8f8:	f43f af2a 	beq.w	800a750 <_strtod_l+0x480>
 800a8fc:	9a08      	ldr	r2, [sp, #32]
 800a8fe:	9b05      	ldr	r3, [sp, #20]
 800a900:	2a00      	cmp	r2, #0
 800a902:	eba3 0307 	sub.w	r3, r3, r7
 800a906:	bfa8      	it	ge
 800a908:	2300      	movge	r3, #0
 800a90a:	930c      	str	r3, [sp, #48]	; 0x30
 800a90c:	2500      	movs	r5, #0
 800a90e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a912:	9312      	str	r3, [sp, #72]	; 0x48
 800a914:	46ab      	mov	fp, r5
 800a916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a918:	4620      	mov	r0, r4
 800a91a:	6859      	ldr	r1, [r3, #4]
 800a91c:	f7ff f80e 	bl	800993c <_Balloc>
 800a920:	9005      	str	r0, [sp, #20]
 800a922:	2800      	cmp	r0, #0
 800a924:	f43f af18 	beq.w	800a758 <_strtod_l+0x488>
 800a928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a92a:	691a      	ldr	r2, [r3, #16]
 800a92c:	3202      	adds	r2, #2
 800a92e:	f103 010c 	add.w	r1, r3, #12
 800a932:	0092      	lsls	r2, r2, #2
 800a934:	300c      	adds	r0, #12
 800a936:	f7fe f870 	bl	8008a1a <memcpy>
 800a93a:	ec49 8b10 	vmov	d0, r8, r9
 800a93e:	aa18      	add	r2, sp, #96	; 0x60
 800a940:	a917      	add	r1, sp, #92	; 0x5c
 800a942:	4620      	mov	r0, r4
 800a944:	f7ff fbd6 	bl	800a0f4 <__d2b>
 800a948:	ec49 8b18 	vmov	d8, r8, r9
 800a94c:	9016      	str	r0, [sp, #88]	; 0x58
 800a94e:	2800      	cmp	r0, #0
 800a950:	f43f af02 	beq.w	800a758 <_strtod_l+0x488>
 800a954:	2101      	movs	r1, #1
 800a956:	4620      	mov	r0, r4
 800a958:	f7ff f930 	bl	8009bbc <__i2b>
 800a95c:	4683      	mov	fp, r0
 800a95e:	2800      	cmp	r0, #0
 800a960:	f43f aefa 	beq.w	800a758 <_strtod_l+0x488>
 800a964:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a966:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a968:	2e00      	cmp	r6, #0
 800a96a:	bfab      	itete	ge
 800a96c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a96e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a970:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a972:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a976:	bfac      	ite	ge
 800a978:	eb06 0a03 	addge.w	sl, r6, r3
 800a97c:	1b9f      	sublt	r7, r3, r6
 800a97e:	9b04      	ldr	r3, [sp, #16]
 800a980:	1af6      	subs	r6, r6, r3
 800a982:	4416      	add	r6, r2
 800a984:	4ba0      	ldr	r3, [pc, #640]	; (800ac08 <_strtod_l+0x938>)
 800a986:	3e01      	subs	r6, #1
 800a988:	429e      	cmp	r6, r3
 800a98a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a98e:	f280 80c4 	bge.w	800ab1a <_strtod_l+0x84a>
 800a992:	1b9b      	subs	r3, r3, r6
 800a994:	2b1f      	cmp	r3, #31
 800a996:	eba2 0203 	sub.w	r2, r2, r3
 800a99a:	f04f 0101 	mov.w	r1, #1
 800a99e:	f300 80b0 	bgt.w	800ab02 <_strtod_l+0x832>
 800a9a2:	fa01 f303 	lsl.w	r3, r1, r3
 800a9a6:	930e      	str	r3, [sp, #56]	; 0x38
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	930d      	str	r3, [sp, #52]	; 0x34
 800a9ac:	eb0a 0602 	add.w	r6, sl, r2
 800a9b0:	9b04      	ldr	r3, [sp, #16]
 800a9b2:	45b2      	cmp	sl, r6
 800a9b4:	4417      	add	r7, r2
 800a9b6:	441f      	add	r7, r3
 800a9b8:	4653      	mov	r3, sl
 800a9ba:	bfa8      	it	ge
 800a9bc:	4633      	movge	r3, r6
 800a9be:	42bb      	cmp	r3, r7
 800a9c0:	bfa8      	it	ge
 800a9c2:	463b      	movge	r3, r7
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	bfc2      	ittt	gt
 800a9c8:	1af6      	subgt	r6, r6, r3
 800a9ca:	1aff      	subgt	r7, r7, r3
 800a9cc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a9d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	dd17      	ble.n	800aa06 <_strtod_l+0x736>
 800a9d6:	4659      	mov	r1, fp
 800a9d8:	461a      	mov	r2, r3
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f7ff f9ae 	bl	8009d3c <__pow5mult>
 800a9e0:	4683      	mov	fp, r0
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	f43f aeb8 	beq.w	800a758 <_strtod_l+0x488>
 800a9e8:	4601      	mov	r1, r0
 800a9ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f7ff f8fb 	bl	8009be8 <__multiply>
 800a9f2:	900b      	str	r0, [sp, #44]	; 0x2c
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	f43f aeaf 	beq.w	800a758 <_strtod_l+0x488>
 800a9fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	f7fe ffdd 	bl	80099bc <_Bfree>
 800aa02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa04:	9316      	str	r3, [sp, #88]	; 0x58
 800aa06:	2e00      	cmp	r6, #0
 800aa08:	f300 808c 	bgt.w	800ab24 <_strtod_l+0x854>
 800aa0c:	9b08      	ldr	r3, [sp, #32]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	dd08      	ble.n	800aa24 <_strtod_l+0x754>
 800aa12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa14:	9905      	ldr	r1, [sp, #20]
 800aa16:	4620      	mov	r0, r4
 800aa18:	f7ff f990 	bl	8009d3c <__pow5mult>
 800aa1c:	9005      	str	r0, [sp, #20]
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	f43f ae9a 	beq.w	800a758 <_strtod_l+0x488>
 800aa24:	2f00      	cmp	r7, #0
 800aa26:	dd08      	ble.n	800aa3a <_strtod_l+0x76a>
 800aa28:	9905      	ldr	r1, [sp, #20]
 800aa2a:	463a      	mov	r2, r7
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f7ff f9df 	bl	8009df0 <__lshift>
 800aa32:	9005      	str	r0, [sp, #20]
 800aa34:	2800      	cmp	r0, #0
 800aa36:	f43f ae8f 	beq.w	800a758 <_strtod_l+0x488>
 800aa3a:	f1ba 0f00 	cmp.w	sl, #0
 800aa3e:	dd08      	ble.n	800aa52 <_strtod_l+0x782>
 800aa40:	4659      	mov	r1, fp
 800aa42:	4652      	mov	r2, sl
 800aa44:	4620      	mov	r0, r4
 800aa46:	f7ff f9d3 	bl	8009df0 <__lshift>
 800aa4a:	4683      	mov	fp, r0
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	f43f ae83 	beq.w	800a758 <_strtod_l+0x488>
 800aa52:	9a05      	ldr	r2, [sp, #20]
 800aa54:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aa56:	4620      	mov	r0, r4
 800aa58:	f7ff fa52 	bl	8009f00 <__mdiff>
 800aa5c:	4605      	mov	r5, r0
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	f43f ae7a 	beq.w	800a758 <_strtod_l+0x488>
 800aa64:	68c3      	ldr	r3, [r0, #12]
 800aa66:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa68:	2300      	movs	r3, #0
 800aa6a:	60c3      	str	r3, [r0, #12]
 800aa6c:	4659      	mov	r1, fp
 800aa6e:	f7ff fa2b 	bl	8009ec8 <__mcmp>
 800aa72:	2800      	cmp	r0, #0
 800aa74:	da60      	bge.n	800ab38 <_strtod_l+0x868>
 800aa76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa78:	ea53 0308 	orrs.w	r3, r3, r8
 800aa7c:	f040 8084 	bne.w	800ab88 <_strtod_l+0x8b8>
 800aa80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d17f      	bne.n	800ab88 <_strtod_l+0x8b8>
 800aa88:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa8c:	0d1b      	lsrs	r3, r3, #20
 800aa8e:	051b      	lsls	r3, r3, #20
 800aa90:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aa94:	d978      	bls.n	800ab88 <_strtod_l+0x8b8>
 800aa96:	696b      	ldr	r3, [r5, #20]
 800aa98:	b913      	cbnz	r3, 800aaa0 <_strtod_l+0x7d0>
 800aa9a:	692b      	ldr	r3, [r5, #16]
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	dd73      	ble.n	800ab88 <_strtod_l+0x8b8>
 800aaa0:	4629      	mov	r1, r5
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	f7ff f9a3 	bl	8009df0 <__lshift>
 800aaaa:	4659      	mov	r1, fp
 800aaac:	4605      	mov	r5, r0
 800aaae:	f7ff fa0b 	bl	8009ec8 <__mcmp>
 800aab2:	2800      	cmp	r0, #0
 800aab4:	dd68      	ble.n	800ab88 <_strtod_l+0x8b8>
 800aab6:	9904      	ldr	r1, [sp, #16]
 800aab8:	4a54      	ldr	r2, [pc, #336]	; (800ac0c <_strtod_l+0x93c>)
 800aaba:	464b      	mov	r3, r9
 800aabc:	2900      	cmp	r1, #0
 800aabe:	f000 8084 	beq.w	800abca <_strtod_l+0x8fa>
 800aac2:	ea02 0109 	and.w	r1, r2, r9
 800aac6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aaca:	dc7e      	bgt.n	800abca <_strtod_l+0x8fa>
 800aacc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aad0:	f77f aeb3 	ble.w	800a83a <_strtod_l+0x56a>
 800aad4:	4b4e      	ldr	r3, [pc, #312]	; (800ac10 <_strtod_l+0x940>)
 800aad6:	4640      	mov	r0, r8
 800aad8:	4649      	mov	r1, r9
 800aada:	2200      	movs	r2, #0
 800aadc:	f7f5 fdac 	bl	8000638 <__aeabi_dmul>
 800aae0:	4b4a      	ldr	r3, [pc, #296]	; (800ac0c <_strtod_l+0x93c>)
 800aae2:	400b      	ands	r3, r1
 800aae4:	4680      	mov	r8, r0
 800aae6:	4689      	mov	r9, r1
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f47f ae3f 	bne.w	800a76c <_strtod_l+0x49c>
 800aaee:	2322      	movs	r3, #34	; 0x22
 800aaf0:	6023      	str	r3, [r4, #0]
 800aaf2:	e63b      	b.n	800a76c <_strtod_l+0x49c>
 800aaf4:	f04f 32ff 	mov.w	r2, #4294967295
 800aaf8:	fa02 f303 	lsl.w	r3, r2, r3
 800aafc:	ea03 0808 	and.w	r8, r3, r8
 800ab00:	e6e8      	b.n	800a8d4 <_strtod_l+0x604>
 800ab02:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ab06:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ab0a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ab0e:	36e2      	adds	r6, #226	; 0xe2
 800ab10:	fa01 f306 	lsl.w	r3, r1, r6
 800ab14:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800ab18:	e748      	b.n	800a9ac <_strtod_l+0x6dc>
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800ab22:	e743      	b.n	800a9ac <_strtod_l+0x6dc>
 800ab24:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ab26:	4632      	mov	r2, r6
 800ab28:	4620      	mov	r0, r4
 800ab2a:	f7ff f961 	bl	8009df0 <__lshift>
 800ab2e:	9016      	str	r0, [sp, #88]	; 0x58
 800ab30:	2800      	cmp	r0, #0
 800ab32:	f47f af6b 	bne.w	800aa0c <_strtod_l+0x73c>
 800ab36:	e60f      	b.n	800a758 <_strtod_l+0x488>
 800ab38:	46ca      	mov	sl, r9
 800ab3a:	d171      	bne.n	800ac20 <_strtod_l+0x950>
 800ab3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab42:	b352      	cbz	r2, 800ab9a <_strtod_l+0x8ca>
 800ab44:	4a33      	ldr	r2, [pc, #204]	; (800ac14 <_strtod_l+0x944>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d12a      	bne.n	800aba0 <_strtod_l+0x8d0>
 800ab4a:	9b04      	ldr	r3, [sp, #16]
 800ab4c:	4641      	mov	r1, r8
 800ab4e:	b1fb      	cbz	r3, 800ab90 <_strtod_l+0x8c0>
 800ab50:	4b2e      	ldr	r3, [pc, #184]	; (800ac0c <_strtod_l+0x93c>)
 800ab52:	ea09 0303 	and.w	r3, r9, r3
 800ab56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ab5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab5e:	d81a      	bhi.n	800ab96 <_strtod_l+0x8c6>
 800ab60:	0d1b      	lsrs	r3, r3, #20
 800ab62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ab66:	fa02 f303 	lsl.w	r3, r2, r3
 800ab6a:	4299      	cmp	r1, r3
 800ab6c:	d118      	bne.n	800aba0 <_strtod_l+0x8d0>
 800ab6e:	4b2a      	ldr	r3, [pc, #168]	; (800ac18 <_strtod_l+0x948>)
 800ab70:	459a      	cmp	sl, r3
 800ab72:	d102      	bne.n	800ab7a <_strtod_l+0x8aa>
 800ab74:	3101      	adds	r1, #1
 800ab76:	f43f adef 	beq.w	800a758 <_strtod_l+0x488>
 800ab7a:	4b24      	ldr	r3, [pc, #144]	; (800ac0c <_strtod_l+0x93c>)
 800ab7c:	ea0a 0303 	and.w	r3, sl, r3
 800ab80:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800ab84:	f04f 0800 	mov.w	r8, #0
 800ab88:	9b04      	ldr	r3, [sp, #16]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d1a2      	bne.n	800aad4 <_strtod_l+0x804>
 800ab8e:	e5ed      	b.n	800a76c <_strtod_l+0x49c>
 800ab90:	f04f 33ff 	mov.w	r3, #4294967295
 800ab94:	e7e9      	b.n	800ab6a <_strtod_l+0x89a>
 800ab96:	4613      	mov	r3, r2
 800ab98:	e7e7      	b.n	800ab6a <_strtod_l+0x89a>
 800ab9a:	ea53 0308 	orrs.w	r3, r3, r8
 800ab9e:	d08a      	beq.n	800aab6 <_strtod_l+0x7e6>
 800aba0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aba2:	b1e3      	cbz	r3, 800abde <_strtod_l+0x90e>
 800aba4:	ea13 0f0a 	tst.w	r3, sl
 800aba8:	d0ee      	beq.n	800ab88 <_strtod_l+0x8b8>
 800abaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abac:	9a04      	ldr	r2, [sp, #16]
 800abae:	4640      	mov	r0, r8
 800abb0:	4649      	mov	r1, r9
 800abb2:	b1c3      	cbz	r3, 800abe6 <_strtod_l+0x916>
 800abb4:	f7ff fb6f 	bl	800a296 <sulp>
 800abb8:	4602      	mov	r2, r0
 800abba:	460b      	mov	r3, r1
 800abbc:	ec51 0b18 	vmov	r0, r1, d8
 800abc0:	f7f5 fb84 	bl	80002cc <__adddf3>
 800abc4:	4680      	mov	r8, r0
 800abc6:	4689      	mov	r9, r1
 800abc8:	e7de      	b.n	800ab88 <_strtod_l+0x8b8>
 800abca:	4013      	ands	r3, r2
 800abcc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800abd0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800abd4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800abd8:	f04f 38ff 	mov.w	r8, #4294967295
 800abdc:	e7d4      	b.n	800ab88 <_strtod_l+0x8b8>
 800abde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abe0:	ea13 0f08 	tst.w	r3, r8
 800abe4:	e7e0      	b.n	800aba8 <_strtod_l+0x8d8>
 800abe6:	f7ff fb56 	bl	800a296 <sulp>
 800abea:	4602      	mov	r2, r0
 800abec:	460b      	mov	r3, r1
 800abee:	ec51 0b18 	vmov	r0, r1, d8
 800abf2:	f7f5 fb69 	bl	80002c8 <__aeabi_dsub>
 800abf6:	2200      	movs	r2, #0
 800abf8:	2300      	movs	r3, #0
 800abfa:	4680      	mov	r8, r0
 800abfc:	4689      	mov	r9, r1
 800abfe:	f7f5 ff83 	bl	8000b08 <__aeabi_dcmpeq>
 800ac02:	2800      	cmp	r0, #0
 800ac04:	d0c0      	beq.n	800ab88 <_strtod_l+0x8b8>
 800ac06:	e618      	b.n	800a83a <_strtod_l+0x56a>
 800ac08:	fffffc02 	.word	0xfffffc02
 800ac0c:	7ff00000 	.word	0x7ff00000
 800ac10:	39500000 	.word	0x39500000
 800ac14:	000fffff 	.word	0x000fffff
 800ac18:	7fefffff 	.word	0x7fefffff
 800ac1c:	0800e588 	.word	0x0800e588
 800ac20:	4659      	mov	r1, fp
 800ac22:	4628      	mov	r0, r5
 800ac24:	f7ff fac0 	bl	800a1a8 <__ratio>
 800ac28:	ec57 6b10 	vmov	r6, r7, d0
 800ac2c:	ee10 0a10 	vmov	r0, s0
 800ac30:	2200      	movs	r2, #0
 800ac32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac36:	4639      	mov	r1, r7
 800ac38:	f7f5 ff7a 	bl	8000b30 <__aeabi_dcmple>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	d071      	beq.n	800ad24 <_strtod_l+0xa54>
 800ac40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d17c      	bne.n	800ad40 <_strtod_l+0xa70>
 800ac46:	f1b8 0f00 	cmp.w	r8, #0
 800ac4a:	d15a      	bne.n	800ad02 <_strtod_l+0xa32>
 800ac4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d15d      	bne.n	800ad10 <_strtod_l+0xa40>
 800ac54:	4b90      	ldr	r3, [pc, #576]	; (800ae98 <_strtod_l+0xbc8>)
 800ac56:	2200      	movs	r2, #0
 800ac58:	4630      	mov	r0, r6
 800ac5a:	4639      	mov	r1, r7
 800ac5c:	f7f5 ff5e 	bl	8000b1c <__aeabi_dcmplt>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d15c      	bne.n	800ad1e <_strtod_l+0xa4e>
 800ac64:	4630      	mov	r0, r6
 800ac66:	4639      	mov	r1, r7
 800ac68:	4b8c      	ldr	r3, [pc, #560]	; (800ae9c <_strtod_l+0xbcc>)
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f7f5 fce4 	bl	8000638 <__aeabi_dmul>
 800ac70:	4606      	mov	r6, r0
 800ac72:	460f      	mov	r7, r1
 800ac74:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ac78:	9606      	str	r6, [sp, #24]
 800ac7a:	9307      	str	r3, [sp, #28]
 800ac7c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac80:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ac84:	4b86      	ldr	r3, [pc, #536]	; (800aea0 <_strtod_l+0xbd0>)
 800ac86:	ea0a 0303 	and.w	r3, sl, r3
 800ac8a:	930d      	str	r3, [sp, #52]	; 0x34
 800ac8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac8e:	4b85      	ldr	r3, [pc, #532]	; (800aea4 <_strtod_l+0xbd4>)
 800ac90:	429a      	cmp	r2, r3
 800ac92:	f040 8090 	bne.w	800adb6 <_strtod_l+0xae6>
 800ac96:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800ac9a:	ec49 8b10 	vmov	d0, r8, r9
 800ac9e:	f7ff f9b9 	bl	800a014 <__ulp>
 800aca2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aca6:	ec51 0b10 	vmov	r0, r1, d0
 800acaa:	f7f5 fcc5 	bl	8000638 <__aeabi_dmul>
 800acae:	4642      	mov	r2, r8
 800acb0:	464b      	mov	r3, r9
 800acb2:	f7f5 fb0b 	bl	80002cc <__adddf3>
 800acb6:	460b      	mov	r3, r1
 800acb8:	4979      	ldr	r1, [pc, #484]	; (800aea0 <_strtod_l+0xbd0>)
 800acba:	4a7b      	ldr	r2, [pc, #492]	; (800aea8 <_strtod_l+0xbd8>)
 800acbc:	4019      	ands	r1, r3
 800acbe:	4291      	cmp	r1, r2
 800acc0:	4680      	mov	r8, r0
 800acc2:	d944      	bls.n	800ad4e <_strtod_l+0xa7e>
 800acc4:	ee18 2a90 	vmov	r2, s17
 800acc8:	4b78      	ldr	r3, [pc, #480]	; (800aeac <_strtod_l+0xbdc>)
 800acca:	429a      	cmp	r2, r3
 800accc:	d104      	bne.n	800acd8 <_strtod_l+0xa08>
 800acce:	ee18 3a10 	vmov	r3, s16
 800acd2:	3301      	adds	r3, #1
 800acd4:	f43f ad40 	beq.w	800a758 <_strtod_l+0x488>
 800acd8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800aeac <_strtod_l+0xbdc>
 800acdc:	f04f 38ff 	mov.w	r8, #4294967295
 800ace0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ace2:	4620      	mov	r0, r4
 800ace4:	f7fe fe6a 	bl	80099bc <_Bfree>
 800ace8:	9905      	ldr	r1, [sp, #20]
 800acea:	4620      	mov	r0, r4
 800acec:	f7fe fe66 	bl	80099bc <_Bfree>
 800acf0:	4659      	mov	r1, fp
 800acf2:	4620      	mov	r0, r4
 800acf4:	f7fe fe62 	bl	80099bc <_Bfree>
 800acf8:	4629      	mov	r1, r5
 800acfa:	4620      	mov	r0, r4
 800acfc:	f7fe fe5e 	bl	80099bc <_Bfree>
 800ad00:	e609      	b.n	800a916 <_strtod_l+0x646>
 800ad02:	f1b8 0f01 	cmp.w	r8, #1
 800ad06:	d103      	bne.n	800ad10 <_strtod_l+0xa40>
 800ad08:	f1b9 0f00 	cmp.w	r9, #0
 800ad0c:	f43f ad95 	beq.w	800a83a <_strtod_l+0x56a>
 800ad10:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ae68 <_strtod_l+0xb98>
 800ad14:	4f60      	ldr	r7, [pc, #384]	; (800ae98 <_strtod_l+0xbc8>)
 800ad16:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad1a:	2600      	movs	r6, #0
 800ad1c:	e7ae      	b.n	800ac7c <_strtod_l+0x9ac>
 800ad1e:	4f5f      	ldr	r7, [pc, #380]	; (800ae9c <_strtod_l+0xbcc>)
 800ad20:	2600      	movs	r6, #0
 800ad22:	e7a7      	b.n	800ac74 <_strtod_l+0x9a4>
 800ad24:	4b5d      	ldr	r3, [pc, #372]	; (800ae9c <_strtod_l+0xbcc>)
 800ad26:	4630      	mov	r0, r6
 800ad28:	4639      	mov	r1, r7
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f7f5 fc84 	bl	8000638 <__aeabi_dmul>
 800ad30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad32:	4606      	mov	r6, r0
 800ad34:	460f      	mov	r7, r1
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d09c      	beq.n	800ac74 <_strtod_l+0x9a4>
 800ad3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ad3e:	e79d      	b.n	800ac7c <_strtod_l+0x9ac>
 800ad40:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ae70 <_strtod_l+0xba0>
 800ad44:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad48:	ec57 6b17 	vmov	r6, r7, d7
 800ad4c:	e796      	b.n	800ac7c <_strtod_l+0x9ac>
 800ad4e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ad52:	9b04      	ldr	r3, [sp, #16]
 800ad54:	46ca      	mov	sl, r9
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1c2      	bne.n	800ace0 <_strtod_l+0xa10>
 800ad5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ad5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad60:	0d1b      	lsrs	r3, r3, #20
 800ad62:	051b      	lsls	r3, r3, #20
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d1bb      	bne.n	800ace0 <_strtod_l+0xa10>
 800ad68:	4630      	mov	r0, r6
 800ad6a:	4639      	mov	r1, r7
 800ad6c:	f7f5 ffc4 	bl	8000cf8 <__aeabi_d2lz>
 800ad70:	f7f5 fc34 	bl	80005dc <__aeabi_l2d>
 800ad74:	4602      	mov	r2, r0
 800ad76:	460b      	mov	r3, r1
 800ad78:	4630      	mov	r0, r6
 800ad7a:	4639      	mov	r1, r7
 800ad7c:	f7f5 faa4 	bl	80002c8 <__aeabi_dsub>
 800ad80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad82:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad86:	ea43 0308 	orr.w	r3, r3, r8
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	4606      	mov	r6, r0
 800ad8e:	460f      	mov	r7, r1
 800ad90:	d054      	beq.n	800ae3c <_strtod_l+0xb6c>
 800ad92:	a339      	add	r3, pc, #228	; (adr r3, 800ae78 <_strtod_l+0xba8>)
 800ad94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad98:	f7f5 fec0 	bl	8000b1c <__aeabi_dcmplt>
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	f47f ace5 	bne.w	800a76c <_strtod_l+0x49c>
 800ada2:	a337      	add	r3, pc, #220	; (adr r3, 800ae80 <_strtod_l+0xbb0>)
 800ada4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada8:	4630      	mov	r0, r6
 800adaa:	4639      	mov	r1, r7
 800adac:	f7f5 fed4 	bl	8000b58 <__aeabi_dcmpgt>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d095      	beq.n	800ace0 <_strtod_l+0xa10>
 800adb4:	e4da      	b.n	800a76c <_strtod_l+0x49c>
 800adb6:	9b04      	ldr	r3, [sp, #16]
 800adb8:	b333      	cbz	r3, 800ae08 <_strtod_l+0xb38>
 800adba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adbc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800adc0:	d822      	bhi.n	800ae08 <_strtod_l+0xb38>
 800adc2:	a331      	add	r3, pc, #196	; (adr r3, 800ae88 <_strtod_l+0xbb8>)
 800adc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc8:	4630      	mov	r0, r6
 800adca:	4639      	mov	r1, r7
 800adcc:	f7f5 feb0 	bl	8000b30 <__aeabi_dcmple>
 800add0:	b1a0      	cbz	r0, 800adfc <_strtod_l+0xb2c>
 800add2:	4639      	mov	r1, r7
 800add4:	4630      	mov	r0, r6
 800add6:	f7f5 ff07 	bl	8000be8 <__aeabi_d2uiz>
 800adda:	2801      	cmp	r0, #1
 800addc:	bf38      	it	cc
 800adde:	2001      	movcc	r0, #1
 800ade0:	f7f5 fbb0 	bl	8000544 <__aeabi_ui2d>
 800ade4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ade6:	4606      	mov	r6, r0
 800ade8:	460f      	mov	r7, r1
 800adea:	bb23      	cbnz	r3, 800ae36 <_strtod_l+0xb66>
 800adec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800adf0:	9010      	str	r0, [sp, #64]	; 0x40
 800adf2:	9311      	str	r3, [sp, #68]	; 0x44
 800adf4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800adf8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800adfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adfe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae00:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ae04:	1a9b      	subs	r3, r3, r2
 800ae06:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae08:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ae0c:	eeb0 0a48 	vmov.f32	s0, s16
 800ae10:	eef0 0a68 	vmov.f32	s1, s17
 800ae14:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ae18:	f7ff f8fc 	bl	800a014 <__ulp>
 800ae1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ae20:	ec53 2b10 	vmov	r2, r3, d0
 800ae24:	f7f5 fc08 	bl	8000638 <__aeabi_dmul>
 800ae28:	ec53 2b18 	vmov	r2, r3, d8
 800ae2c:	f7f5 fa4e 	bl	80002cc <__adddf3>
 800ae30:	4680      	mov	r8, r0
 800ae32:	4689      	mov	r9, r1
 800ae34:	e78d      	b.n	800ad52 <_strtod_l+0xa82>
 800ae36:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ae3a:	e7db      	b.n	800adf4 <_strtod_l+0xb24>
 800ae3c:	a314      	add	r3, pc, #80	; (adr r3, 800ae90 <_strtod_l+0xbc0>)
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	f7f5 fe6b 	bl	8000b1c <__aeabi_dcmplt>
 800ae46:	e7b3      	b.n	800adb0 <_strtod_l+0xae0>
 800ae48:	2300      	movs	r3, #0
 800ae4a:	930a      	str	r3, [sp, #40]	; 0x28
 800ae4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ae4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae50:	6013      	str	r3, [r2, #0]
 800ae52:	f7ff ba7c 	b.w	800a34e <_strtod_l+0x7e>
 800ae56:	2a65      	cmp	r2, #101	; 0x65
 800ae58:	f43f ab75 	beq.w	800a546 <_strtod_l+0x276>
 800ae5c:	2a45      	cmp	r2, #69	; 0x45
 800ae5e:	f43f ab72 	beq.w	800a546 <_strtod_l+0x276>
 800ae62:	2301      	movs	r3, #1
 800ae64:	f7ff bbaa 	b.w	800a5bc <_strtod_l+0x2ec>
 800ae68:	00000000 	.word	0x00000000
 800ae6c:	bff00000 	.word	0xbff00000
 800ae70:	00000000 	.word	0x00000000
 800ae74:	3ff00000 	.word	0x3ff00000
 800ae78:	94a03595 	.word	0x94a03595
 800ae7c:	3fdfffff 	.word	0x3fdfffff
 800ae80:	35afe535 	.word	0x35afe535
 800ae84:	3fe00000 	.word	0x3fe00000
 800ae88:	ffc00000 	.word	0xffc00000
 800ae8c:	41dfffff 	.word	0x41dfffff
 800ae90:	94a03595 	.word	0x94a03595
 800ae94:	3fcfffff 	.word	0x3fcfffff
 800ae98:	3ff00000 	.word	0x3ff00000
 800ae9c:	3fe00000 	.word	0x3fe00000
 800aea0:	7ff00000 	.word	0x7ff00000
 800aea4:	7fe00000 	.word	0x7fe00000
 800aea8:	7c9fffff 	.word	0x7c9fffff
 800aeac:	7fefffff 	.word	0x7fefffff

0800aeb0 <_strtod_r>:
 800aeb0:	4b01      	ldr	r3, [pc, #4]	; (800aeb8 <_strtod_r+0x8>)
 800aeb2:	f7ff ba0d 	b.w	800a2d0 <_strtod_l>
 800aeb6:	bf00      	nop
 800aeb8:	2000007c 	.word	0x2000007c

0800aebc <_strtol_l.constprop.0>:
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aec2:	d001      	beq.n	800aec8 <_strtol_l.constprop.0+0xc>
 800aec4:	2b24      	cmp	r3, #36	; 0x24
 800aec6:	d906      	bls.n	800aed6 <_strtol_l.constprop.0+0x1a>
 800aec8:	f7fd fd7a 	bl	80089c0 <__errno>
 800aecc:	2316      	movs	r3, #22
 800aece:	6003      	str	r3, [r0, #0]
 800aed0:	2000      	movs	r0, #0
 800aed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aed6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800afbc <_strtol_l.constprop.0+0x100>
 800aeda:	460d      	mov	r5, r1
 800aedc:	462e      	mov	r6, r5
 800aede:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aee2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800aee6:	f017 0708 	ands.w	r7, r7, #8
 800aeea:	d1f7      	bne.n	800aedc <_strtol_l.constprop.0+0x20>
 800aeec:	2c2d      	cmp	r4, #45	; 0x2d
 800aeee:	d132      	bne.n	800af56 <_strtol_l.constprop.0+0x9a>
 800aef0:	782c      	ldrb	r4, [r5, #0]
 800aef2:	2701      	movs	r7, #1
 800aef4:	1cb5      	adds	r5, r6, #2
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d05b      	beq.n	800afb2 <_strtol_l.constprop.0+0xf6>
 800aefa:	2b10      	cmp	r3, #16
 800aefc:	d109      	bne.n	800af12 <_strtol_l.constprop.0+0x56>
 800aefe:	2c30      	cmp	r4, #48	; 0x30
 800af00:	d107      	bne.n	800af12 <_strtol_l.constprop.0+0x56>
 800af02:	782c      	ldrb	r4, [r5, #0]
 800af04:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800af08:	2c58      	cmp	r4, #88	; 0x58
 800af0a:	d14d      	bne.n	800afa8 <_strtol_l.constprop.0+0xec>
 800af0c:	786c      	ldrb	r4, [r5, #1]
 800af0e:	2310      	movs	r3, #16
 800af10:	3502      	adds	r5, #2
 800af12:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800af16:	f108 38ff 	add.w	r8, r8, #4294967295
 800af1a:	f04f 0e00 	mov.w	lr, #0
 800af1e:	fbb8 f9f3 	udiv	r9, r8, r3
 800af22:	4676      	mov	r6, lr
 800af24:	fb03 8a19 	mls	sl, r3, r9, r8
 800af28:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800af2c:	f1bc 0f09 	cmp.w	ip, #9
 800af30:	d816      	bhi.n	800af60 <_strtol_l.constprop.0+0xa4>
 800af32:	4664      	mov	r4, ip
 800af34:	42a3      	cmp	r3, r4
 800af36:	dd24      	ble.n	800af82 <_strtol_l.constprop.0+0xc6>
 800af38:	f1be 3fff 	cmp.w	lr, #4294967295
 800af3c:	d008      	beq.n	800af50 <_strtol_l.constprop.0+0x94>
 800af3e:	45b1      	cmp	r9, r6
 800af40:	d31c      	bcc.n	800af7c <_strtol_l.constprop.0+0xc0>
 800af42:	d101      	bne.n	800af48 <_strtol_l.constprop.0+0x8c>
 800af44:	45a2      	cmp	sl, r4
 800af46:	db19      	blt.n	800af7c <_strtol_l.constprop.0+0xc0>
 800af48:	fb06 4603 	mla	r6, r6, r3, r4
 800af4c:	f04f 0e01 	mov.w	lr, #1
 800af50:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af54:	e7e8      	b.n	800af28 <_strtol_l.constprop.0+0x6c>
 800af56:	2c2b      	cmp	r4, #43	; 0x2b
 800af58:	bf04      	itt	eq
 800af5a:	782c      	ldrbeq	r4, [r5, #0]
 800af5c:	1cb5      	addeq	r5, r6, #2
 800af5e:	e7ca      	b.n	800aef6 <_strtol_l.constprop.0+0x3a>
 800af60:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800af64:	f1bc 0f19 	cmp.w	ip, #25
 800af68:	d801      	bhi.n	800af6e <_strtol_l.constprop.0+0xb2>
 800af6a:	3c37      	subs	r4, #55	; 0x37
 800af6c:	e7e2      	b.n	800af34 <_strtol_l.constprop.0+0x78>
 800af6e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800af72:	f1bc 0f19 	cmp.w	ip, #25
 800af76:	d804      	bhi.n	800af82 <_strtol_l.constprop.0+0xc6>
 800af78:	3c57      	subs	r4, #87	; 0x57
 800af7a:	e7db      	b.n	800af34 <_strtol_l.constprop.0+0x78>
 800af7c:	f04f 3eff 	mov.w	lr, #4294967295
 800af80:	e7e6      	b.n	800af50 <_strtol_l.constprop.0+0x94>
 800af82:	f1be 3fff 	cmp.w	lr, #4294967295
 800af86:	d105      	bne.n	800af94 <_strtol_l.constprop.0+0xd8>
 800af88:	2322      	movs	r3, #34	; 0x22
 800af8a:	6003      	str	r3, [r0, #0]
 800af8c:	4646      	mov	r6, r8
 800af8e:	b942      	cbnz	r2, 800afa2 <_strtol_l.constprop.0+0xe6>
 800af90:	4630      	mov	r0, r6
 800af92:	e79e      	b.n	800aed2 <_strtol_l.constprop.0+0x16>
 800af94:	b107      	cbz	r7, 800af98 <_strtol_l.constprop.0+0xdc>
 800af96:	4276      	negs	r6, r6
 800af98:	2a00      	cmp	r2, #0
 800af9a:	d0f9      	beq.n	800af90 <_strtol_l.constprop.0+0xd4>
 800af9c:	f1be 0f00 	cmp.w	lr, #0
 800afa0:	d000      	beq.n	800afa4 <_strtol_l.constprop.0+0xe8>
 800afa2:	1e69      	subs	r1, r5, #1
 800afa4:	6011      	str	r1, [r2, #0]
 800afa6:	e7f3      	b.n	800af90 <_strtol_l.constprop.0+0xd4>
 800afa8:	2430      	movs	r4, #48	; 0x30
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d1b1      	bne.n	800af12 <_strtol_l.constprop.0+0x56>
 800afae:	2308      	movs	r3, #8
 800afb0:	e7af      	b.n	800af12 <_strtol_l.constprop.0+0x56>
 800afb2:	2c30      	cmp	r4, #48	; 0x30
 800afb4:	d0a5      	beq.n	800af02 <_strtol_l.constprop.0+0x46>
 800afb6:	230a      	movs	r3, #10
 800afb8:	e7ab      	b.n	800af12 <_strtol_l.constprop.0+0x56>
 800afba:	bf00      	nop
 800afbc:	0800e5b1 	.word	0x0800e5b1

0800afc0 <_strtol_r>:
 800afc0:	f7ff bf7c 	b.w	800aebc <_strtol_l.constprop.0>

0800afc4 <__ssputs_r>:
 800afc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afc8:	688e      	ldr	r6, [r1, #8]
 800afca:	461f      	mov	r7, r3
 800afcc:	42be      	cmp	r6, r7
 800afce:	680b      	ldr	r3, [r1, #0]
 800afd0:	4682      	mov	sl, r0
 800afd2:	460c      	mov	r4, r1
 800afd4:	4690      	mov	r8, r2
 800afd6:	d82c      	bhi.n	800b032 <__ssputs_r+0x6e>
 800afd8:	898a      	ldrh	r2, [r1, #12]
 800afda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800afde:	d026      	beq.n	800b02e <__ssputs_r+0x6a>
 800afe0:	6965      	ldr	r5, [r4, #20]
 800afe2:	6909      	ldr	r1, [r1, #16]
 800afe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800afe8:	eba3 0901 	sub.w	r9, r3, r1
 800afec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aff0:	1c7b      	adds	r3, r7, #1
 800aff2:	444b      	add	r3, r9
 800aff4:	106d      	asrs	r5, r5, #1
 800aff6:	429d      	cmp	r5, r3
 800aff8:	bf38      	it	cc
 800affa:	461d      	movcc	r5, r3
 800affc:	0553      	lsls	r3, r2, #21
 800affe:	d527      	bpl.n	800b050 <__ssputs_r+0x8c>
 800b000:	4629      	mov	r1, r5
 800b002:	f7fe fc0f 	bl	8009824 <_malloc_r>
 800b006:	4606      	mov	r6, r0
 800b008:	b360      	cbz	r0, 800b064 <__ssputs_r+0xa0>
 800b00a:	6921      	ldr	r1, [r4, #16]
 800b00c:	464a      	mov	r2, r9
 800b00e:	f7fd fd04 	bl	8008a1a <memcpy>
 800b012:	89a3      	ldrh	r3, [r4, #12]
 800b014:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b01c:	81a3      	strh	r3, [r4, #12]
 800b01e:	6126      	str	r6, [r4, #16]
 800b020:	6165      	str	r5, [r4, #20]
 800b022:	444e      	add	r6, r9
 800b024:	eba5 0509 	sub.w	r5, r5, r9
 800b028:	6026      	str	r6, [r4, #0]
 800b02a:	60a5      	str	r5, [r4, #8]
 800b02c:	463e      	mov	r6, r7
 800b02e:	42be      	cmp	r6, r7
 800b030:	d900      	bls.n	800b034 <__ssputs_r+0x70>
 800b032:	463e      	mov	r6, r7
 800b034:	6820      	ldr	r0, [r4, #0]
 800b036:	4632      	mov	r2, r6
 800b038:	4641      	mov	r1, r8
 800b03a:	f000 f9c9 	bl	800b3d0 <memmove>
 800b03e:	68a3      	ldr	r3, [r4, #8]
 800b040:	1b9b      	subs	r3, r3, r6
 800b042:	60a3      	str	r3, [r4, #8]
 800b044:	6823      	ldr	r3, [r4, #0]
 800b046:	4433      	add	r3, r6
 800b048:	6023      	str	r3, [r4, #0]
 800b04a:	2000      	movs	r0, #0
 800b04c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b050:	462a      	mov	r2, r5
 800b052:	f000 fd9e 	bl	800bb92 <_realloc_r>
 800b056:	4606      	mov	r6, r0
 800b058:	2800      	cmp	r0, #0
 800b05a:	d1e0      	bne.n	800b01e <__ssputs_r+0x5a>
 800b05c:	6921      	ldr	r1, [r4, #16]
 800b05e:	4650      	mov	r0, sl
 800b060:	f7fe fb6c 	bl	800973c <_free_r>
 800b064:	230c      	movs	r3, #12
 800b066:	f8ca 3000 	str.w	r3, [sl]
 800b06a:	89a3      	ldrh	r3, [r4, #12]
 800b06c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b070:	81a3      	strh	r3, [r4, #12]
 800b072:	f04f 30ff 	mov.w	r0, #4294967295
 800b076:	e7e9      	b.n	800b04c <__ssputs_r+0x88>

0800b078 <_svfiprintf_r>:
 800b078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b07c:	4698      	mov	r8, r3
 800b07e:	898b      	ldrh	r3, [r1, #12]
 800b080:	061b      	lsls	r3, r3, #24
 800b082:	b09d      	sub	sp, #116	; 0x74
 800b084:	4607      	mov	r7, r0
 800b086:	460d      	mov	r5, r1
 800b088:	4614      	mov	r4, r2
 800b08a:	d50e      	bpl.n	800b0aa <_svfiprintf_r+0x32>
 800b08c:	690b      	ldr	r3, [r1, #16]
 800b08e:	b963      	cbnz	r3, 800b0aa <_svfiprintf_r+0x32>
 800b090:	2140      	movs	r1, #64	; 0x40
 800b092:	f7fe fbc7 	bl	8009824 <_malloc_r>
 800b096:	6028      	str	r0, [r5, #0]
 800b098:	6128      	str	r0, [r5, #16]
 800b09a:	b920      	cbnz	r0, 800b0a6 <_svfiprintf_r+0x2e>
 800b09c:	230c      	movs	r3, #12
 800b09e:	603b      	str	r3, [r7, #0]
 800b0a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a4:	e0d0      	b.n	800b248 <_svfiprintf_r+0x1d0>
 800b0a6:	2340      	movs	r3, #64	; 0x40
 800b0a8:	616b      	str	r3, [r5, #20]
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b0ae:	2320      	movs	r3, #32
 800b0b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0b8:	2330      	movs	r3, #48	; 0x30
 800b0ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b260 <_svfiprintf_r+0x1e8>
 800b0be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0c2:	f04f 0901 	mov.w	r9, #1
 800b0c6:	4623      	mov	r3, r4
 800b0c8:	469a      	mov	sl, r3
 800b0ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0ce:	b10a      	cbz	r2, 800b0d4 <_svfiprintf_r+0x5c>
 800b0d0:	2a25      	cmp	r2, #37	; 0x25
 800b0d2:	d1f9      	bne.n	800b0c8 <_svfiprintf_r+0x50>
 800b0d4:	ebba 0b04 	subs.w	fp, sl, r4
 800b0d8:	d00b      	beq.n	800b0f2 <_svfiprintf_r+0x7a>
 800b0da:	465b      	mov	r3, fp
 800b0dc:	4622      	mov	r2, r4
 800b0de:	4629      	mov	r1, r5
 800b0e0:	4638      	mov	r0, r7
 800b0e2:	f7ff ff6f 	bl	800afc4 <__ssputs_r>
 800b0e6:	3001      	adds	r0, #1
 800b0e8:	f000 80a9 	beq.w	800b23e <_svfiprintf_r+0x1c6>
 800b0ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0ee:	445a      	add	r2, fp
 800b0f0:	9209      	str	r2, [sp, #36]	; 0x24
 800b0f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	f000 80a1 	beq.w	800b23e <_svfiprintf_r+0x1c6>
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b102:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b106:	f10a 0a01 	add.w	sl, sl, #1
 800b10a:	9304      	str	r3, [sp, #16]
 800b10c:	9307      	str	r3, [sp, #28]
 800b10e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b112:	931a      	str	r3, [sp, #104]	; 0x68
 800b114:	4654      	mov	r4, sl
 800b116:	2205      	movs	r2, #5
 800b118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b11c:	4850      	ldr	r0, [pc, #320]	; (800b260 <_svfiprintf_r+0x1e8>)
 800b11e:	f7f5 f877 	bl	8000210 <memchr>
 800b122:	9a04      	ldr	r2, [sp, #16]
 800b124:	b9d8      	cbnz	r0, 800b15e <_svfiprintf_r+0xe6>
 800b126:	06d0      	lsls	r0, r2, #27
 800b128:	bf44      	itt	mi
 800b12a:	2320      	movmi	r3, #32
 800b12c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b130:	0711      	lsls	r1, r2, #28
 800b132:	bf44      	itt	mi
 800b134:	232b      	movmi	r3, #43	; 0x2b
 800b136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b13a:	f89a 3000 	ldrb.w	r3, [sl]
 800b13e:	2b2a      	cmp	r3, #42	; 0x2a
 800b140:	d015      	beq.n	800b16e <_svfiprintf_r+0xf6>
 800b142:	9a07      	ldr	r2, [sp, #28]
 800b144:	4654      	mov	r4, sl
 800b146:	2000      	movs	r0, #0
 800b148:	f04f 0c0a 	mov.w	ip, #10
 800b14c:	4621      	mov	r1, r4
 800b14e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b152:	3b30      	subs	r3, #48	; 0x30
 800b154:	2b09      	cmp	r3, #9
 800b156:	d94d      	bls.n	800b1f4 <_svfiprintf_r+0x17c>
 800b158:	b1b0      	cbz	r0, 800b188 <_svfiprintf_r+0x110>
 800b15a:	9207      	str	r2, [sp, #28]
 800b15c:	e014      	b.n	800b188 <_svfiprintf_r+0x110>
 800b15e:	eba0 0308 	sub.w	r3, r0, r8
 800b162:	fa09 f303 	lsl.w	r3, r9, r3
 800b166:	4313      	orrs	r3, r2
 800b168:	9304      	str	r3, [sp, #16]
 800b16a:	46a2      	mov	sl, r4
 800b16c:	e7d2      	b.n	800b114 <_svfiprintf_r+0x9c>
 800b16e:	9b03      	ldr	r3, [sp, #12]
 800b170:	1d19      	adds	r1, r3, #4
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	9103      	str	r1, [sp, #12]
 800b176:	2b00      	cmp	r3, #0
 800b178:	bfbb      	ittet	lt
 800b17a:	425b      	neglt	r3, r3
 800b17c:	f042 0202 	orrlt.w	r2, r2, #2
 800b180:	9307      	strge	r3, [sp, #28]
 800b182:	9307      	strlt	r3, [sp, #28]
 800b184:	bfb8      	it	lt
 800b186:	9204      	strlt	r2, [sp, #16]
 800b188:	7823      	ldrb	r3, [r4, #0]
 800b18a:	2b2e      	cmp	r3, #46	; 0x2e
 800b18c:	d10c      	bne.n	800b1a8 <_svfiprintf_r+0x130>
 800b18e:	7863      	ldrb	r3, [r4, #1]
 800b190:	2b2a      	cmp	r3, #42	; 0x2a
 800b192:	d134      	bne.n	800b1fe <_svfiprintf_r+0x186>
 800b194:	9b03      	ldr	r3, [sp, #12]
 800b196:	1d1a      	adds	r2, r3, #4
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	9203      	str	r2, [sp, #12]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	bfb8      	it	lt
 800b1a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1a4:	3402      	adds	r4, #2
 800b1a6:	9305      	str	r3, [sp, #20]
 800b1a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b270 <_svfiprintf_r+0x1f8>
 800b1ac:	7821      	ldrb	r1, [r4, #0]
 800b1ae:	2203      	movs	r2, #3
 800b1b0:	4650      	mov	r0, sl
 800b1b2:	f7f5 f82d 	bl	8000210 <memchr>
 800b1b6:	b138      	cbz	r0, 800b1c8 <_svfiprintf_r+0x150>
 800b1b8:	9b04      	ldr	r3, [sp, #16]
 800b1ba:	eba0 000a 	sub.w	r0, r0, sl
 800b1be:	2240      	movs	r2, #64	; 0x40
 800b1c0:	4082      	lsls	r2, r0
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	3401      	adds	r4, #1
 800b1c6:	9304      	str	r3, [sp, #16]
 800b1c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1cc:	4825      	ldr	r0, [pc, #148]	; (800b264 <_svfiprintf_r+0x1ec>)
 800b1ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1d2:	2206      	movs	r2, #6
 800b1d4:	f7f5 f81c 	bl	8000210 <memchr>
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	d038      	beq.n	800b24e <_svfiprintf_r+0x1d6>
 800b1dc:	4b22      	ldr	r3, [pc, #136]	; (800b268 <_svfiprintf_r+0x1f0>)
 800b1de:	bb1b      	cbnz	r3, 800b228 <_svfiprintf_r+0x1b0>
 800b1e0:	9b03      	ldr	r3, [sp, #12]
 800b1e2:	3307      	adds	r3, #7
 800b1e4:	f023 0307 	bic.w	r3, r3, #7
 800b1e8:	3308      	adds	r3, #8
 800b1ea:	9303      	str	r3, [sp, #12]
 800b1ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ee:	4433      	add	r3, r6
 800b1f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b1f2:	e768      	b.n	800b0c6 <_svfiprintf_r+0x4e>
 800b1f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1f8:	460c      	mov	r4, r1
 800b1fa:	2001      	movs	r0, #1
 800b1fc:	e7a6      	b.n	800b14c <_svfiprintf_r+0xd4>
 800b1fe:	2300      	movs	r3, #0
 800b200:	3401      	adds	r4, #1
 800b202:	9305      	str	r3, [sp, #20]
 800b204:	4619      	mov	r1, r3
 800b206:	f04f 0c0a 	mov.w	ip, #10
 800b20a:	4620      	mov	r0, r4
 800b20c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b210:	3a30      	subs	r2, #48	; 0x30
 800b212:	2a09      	cmp	r2, #9
 800b214:	d903      	bls.n	800b21e <_svfiprintf_r+0x1a6>
 800b216:	2b00      	cmp	r3, #0
 800b218:	d0c6      	beq.n	800b1a8 <_svfiprintf_r+0x130>
 800b21a:	9105      	str	r1, [sp, #20]
 800b21c:	e7c4      	b.n	800b1a8 <_svfiprintf_r+0x130>
 800b21e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b222:	4604      	mov	r4, r0
 800b224:	2301      	movs	r3, #1
 800b226:	e7f0      	b.n	800b20a <_svfiprintf_r+0x192>
 800b228:	ab03      	add	r3, sp, #12
 800b22a:	9300      	str	r3, [sp, #0]
 800b22c:	462a      	mov	r2, r5
 800b22e:	4b0f      	ldr	r3, [pc, #60]	; (800b26c <_svfiprintf_r+0x1f4>)
 800b230:	a904      	add	r1, sp, #16
 800b232:	4638      	mov	r0, r7
 800b234:	f7fc fc76 	bl	8007b24 <_printf_float>
 800b238:	1c42      	adds	r2, r0, #1
 800b23a:	4606      	mov	r6, r0
 800b23c:	d1d6      	bne.n	800b1ec <_svfiprintf_r+0x174>
 800b23e:	89ab      	ldrh	r3, [r5, #12]
 800b240:	065b      	lsls	r3, r3, #25
 800b242:	f53f af2d 	bmi.w	800b0a0 <_svfiprintf_r+0x28>
 800b246:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b248:	b01d      	add	sp, #116	; 0x74
 800b24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b24e:	ab03      	add	r3, sp, #12
 800b250:	9300      	str	r3, [sp, #0]
 800b252:	462a      	mov	r2, r5
 800b254:	4b05      	ldr	r3, [pc, #20]	; (800b26c <_svfiprintf_r+0x1f4>)
 800b256:	a904      	add	r1, sp, #16
 800b258:	4638      	mov	r0, r7
 800b25a:	f7fc ff07 	bl	800806c <_printf_i>
 800b25e:	e7eb      	b.n	800b238 <_svfiprintf_r+0x1c0>
 800b260:	0800e6b1 	.word	0x0800e6b1
 800b264:	0800e6bb 	.word	0x0800e6bb
 800b268:	08007b25 	.word	0x08007b25
 800b26c:	0800afc5 	.word	0x0800afc5
 800b270:	0800e6b7 	.word	0x0800e6b7

0800b274 <__sflush_r>:
 800b274:	898a      	ldrh	r2, [r1, #12]
 800b276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b27a:	4605      	mov	r5, r0
 800b27c:	0710      	lsls	r0, r2, #28
 800b27e:	460c      	mov	r4, r1
 800b280:	d458      	bmi.n	800b334 <__sflush_r+0xc0>
 800b282:	684b      	ldr	r3, [r1, #4]
 800b284:	2b00      	cmp	r3, #0
 800b286:	dc05      	bgt.n	800b294 <__sflush_r+0x20>
 800b288:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	dc02      	bgt.n	800b294 <__sflush_r+0x20>
 800b28e:	2000      	movs	r0, #0
 800b290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b296:	2e00      	cmp	r6, #0
 800b298:	d0f9      	beq.n	800b28e <__sflush_r+0x1a>
 800b29a:	2300      	movs	r3, #0
 800b29c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b2a0:	682f      	ldr	r7, [r5, #0]
 800b2a2:	6a21      	ldr	r1, [r4, #32]
 800b2a4:	602b      	str	r3, [r5, #0]
 800b2a6:	d032      	beq.n	800b30e <__sflush_r+0x9a>
 800b2a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b2aa:	89a3      	ldrh	r3, [r4, #12]
 800b2ac:	075a      	lsls	r2, r3, #29
 800b2ae:	d505      	bpl.n	800b2bc <__sflush_r+0x48>
 800b2b0:	6863      	ldr	r3, [r4, #4]
 800b2b2:	1ac0      	subs	r0, r0, r3
 800b2b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b2b6:	b10b      	cbz	r3, 800b2bc <__sflush_r+0x48>
 800b2b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b2ba:	1ac0      	subs	r0, r0, r3
 800b2bc:	2300      	movs	r3, #0
 800b2be:	4602      	mov	r2, r0
 800b2c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2c2:	6a21      	ldr	r1, [r4, #32]
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	47b0      	blx	r6
 800b2c8:	1c43      	adds	r3, r0, #1
 800b2ca:	89a3      	ldrh	r3, [r4, #12]
 800b2cc:	d106      	bne.n	800b2dc <__sflush_r+0x68>
 800b2ce:	6829      	ldr	r1, [r5, #0]
 800b2d0:	291d      	cmp	r1, #29
 800b2d2:	d82b      	bhi.n	800b32c <__sflush_r+0xb8>
 800b2d4:	4a29      	ldr	r2, [pc, #164]	; (800b37c <__sflush_r+0x108>)
 800b2d6:	410a      	asrs	r2, r1
 800b2d8:	07d6      	lsls	r6, r2, #31
 800b2da:	d427      	bmi.n	800b32c <__sflush_r+0xb8>
 800b2dc:	2200      	movs	r2, #0
 800b2de:	6062      	str	r2, [r4, #4]
 800b2e0:	04d9      	lsls	r1, r3, #19
 800b2e2:	6922      	ldr	r2, [r4, #16]
 800b2e4:	6022      	str	r2, [r4, #0]
 800b2e6:	d504      	bpl.n	800b2f2 <__sflush_r+0x7e>
 800b2e8:	1c42      	adds	r2, r0, #1
 800b2ea:	d101      	bne.n	800b2f0 <__sflush_r+0x7c>
 800b2ec:	682b      	ldr	r3, [r5, #0]
 800b2ee:	b903      	cbnz	r3, 800b2f2 <__sflush_r+0x7e>
 800b2f0:	6560      	str	r0, [r4, #84]	; 0x54
 800b2f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2f4:	602f      	str	r7, [r5, #0]
 800b2f6:	2900      	cmp	r1, #0
 800b2f8:	d0c9      	beq.n	800b28e <__sflush_r+0x1a>
 800b2fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2fe:	4299      	cmp	r1, r3
 800b300:	d002      	beq.n	800b308 <__sflush_r+0x94>
 800b302:	4628      	mov	r0, r5
 800b304:	f7fe fa1a 	bl	800973c <_free_r>
 800b308:	2000      	movs	r0, #0
 800b30a:	6360      	str	r0, [r4, #52]	; 0x34
 800b30c:	e7c0      	b.n	800b290 <__sflush_r+0x1c>
 800b30e:	2301      	movs	r3, #1
 800b310:	4628      	mov	r0, r5
 800b312:	47b0      	blx	r6
 800b314:	1c41      	adds	r1, r0, #1
 800b316:	d1c8      	bne.n	800b2aa <__sflush_r+0x36>
 800b318:	682b      	ldr	r3, [r5, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d0c5      	beq.n	800b2aa <__sflush_r+0x36>
 800b31e:	2b1d      	cmp	r3, #29
 800b320:	d001      	beq.n	800b326 <__sflush_r+0xb2>
 800b322:	2b16      	cmp	r3, #22
 800b324:	d101      	bne.n	800b32a <__sflush_r+0xb6>
 800b326:	602f      	str	r7, [r5, #0]
 800b328:	e7b1      	b.n	800b28e <__sflush_r+0x1a>
 800b32a:	89a3      	ldrh	r3, [r4, #12]
 800b32c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b330:	81a3      	strh	r3, [r4, #12]
 800b332:	e7ad      	b.n	800b290 <__sflush_r+0x1c>
 800b334:	690f      	ldr	r7, [r1, #16]
 800b336:	2f00      	cmp	r7, #0
 800b338:	d0a9      	beq.n	800b28e <__sflush_r+0x1a>
 800b33a:	0793      	lsls	r3, r2, #30
 800b33c:	680e      	ldr	r6, [r1, #0]
 800b33e:	bf08      	it	eq
 800b340:	694b      	ldreq	r3, [r1, #20]
 800b342:	600f      	str	r7, [r1, #0]
 800b344:	bf18      	it	ne
 800b346:	2300      	movne	r3, #0
 800b348:	eba6 0807 	sub.w	r8, r6, r7
 800b34c:	608b      	str	r3, [r1, #8]
 800b34e:	f1b8 0f00 	cmp.w	r8, #0
 800b352:	dd9c      	ble.n	800b28e <__sflush_r+0x1a>
 800b354:	6a21      	ldr	r1, [r4, #32]
 800b356:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b358:	4643      	mov	r3, r8
 800b35a:	463a      	mov	r2, r7
 800b35c:	4628      	mov	r0, r5
 800b35e:	47b0      	blx	r6
 800b360:	2800      	cmp	r0, #0
 800b362:	dc06      	bgt.n	800b372 <__sflush_r+0xfe>
 800b364:	89a3      	ldrh	r3, [r4, #12]
 800b366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b36a:	81a3      	strh	r3, [r4, #12]
 800b36c:	f04f 30ff 	mov.w	r0, #4294967295
 800b370:	e78e      	b.n	800b290 <__sflush_r+0x1c>
 800b372:	4407      	add	r7, r0
 800b374:	eba8 0800 	sub.w	r8, r8, r0
 800b378:	e7e9      	b.n	800b34e <__sflush_r+0xda>
 800b37a:	bf00      	nop
 800b37c:	dfbffffe 	.word	0xdfbffffe

0800b380 <_fflush_r>:
 800b380:	b538      	push	{r3, r4, r5, lr}
 800b382:	690b      	ldr	r3, [r1, #16]
 800b384:	4605      	mov	r5, r0
 800b386:	460c      	mov	r4, r1
 800b388:	b913      	cbnz	r3, 800b390 <_fflush_r+0x10>
 800b38a:	2500      	movs	r5, #0
 800b38c:	4628      	mov	r0, r5
 800b38e:	bd38      	pop	{r3, r4, r5, pc}
 800b390:	b118      	cbz	r0, 800b39a <_fflush_r+0x1a>
 800b392:	6a03      	ldr	r3, [r0, #32]
 800b394:	b90b      	cbnz	r3, 800b39a <_fflush_r+0x1a>
 800b396:	f7fd fa27 	bl	80087e8 <__sinit>
 800b39a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d0f3      	beq.n	800b38a <_fflush_r+0xa>
 800b3a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b3a4:	07d0      	lsls	r0, r2, #31
 800b3a6:	d404      	bmi.n	800b3b2 <_fflush_r+0x32>
 800b3a8:	0599      	lsls	r1, r3, #22
 800b3aa:	d402      	bmi.n	800b3b2 <_fflush_r+0x32>
 800b3ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3ae:	f7fd fb32 	bl	8008a16 <__retarget_lock_acquire_recursive>
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	4621      	mov	r1, r4
 800b3b6:	f7ff ff5d 	bl	800b274 <__sflush_r>
 800b3ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3bc:	07da      	lsls	r2, r3, #31
 800b3be:	4605      	mov	r5, r0
 800b3c0:	d4e4      	bmi.n	800b38c <_fflush_r+0xc>
 800b3c2:	89a3      	ldrh	r3, [r4, #12]
 800b3c4:	059b      	lsls	r3, r3, #22
 800b3c6:	d4e1      	bmi.n	800b38c <_fflush_r+0xc>
 800b3c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3ca:	f7fd fb25 	bl	8008a18 <__retarget_lock_release_recursive>
 800b3ce:	e7dd      	b.n	800b38c <_fflush_r+0xc>

0800b3d0 <memmove>:
 800b3d0:	4288      	cmp	r0, r1
 800b3d2:	b510      	push	{r4, lr}
 800b3d4:	eb01 0402 	add.w	r4, r1, r2
 800b3d8:	d902      	bls.n	800b3e0 <memmove+0x10>
 800b3da:	4284      	cmp	r4, r0
 800b3dc:	4623      	mov	r3, r4
 800b3de:	d807      	bhi.n	800b3f0 <memmove+0x20>
 800b3e0:	1e43      	subs	r3, r0, #1
 800b3e2:	42a1      	cmp	r1, r4
 800b3e4:	d008      	beq.n	800b3f8 <memmove+0x28>
 800b3e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3ee:	e7f8      	b.n	800b3e2 <memmove+0x12>
 800b3f0:	4402      	add	r2, r0
 800b3f2:	4601      	mov	r1, r0
 800b3f4:	428a      	cmp	r2, r1
 800b3f6:	d100      	bne.n	800b3fa <memmove+0x2a>
 800b3f8:	bd10      	pop	{r4, pc}
 800b3fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b402:	e7f7      	b.n	800b3f4 <memmove+0x24>

0800b404 <strncmp>:
 800b404:	b510      	push	{r4, lr}
 800b406:	b16a      	cbz	r2, 800b424 <strncmp+0x20>
 800b408:	3901      	subs	r1, #1
 800b40a:	1884      	adds	r4, r0, r2
 800b40c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b410:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b414:	429a      	cmp	r2, r3
 800b416:	d103      	bne.n	800b420 <strncmp+0x1c>
 800b418:	42a0      	cmp	r0, r4
 800b41a:	d001      	beq.n	800b420 <strncmp+0x1c>
 800b41c:	2a00      	cmp	r2, #0
 800b41e:	d1f5      	bne.n	800b40c <strncmp+0x8>
 800b420:	1ad0      	subs	r0, r2, r3
 800b422:	bd10      	pop	{r4, pc}
 800b424:	4610      	mov	r0, r2
 800b426:	e7fc      	b.n	800b422 <strncmp+0x1e>

0800b428 <_sbrk_r>:
 800b428:	b538      	push	{r3, r4, r5, lr}
 800b42a:	4d06      	ldr	r5, [pc, #24]	; (800b444 <_sbrk_r+0x1c>)
 800b42c:	2300      	movs	r3, #0
 800b42e:	4604      	mov	r4, r0
 800b430:	4608      	mov	r0, r1
 800b432:	602b      	str	r3, [r5, #0]
 800b434:	f7f6 fd78 	bl	8001f28 <_sbrk>
 800b438:	1c43      	adds	r3, r0, #1
 800b43a:	d102      	bne.n	800b442 <_sbrk_r+0x1a>
 800b43c:	682b      	ldr	r3, [r5, #0]
 800b43e:	b103      	cbz	r3, 800b442 <_sbrk_r+0x1a>
 800b440:	6023      	str	r3, [r4, #0]
 800b442:	bd38      	pop	{r3, r4, r5, pc}
 800b444:	200051fc 	.word	0x200051fc

0800b448 <nan>:
 800b448:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b450 <nan+0x8>
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	00000000 	.word	0x00000000
 800b454:	7ff80000 	.word	0x7ff80000

0800b458 <__assert_func>:
 800b458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b45a:	4614      	mov	r4, r2
 800b45c:	461a      	mov	r2, r3
 800b45e:	4b09      	ldr	r3, [pc, #36]	; (800b484 <__assert_func+0x2c>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4605      	mov	r5, r0
 800b464:	68d8      	ldr	r0, [r3, #12]
 800b466:	b14c      	cbz	r4, 800b47c <__assert_func+0x24>
 800b468:	4b07      	ldr	r3, [pc, #28]	; (800b488 <__assert_func+0x30>)
 800b46a:	9100      	str	r1, [sp, #0]
 800b46c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b470:	4906      	ldr	r1, [pc, #24]	; (800b48c <__assert_func+0x34>)
 800b472:	462b      	mov	r3, r5
 800b474:	f000 fbca 	bl	800bc0c <fiprintf>
 800b478:	f000 fbda 	bl	800bc30 <abort>
 800b47c:	4b04      	ldr	r3, [pc, #16]	; (800b490 <__assert_func+0x38>)
 800b47e:	461c      	mov	r4, r3
 800b480:	e7f3      	b.n	800b46a <__assert_func+0x12>
 800b482:	bf00      	nop
 800b484:	20000078 	.word	0x20000078
 800b488:	0800e6ca 	.word	0x0800e6ca
 800b48c:	0800e6d7 	.word	0x0800e6d7
 800b490:	0800e705 	.word	0x0800e705

0800b494 <_calloc_r>:
 800b494:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b496:	fba1 2402 	umull	r2, r4, r1, r2
 800b49a:	b94c      	cbnz	r4, 800b4b0 <_calloc_r+0x1c>
 800b49c:	4611      	mov	r1, r2
 800b49e:	9201      	str	r2, [sp, #4]
 800b4a0:	f7fe f9c0 	bl	8009824 <_malloc_r>
 800b4a4:	9a01      	ldr	r2, [sp, #4]
 800b4a6:	4605      	mov	r5, r0
 800b4a8:	b930      	cbnz	r0, 800b4b8 <_calloc_r+0x24>
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	b003      	add	sp, #12
 800b4ae:	bd30      	pop	{r4, r5, pc}
 800b4b0:	220c      	movs	r2, #12
 800b4b2:	6002      	str	r2, [r0, #0]
 800b4b4:	2500      	movs	r5, #0
 800b4b6:	e7f8      	b.n	800b4aa <_calloc_r+0x16>
 800b4b8:	4621      	mov	r1, r4
 800b4ba:	f7fd fa2e 	bl	800891a <memset>
 800b4be:	e7f4      	b.n	800b4aa <_calloc_r+0x16>

0800b4c0 <rshift>:
 800b4c0:	6903      	ldr	r3, [r0, #16]
 800b4c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b4c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b4ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b4ce:	f100 0414 	add.w	r4, r0, #20
 800b4d2:	dd45      	ble.n	800b560 <rshift+0xa0>
 800b4d4:	f011 011f 	ands.w	r1, r1, #31
 800b4d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b4dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b4e0:	d10c      	bne.n	800b4fc <rshift+0x3c>
 800b4e2:	f100 0710 	add.w	r7, r0, #16
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	42b1      	cmp	r1, r6
 800b4ea:	d334      	bcc.n	800b556 <rshift+0x96>
 800b4ec:	1a9b      	subs	r3, r3, r2
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	1eea      	subs	r2, r5, #3
 800b4f2:	4296      	cmp	r6, r2
 800b4f4:	bf38      	it	cc
 800b4f6:	2300      	movcc	r3, #0
 800b4f8:	4423      	add	r3, r4
 800b4fa:	e015      	b.n	800b528 <rshift+0x68>
 800b4fc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b500:	f1c1 0820 	rsb	r8, r1, #32
 800b504:	40cf      	lsrs	r7, r1
 800b506:	f105 0e04 	add.w	lr, r5, #4
 800b50a:	46a1      	mov	r9, r4
 800b50c:	4576      	cmp	r6, lr
 800b50e:	46f4      	mov	ip, lr
 800b510:	d815      	bhi.n	800b53e <rshift+0x7e>
 800b512:	1a9a      	subs	r2, r3, r2
 800b514:	0092      	lsls	r2, r2, #2
 800b516:	3a04      	subs	r2, #4
 800b518:	3501      	adds	r5, #1
 800b51a:	42ae      	cmp	r6, r5
 800b51c:	bf38      	it	cc
 800b51e:	2200      	movcc	r2, #0
 800b520:	18a3      	adds	r3, r4, r2
 800b522:	50a7      	str	r7, [r4, r2]
 800b524:	b107      	cbz	r7, 800b528 <rshift+0x68>
 800b526:	3304      	adds	r3, #4
 800b528:	1b1a      	subs	r2, r3, r4
 800b52a:	42a3      	cmp	r3, r4
 800b52c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b530:	bf08      	it	eq
 800b532:	2300      	moveq	r3, #0
 800b534:	6102      	str	r2, [r0, #16]
 800b536:	bf08      	it	eq
 800b538:	6143      	streq	r3, [r0, #20]
 800b53a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b53e:	f8dc c000 	ldr.w	ip, [ip]
 800b542:	fa0c fc08 	lsl.w	ip, ip, r8
 800b546:	ea4c 0707 	orr.w	r7, ip, r7
 800b54a:	f849 7b04 	str.w	r7, [r9], #4
 800b54e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b552:	40cf      	lsrs	r7, r1
 800b554:	e7da      	b.n	800b50c <rshift+0x4c>
 800b556:	f851 cb04 	ldr.w	ip, [r1], #4
 800b55a:	f847 cf04 	str.w	ip, [r7, #4]!
 800b55e:	e7c3      	b.n	800b4e8 <rshift+0x28>
 800b560:	4623      	mov	r3, r4
 800b562:	e7e1      	b.n	800b528 <rshift+0x68>

0800b564 <__hexdig_fun>:
 800b564:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b568:	2b09      	cmp	r3, #9
 800b56a:	d802      	bhi.n	800b572 <__hexdig_fun+0xe>
 800b56c:	3820      	subs	r0, #32
 800b56e:	b2c0      	uxtb	r0, r0
 800b570:	4770      	bx	lr
 800b572:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b576:	2b05      	cmp	r3, #5
 800b578:	d801      	bhi.n	800b57e <__hexdig_fun+0x1a>
 800b57a:	3847      	subs	r0, #71	; 0x47
 800b57c:	e7f7      	b.n	800b56e <__hexdig_fun+0xa>
 800b57e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b582:	2b05      	cmp	r3, #5
 800b584:	d801      	bhi.n	800b58a <__hexdig_fun+0x26>
 800b586:	3827      	subs	r0, #39	; 0x27
 800b588:	e7f1      	b.n	800b56e <__hexdig_fun+0xa>
 800b58a:	2000      	movs	r0, #0
 800b58c:	4770      	bx	lr
	...

0800b590 <__gethex>:
 800b590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b594:	4617      	mov	r7, r2
 800b596:	680a      	ldr	r2, [r1, #0]
 800b598:	b085      	sub	sp, #20
 800b59a:	f102 0b02 	add.w	fp, r2, #2
 800b59e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b5a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b5a6:	4681      	mov	r9, r0
 800b5a8:	468a      	mov	sl, r1
 800b5aa:	9302      	str	r3, [sp, #8]
 800b5ac:	32fe      	adds	r2, #254	; 0xfe
 800b5ae:	eb02 030b 	add.w	r3, r2, fp
 800b5b2:	46d8      	mov	r8, fp
 800b5b4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b5b8:	9301      	str	r3, [sp, #4]
 800b5ba:	2830      	cmp	r0, #48	; 0x30
 800b5bc:	d0f7      	beq.n	800b5ae <__gethex+0x1e>
 800b5be:	f7ff ffd1 	bl	800b564 <__hexdig_fun>
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	2800      	cmp	r0, #0
 800b5c6:	d138      	bne.n	800b63a <__gethex+0xaa>
 800b5c8:	49a7      	ldr	r1, [pc, #668]	; (800b868 <__gethex+0x2d8>)
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	4640      	mov	r0, r8
 800b5ce:	f7ff ff19 	bl	800b404 <strncmp>
 800b5d2:	4606      	mov	r6, r0
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	d169      	bne.n	800b6ac <__gethex+0x11c>
 800b5d8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b5dc:	465d      	mov	r5, fp
 800b5de:	f7ff ffc1 	bl	800b564 <__hexdig_fun>
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	d064      	beq.n	800b6b0 <__gethex+0x120>
 800b5e6:	465a      	mov	r2, fp
 800b5e8:	7810      	ldrb	r0, [r2, #0]
 800b5ea:	2830      	cmp	r0, #48	; 0x30
 800b5ec:	4690      	mov	r8, r2
 800b5ee:	f102 0201 	add.w	r2, r2, #1
 800b5f2:	d0f9      	beq.n	800b5e8 <__gethex+0x58>
 800b5f4:	f7ff ffb6 	bl	800b564 <__hexdig_fun>
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	fab0 f480 	clz	r4, r0
 800b5fe:	0964      	lsrs	r4, r4, #5
 800b600:	465e      	mov	r6, fp
 800b602:	9301      	str	r3, [sp, #4]
 800b604:	4642      	mov	r2, r8
 800b606:	4615      	mov	r5, r2
 800b608:	3201      	adds	r2, #1
 800b60a:	7828      	ldrb	r0, [r5, #0]
 800b60c:	f7ff ffaa 	bl	800b564 <__hexdig_fun>
 800b610:	2800      	cmp	r0, #0
 800b612:	d1f8      	bne.n	800b606 <__gethex+0x76>
 800b614:	4994      	ldr	r1, [pc, #592]	; (800b868 <__gethex+0x2d8>)
 800b616:	2201      	movs	r2, #1
 800b618:	4628      	mov	r0, r5
 800b61a:	f7ff fef3 	bl	800b404 <strncmp>
 800b61e:	b978      	cbnz	r0, 800b640 <__gethex+0xb0>
 800b620:	b946      	cbnz	r6, 800b634 <__gethex+0xa4>
 800b622:	1c6e      	adds	r6, r5, #1
 800b624:	4632      	mov	r2, r6
 800b626:	4615      	mov	r5, r2
 800b628:	3201      	adds	r2, #1
 800b62a:	7828      	ldrb	r0, [r5, #0]
 800b62c:	f7ff ff9a 	bl	800b564 <__hexdig_fun>
 800b630:	2800      	cmp	r0, #0
 800b632:	d1f8      	bne.n	800b626 <__gethex+0x96>
 800b634:	1b73      	subs	r3, r6, r5
 800b636:	009e      	lsls	r6, r3, #2
 800b638:	e004      	b.n	800b644 <__gethex+0xb4>
 800b63a:	2400      	movs	r4, #0
 800b63c:	4626      	mov	r6, r4
 800b63e:	e7e1      	b.n	800b604 <__gethex+0x74>
 800b640:	2e00      	cmp	r6, #0
 800b642:	d1f7      	bne.n	800b634 <__gethex+0xa4>
 800b644:	782b      	ldrb	r3, [r5, #0]
 800b646:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b64a:	2b50      	cmp	r3, #80	; 0x50
 800b64c:	d13d      	bne.n	800b6ca <__gethex+0x13a>
 800b64e:	786b      	ldrb	r3, [r5, #1]
 800b650:	2b2b      	cmp	r3, #43	; 0x2b
 800b652:	d02f      	beq.n	800b6b4 <__gethex+0x124>
 800b654:	2b2d      	cmp	r3, #45	; 0x2d
 800b656:	d031      	beq.n	800b6bc <__gethex+0x12c>
 800b658:	1c69      	adds	r1, r5, #1
 800b65a:	f04f 0b00 	mov.w	fp, #0
 800b65e:	7808      	ldrb	r0, [r1, #0]
 800b660:	f7ff ff80 	bl	800b564 <__hexdig_fun>
 800b664:	1e42      	subs	r2, r0, #1
 800b666:	b2d2      	uxtb	r2, r2
 800b668:	2a18      	cmp	r2, #24
 800b66a:	d82e      	bhi.n	800b6ca <__gethex+0x13a>
 800b66c:	f1a0 0210 	sub.w	r2, r0, #16
 800b670:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b674:	f7ff ff76 	bl	800b564 <__hexdig_fun>
 800b678:	f100 3cff 	add.w	ip, r0, #4294967295
 800b67c:	fa5f fc8c 	uxtb.w	ip, ip
 800b680:	f1bc 0f18 	cmp.w	ip, #24
 800b684:	d91d      	bls.n	800b6c2 <__gethex+0x132>
 800b686:	f1bb 0f00 	cmp.w	fp, #0
 800b68a:	d000      	beq.n	800b68e <__gethex+0xfe>
 800b68c:	4252      	negs	r2, r2
 800b68e:	4416      	add	r6, r2
 800b690:	f8ca 1000 	str.w	r1, [sl]
 800b694:	b1dc      	cbz	r4, 800b6ce <__gethex+0x13e>
 800b696:	9b01      	ldr	r3, [sp, #4]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	bf14      	ite	ne
 800b69c:	f04f 0800 	movne.w	r8, #0
 800b6a0:	f04f 0806 	moveq.w	r8, #6
 800b6a4:	4640      	mov	r0, r8
 800b6a6:	b005      	add	sp, #20
 800b6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ac:	4645      	mov	r5, r8
 800b6ae:	4626      	mov	r6, r4
 800b6b0:	2401      	movs	r4, #1
 800b6b2:	e7c7      	b.n	800b644 <__gethex+0xb4>
 800b6b4:	f04f 0b00 	mov.w	fp, #0
 800b6b8:	1ca9      	adds	r1, r5, #2
 800b6ba:	e7d0      	b.n	800b65e <__gethex+0xce>
 800b6bc:	f04f 0b01 	mov.w	fp, #1
 800b6c0:	e7fa      	b.n	800b6b8 <__gethex+0x128>
 800b6c2:	230a      	movs	r3, #10
 800b6c4:	fb03 0002 	mla	r0, r3, r2, r0
 800b6c8:	e7d0      	b.n	800b66c <__gethex+0xdc>
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	e7e0      	b.n	800b690 <__gethex+0x100>
 800b6ce:	eba5 0308 	sub.w	r3, r5, r8
 800b6d2:	3b01      	subs	r3, #1
 800b6d4:	4621      	mov	r1, r4
 800b6d6:	2b07      	cmp	r3, #7
 800b6d8:	dc0a      	bgt.n	800b6f0 <__gethex+0x160>
 800b6da:	4648      	mov	r0, r9
 800b6dc:	f7fe f92e 	bl	800993c <_Balloc>
 800b6e0:	4604      	mov	r4, r0
 800b6e2:	b940      	cbnz	r0, 800b6f6 <__gethex+0x166>
 800b6e4:	4b61      	ldr	r3, [pc, #388]	; (800b86c <__gethex+0x2dc>)
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	21e4      	movs	r1, #228	; 0xe4
 800b6ea:	4861      	ldr	r0, [pc, #388]	; (800b870 <__gethex+0x2e0>)
 800b6ec:	f7ff feb4 	bl	800b458 <__assert_func>
 800b6f0:	3101      	adds	r1, #1
 800b6f2:	105b      	asrs	r3, r3, #1
 800b6f4:	e7ef      	b.n	800b6d6 <__gethex+0x146>
 800b6f6:	f100 0a14 	add.w	sl, r0, #20
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	495a      	ldr	r1, [pc, #360]	; (800b868 <__gethex+0x2d8>)
 800b6fe:	f8cd a004 	str.w	sl, [sp, #4]
 800b702:	469b      	mov	fp, r3
 800b704:	45a8      	cmp	r8, r5
 800b706:	d342      	bcc.n	800b78e <__gethex+0x1fe>
 800b708:	9801      	ldr	r0, [sp, #4]
 800b70a:	f840 bb04 	str.w	fp, [r0], #4
 800b70e:	eba0 000a 	sub.w	r0, r0, sl
 800b712:	1080      	asrs	r0, r0, #2
 800b714:	6120      	str	r0, [r4, #16]
 800b716:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b71a:	4658      	mov	r0, fp
 800b71c:	f7fe fa00 	bl	8009b20 <__hi0bits>
 800b720:	683d      	ldr	r5, [r7, #0]
 800b722:	eba8 0000 	sub.w	r0, r8, r0
 800b726:	42a8      	cmp	r0, r5
 800b728:	dd59      	ble.n	800b7de <__gethex+0x24e>
 800b72a:	eba0 0805 	sub.w	r8, r0, r5
 800b72e:	4641      	mov	r1, r8
 800b730:	4620      	mov	r0, r4
 800b732:	f7fe fd8f 	bl	800a254 <__any_on>
 800b736:	4683      	mov	fp, r0
 800b738:	b1b8      	cbz	r0, 800b76a <__gethex+0x1da>
 800b73a:	f108 33ff 	add.w	r3, r8, #4294967295
 800b73e:	1159      	asrs	r1, r3, #5
 800b740:	f003 021f 	and.w	r2, r3, #31
 800b744:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b748:	f04f 0b01 	mov.w	fp, #1
 800b74c:	fa0b f202 	lsl.w	r2, fp, r2
 800b750:	420a      	tst	r2, r1
 800b752:	d00a      	beq.n	800b76a <__gethex+0x1da>
 800b754:	455b      	cmp	r3, fp
 800b756:	dd06      	ble.n	800b766 <__gethex+0x1d6>
 800b758:	f1a8 0102 	sub.w	r1, r8, #2
 800b75c:	4620      	mov	r0, r4
 800b75e:	f7fe fd79 	bl	800a254 <__any_on>
 800b762:	2800      	cmp	r0, #0
 800b764:	d138      	bne.n	800b7d8 <__gethex+0x248>
 800b766:	f04f 0b02 	mov.w	fp, #2
 800b76a:	4641      	mov	r1, r8
 800b76c:	4620      	mov	r0, r4
 800b76e:	f7ff fea7 	bl	800b4c0 <rshift>
 800b772:	4446      	add	r6, r8
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	42b3      	cmp	r3, r6
 800b778:	da41      	bge.n	800b7fe <__gethex+0x26e>
 800b77a:	4621      	mov	r1, r4
 800b77c:	4648      	mov	r0, r9
 800b77e:	f7fe f91d 	bl	80099bc <_Bfree>
 800b782:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b784:	2300      	movs	r3, #0
 800b786:	6013      	str	r3, [r2, #0]
 800b788:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b78c:	e78a      	b.n	800b6a4 <__gethex+0x114>
 800b78e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b792:	2a2e      	cmp	r2, #46	; 0x2e
 800b794:	d014      	beq.n	800b7c0 <__gethex+0x230>
 800b796:	2b20      	cmp	r3, #32
 800b798:	d106      	bne.n	800b7a8 <__gethex+0x218>
 800b79a:	9b01      	ldr	r3, [sp, #4]
 800b79c:	f843 bb04 	str.w	fp, [r3], #4
 800b7a0:	f04f 0b00 	mov.w	fp, #0
 800b7a4:	9301      	str	r3, [sp, #4]
 800b7a6:	465b      	mov	r3, fp
 800b7a8:	7828      	ldrb	r0, [r5, #0]
 800b7aa:	9303      	str	r3, [sp, #12]
 800b7ac:	f7ff feda 	bl	800b564 <__hexdig_fun>
 800b7b0:	9b03      	ldr	r3, [sp, #12]
 800b7b2:	f000 000f 	and.w	r0, r0, #15
 800b7b6:	4098      	lsls	r0, r3
 800b7b8:	ea4b 0b00 	orr.w	fp, fp, r0
 800b7bc:	3304      	adds	r3, #4
 800b7be:	e7a1      	b.n	800b704 <__gethex+0x174>
 800b7c0:	45a8      	cmp	r8, r5
 800b7c2:	d8e8      	bhi.n	800b796 <__gethex+0x206>
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	9303      	str	r3, [sp, #12]
 800b7ca:	f7ff fe1b 	bl	800b404 <strncmp>
 800b7ce:	4926      	ldr	r1, [pc, #152]	; (800b868 <__gethex+0x2d8>)
 800b7d0:	9b03      	ldr	r3, [sp, #12]
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	d1df      	bne.n	800b796 <__gethex+0x206>
 800b7d6:	e795      	b.n	800b704 <__gethex+0x174>
 800b7d8:	f04f 0b03 	mov.w	fp, #3
 800b7dc:	e7c5      	b.n	800b76a <__gethex+0x1da>
 800b7de:	da0b      	bge.n	800b7f8 <__gethex+0x268>
 800b7e0:	eba5 0800 	sub.w	r8, r5, r0
 800b7e4:	4621      	mov	r1, r4
 800b7e6:	4642      	mov	r2, r8
 800b7e8:	4648      	mov	r0, r9
 800b7ea:	f7fe fb01 	bl	8009df0 <__lshift>
 800b7ee:	eba6 0608 	sub.w	r6, r6, r8
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	f100 0a14 	add.w	sl, r0, #20
 800b7f8:	f04f 0b00 	mov.w	fp, #0
 800b7fc:	e7ba      	b.n	800b774 <__gethex+0x1e4>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	42b3      	cmp	r3, r6
 800b802:	dd73      	ble.n	800b8ec <__gethex+0x35c>
 800b804:	1b9e      	subs	r6, r3, r6
 800b806:	42b5      	cmp	r5, r6
 800b808:	dc34      	bgt.n	800b874 <__gethex+0x2e4>
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2b02      	cmp	r3, #2
 800b80e:	d023      	beq.n	800b858 <__gethex+0x2c8>
 800b810:	2b03      	cmp	r3, #3
 800b812:	d025      	beq.n	800b860 <__gethex+0x2d0>
 800b814:	2b01      	cmp	r3, #1
 800b816:	d115      	bne.n	800b844 <__gethex+0x2b4>
 800b818:	42b5      	cmp	r5, r6
 800b81a:	d113      	bne.n	800b844 <__gethex+0x2b4>
 800b81c:	2d01      	cmp	r5, #1
 800b81e:	d10b      	bne.n	800b838 <__gethex+0x2a8>
 800b820:	9a02      	ldr	r2, [sp, #8]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6013      	str	r3, [r2, #0]
 800b826:	2301      	movs	r3, #1
 800b828:	6123      	str	r3, [r4, #16]
 800b82a:	f8ca 3000 	str.w	r3, [sl]
 800b82e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b830:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b834:	601c      	str	r4, [r3, #0]
 800b836:	e735      	b.n	800b6a4 <__gethex+0x114>
 800b838:	1e69      	subs	r1, r5, #1
 800b83a:	4620      	mov	r0, r4
 800b83c:	f7fe fd0a 	bl	800a254 <__any_on>
 800b840:	2800      	cmp	r0, #0
 800b842:	d1ed      	bne.n	800b820 <__gethex+0x290>
 800b844:	4621      	mov	r1, r4
 800b846:	4648      	mov	r0, r9
 800b848:	f7fe f8b8 	bl	80099bc <_Bfree>
 800b84c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b84e:	2300      	movs	r3, #0
 800b850:	6013      	str	r3, [r2, #0]
 800b852:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b856:	e725      	b.n	800b6a4 <__gethex+0x114>
 800b858:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d1f2      	bne.n	800b844 <__gethex+0x2b4>
 800b85e:	e7df      	b.n	800b820 <__gethex+0x290>
 800b860:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b862:	2b00      	cmp	r3, #0
 800b864:	d1dc      	bne.n	800b820 <__gethex+0x290>
 800b866:	e7ed      	b.n	800b844 <__gethex+0x2b4>
 800b868:	0800e55c 	.word	0x0800e55c
 800b86c:	0800e3f6 	.word	0x0800e3f6
 800b870:	0800e706 	.word	0x0800e706
 800b874:	f106 38ff 	add.w	r8, r6, #4294967295
 800b878:	f1bb 0f00 	cmp.w	fp, #0
 800b87c:	d133      	bne.n	800b8e6 <__gethex+0x356>
 800b87e:	f1b8 0f00 	cmp.w	r8, #0
 800b882:	d004      	beq.n	800b88e <__gethex+0x2fe>
 800b884:	4641      	mov	r1, r8
 800b886:	4620      	mov	r0, r4
 800b888:	f7fe fce4 	bl	800a254 <__any_on>
 800b88c:	4683      	mov	fp, r0
 800b88e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b892:	2301      	movs	r3, #1
 800b894:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b898:	f008 081f 	and.w	r8, r8, #31
 800b89c:	fa03 f308 	lsl.w	r3, r3, r8
 800b8a0:	4213      	tst	r3, r2
 800b8a2:	4631      	mov	r1, r6
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	bf18      	it	ne
 800b8a8:	f04b 0b02 	orrne.w	fp, fp, #2
 800b8ac:	1bad      	subs	r5, r5, r6
 800b8ae:	f7ff fe07 	bl	800b4c0 <rshift>
 800b8b2:	687e      	ldr	r6, [r7, #4]
 800b8b4:	f04f 0802 	mov.w	r8, #2
 800b8b8:	f1bb 0f00 	cmp.w	fp, #0
 800b8bc:	d04a      	beq.n	800b954 <__gethex+0x3c4>
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2b02      	cmp	r3, #2
 800b8c2:	d016      	beq.n	800b8f2 <__gethex+0x362>
 800b8c4:	2b03      	cmp	r3, #3
 800b8c6:	d018      	beq.n	800b8fa <__gethex+0x36a>
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d109      	bne.n	800b8e0 <__gethex+0x350>
 800b8cc:	f01b 0f02 	tst.w	fp, #2
 800b8d0:	d006      	beq.n	800b8e0 <__gethex+0x350>
 800b8d2:	f8da 3000 	ldr.w	r3, [sl]
 800b8d6:	ea4b 0b03 	orr.w	fp, fp, r3
 800b8da:	f01b 0f01 	tst.w	fp, #1
 800b8de:	d10f      	bne.n	800b900 <__gethex+0x370>
 800b8e0:	f048 0810 	orr.w	r8, r8, #16
 800b8e4:	e036      	b.n	800b954 <__gethex+0x3c4>
 800b8e6:	f04f 0b01 	mov.w	fp, #1
 800b8ea:	e7d0      	b.n	800b88e <__gethex+0x2fe>
 800b8ec:	f04f 0801 	mov.w	r8, #1
 800b8f0:	e7e2      	b.n	800b8b8 <__gethex+0x328>
 800b8f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8f4:	f1c3 0301 	rsb	r3, r3, #1
 800b8f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d0ef      	beq.n	800b8e0 <__gethex+0x350>
 800b900:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b904:	f104 0214 	add.w	r2, r4, #20
 800b908:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b90c:	9301      	str	r3, [sp, #4]
 800b90e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b912:	2300      	movs	r3, #0
 800b914:	4694      	mov	ip, r2
 800b916:	f852 1b04 	ldr.w	r1, [r2], #4
 800b91a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b91e:	d01e      	beq.n	800b95e <__gethex+0x3ce>
 800b920:	3101      	adds	r1, #1
 800b922:	f8cc 1000 	str.w	r1, [ip]
 800b926:	f1b8 0f02 	cmp.w	r8, #2
 800b92a:	f104 0214 	add.w	r2, r4, #20
 800b92e:	d13d      	bne.n	800b9ac <__gethex+0x41c>
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	3b01      	subs	r3, #1
 800b934:	42ab      	cmp	r3, r5
 800b936:	d10b      	bne.n	800b950 <__gethex+0x3c0>
 800b938:	1169      	asrs	r1, r5, #5
 800b93a:	2301      	movs	r3, #1
 800b93c:	f005 051f 	and.w	r5, r5, #31
 800b940:	fa03 f505 	lsl.w	r5, r3, r5
 800b944:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b948:	421d      	tst	r5, r3
 800b94a:	bf18      	it	ne
 800b94c:	f04f 0801 	movne.w	r8, #1
 800b950:	f048 0820 	orr.w	r8, r8, #32
 800b954:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b956:	601c      	str	r4, [r3, #0]
 800b958:	9b02      	ldr	r3, [sp, #8]
 800b95a:	601e      	str	r6, [r3, #0]
 800b95c:	e6a2      	b.n	800b6a4 <__gethex+0x114>
 800b95e:	4290      	cmp	r0, r2
 800b960:	f842 3c04 	str.w	r3, [r2, #-4]
 800b964:	d8d6      	bhi.n	800b914 <__gethex+0x384>
 800b966:	68a2      	ldr	r2, [r4, #8]
 800b968:	4593      	cmp	fp, r2
 800b96a:	db17      	blt.n	800b99c <__gethex+0x40c>
 800b96c:	6861      	ldr	r1, [r4, #4]
 800b96e:	4648      	mov	r0, r9
 800b970:	3101      	adds	r1, #1
 800b972:	f7fd ffe3 	bl	800993c <_Balloc>
 800b976:	4682      	mov	sl, r0
 800b978:	b918      	cbnz	r0, 800b982 <__gethex+0x3f2>
 800b97a:	4b1b      	ldr	r3, [pc, #108]	; (800b9e8 <__gethex+0x458>)
 800b97c:	4602      	mov	r2, r0
 800b97e:	2184      	movs	r1, #132	; 0x84
 800b980:	e6b3      	b.n	800b6ea <__gethex+0x15a>
 800b982:	6922      	ldr	r2, [r4, #16]
 800b984:	3202      	adds	r2, #2
 800b986:	f104 010c 	add.w	r1, r4, #12
 800b98a:	0092      	lsls	r2, r2, #2
 800b98c:	300c      	adds	r0, #12
 800b98e:	f7fd f844 	bl	8008a1a <memcpy>
 800b992:	4621      	mov	r1, r4
 800b994:	4648      	mov	r0, r9
 800b996:	f7fe f811 	bl	80099bc <_Bfree>
 800b99a:	4654      	mov	r4, sl
 800b99c:	6922      	ldr	r2, [r4, #16]
 800b99e:	1c51      	adds	r1, r2, #1
 800b9a0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b9a4:	6121      	str	r1, [r4, #16]
 800b9a6:	2101      	movs	r1, #1
 800b9a8:	6151      	str	r1, [r2, #20]
 800b9aa:	e7bc      	b.n	800b926 <__gethex+0x396>
 800b9ac:	6921      	ldr	r1, [r4, #16]
 800b9ae:	4559      	cmp	r1, fp
 800b9b0:	dd0b      	ble.n	800b9ca <__gethex+0x43a>
 800b9b2:	2101      	movs	r1, #1
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f7ff fd83 	bl	800b4c0 <rshift>
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	3601      	adds	r6, #1
 800b9be:	42b3      	cmp	r3, r6
 800b9c0:	f6ff aedb 	blt.w	800b77a <__gethex+0x1ea>
 800b9c4:	f04f 0801 	mov.w	r8, #1
 800b9c8:	e7c2      	b.n	800b950 <__gethex+0x3c0>
 800b9ca:	f015 051f 	ands.w	r5, r5, #31
 800b9ce:	d0f9      	beq.n	800b9c4 <__gethex+0x434>
 800b9d0:	9b01      	ldr	r3, [sp, #4]
 800b9d2:	441a      	add	r2, r3
 800b9d4:	f1c5 0520 	rsb	r5, r5, #32
 800b9d8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800b9dc:	f7fe f8a0 	bl	8009b20 <__hi0bits>
 800b9e0:	42a8      	cmp	r0, r5
 800b9e2:	dbe6      	blt.n	800b9b2 <__gethex+0x422>
 800b9e4:	e7ee      	b.n	800b9c4 <__gethex+0x434>
 800b9e6:	bf00      	nop
 800b9e8:	0800e3f6 	.word	0x0800e3f6

0800b9ec <L_shift>:
 800b9ec:	f1c2 0208 	rsb	r2, r2, #8
 800b9f0:	0092      	lsls	r2, r2, #2
 800b9f2:	b570      	push	{r4, r5, r6, lr}
 800b9f4:	f1c2 0620 	rsb	r6, r2, #32
 800b9f8:	6843      	ldr	r3, [r0, #4]
 800b9fa:	6804      	ldr	r4, [r0, #0]
 800b9fc:	fa03 f506 	lsl.w	r5, r3, r6
 800ba00:	432c      	orrs	r4, r5
 800ba02:	40d3      	lsrs	r3, r2
 800ba04:	6004      	str	r4, [r0, #0]
 800ba06:	f840 3f04 	str.w	r3, [r0, #4]!
 800ba0a:	4288      	cmp	r0, r1
 800ba0c:	d3f4      	bcc.n	800b9f8 <L_shift+0xc>
 800ba0e:	bd70      	pop	{r4, r5, r6, pc}

0800ba10 <__match>:
 800ba10:	b530      	push	{r4, r5, lr}
 800ba12:	6803      	ldr	r3, [r0, #0]
 800ba14:	3301      	adds	r3, #1
 800ba16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba1a:	b914      	cbnz	r4, 800ba22 <__match+0x12>
 800ba1c:	6003      	str	r3, [r0, #0]
 800ba1e:	2001      	movs	r0, #1
 800ba20:	bd30      	pop	{r4, r5, pc}
 800ba22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ba2a:	2d19      	cmp	r5, #25
 800ba2c:	bf98      	it	ls
 800ba2e:	3220      	addls	r2, #32
 800ba30:	42a2      	cmp	r2, r4
 800ba32:	d0f0      	beq.n	800ba16 <__match+0x6>
 800ba34:	2000      	movs	r0, #0
 800ba36:	e7f3      	b.n	800ba20 <__match+0x10>

0800ba38 <__hexnan>:
 800ba38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba3c:	680b      	ldr	r3, [r1, #0]
 800ba3e:	6801      	ldr	r1, [r0, #0]
 800ba40:	115e      	asrs	r6, r3, #5
 800ba42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ba46:	f013 031f 	ands.w	r3, r3, #31
 800ba4a:	b087      	sub	sp, #28
 800ba4c:	bf18      	it	ne
 800ba4e:	3604      	addne	r6, #4
 800ba50:	2500      	movs	r5, #0
 800ba52:	1f37      	subs	r7, r6, #4
 800ba54:	4682      	mov	sl, r0
 800ba56:	4690      	mov	r8, r2
 800ba58:	9301      	str	r3, [sp, #4]
 800ba5a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ba5e:	46b9      	mov	r9, r7
 800ba60:	463c      	mov	r4, r7
 800ba62:	9502      	str	r5, [sp, #8]
 800ba64:	46ab      	mov	fp, r5
 800ba66:	784a      	ldrb	r2, [r1, #1]
 800ba68:	1c4b      	adds	r3, r1, #1
 800ba6a:	9303      	str	r3, [sp, #12]
 800ba6c:	b342      	cbz	r2, 800bac0 <__hexnan+0x88>
 800ba6e:	4610      	mov	r0, r2
 800ba70:	9105      	str	r1, [sp, #20]
 800ba72:	9204      	str	r2, [sp, #16]
 800ba74:	f7ff fd76 	bl	800b564 <__hexdig_fun>
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	d14f      	bne.n	800bb1c <__hexnan+0xe4>
 800ba7c:	9a04      	ldr	r2, [sp, #16]
 800ba7e:	9905      	ldr	r1, [sp, #20]
 800ba80:	2a20      	cmp	r2, #32
 800ba82:	d818      	bhi.n	800bab6 <__hexnan+0x7e>
 800ba84:	9b02      	ldr	r3, [sp, #8]
 800ba86:	459b      	cmp	fp, r3
 800ba88:	dd13      	ble.n	800bab2 <__hexnan+0x7a>
 800ba8a:	454c      	cmp	r4, r9
 800ba8c:	d206      	bcs.n	800ba9c <__hexnan+0x64>
 800ba8e:	2d07      	cmp	r5, #7
 800ba90:	dc04      	bgt.n	800ba9c <__hexnan+0x64>
 800ba92:	462a      	mov	r2, r5
 800ba94:	4649      	mov	r1, r9
 800ba96:	4620      	mov	r0, r4
 800ba98:	f7ff ffa8 	bl	800b9ec <L_shift>
 800ba9c:	4544      	cmp	r4, r8
 800ba9e:	d950      	bls.n	800bb42 <__hexnan+0x10a>
 800baa0:	2300      	movs	r3, #0
 800baa2:	f1a4 0904 	sub.w	r9, r4, #4
 800baa6:	f844 3c04 	str.w	r3, [r4, #-4]
 800baaa:	f8cd b008 	str.w	fp, [sp, #8]
 800baae:	464c      	mov	r4, r9
 800bab0:	461d      	mov	r5, r3
 800bab2:	9903      	ldr	r1, [sp, #12]
 800bab4:	e7d7      	b.n	800ba66 <__hexnan+0x2e>
 800bab6:	2a29      	cmp	r2, #41	; 0x29
 800bab8:	d155      	bne.n	800bb66 <__hexnan+0x12e>
 800baba:	3102      	adds	r1, #2
 800babc:	f8ca 1000 	str.w	r1, [sl]
 800bac0:	f1bb 0f00 	cmp.w	fp, #0
 800bac4:	d04f      	beq.n	800bb66 <__hexnan+0x12e>
 800bac6:	454c      	cmp	r4, r9
 800bac8:	d206      	bcs.n	800bad8 <__hexnan+0xa0>
 800baca:	2d07      	cmp	r5, #7
 800bacc:	dc04      	bgt.n	800bad8 <__hexnan+0xa0>
 800bace:	462a      	mov	r2, r5
 800bad0:	4649      	mov	r1, r9
 800bad2:	4620      	mov	r0, r4
 800bad4:	f7ff ff8a 	bl	800b9ec <L_shift>
 800bad8:	4544      	cmp	r4, r8
 800bada:	d934      	bls.n	800bb46 <__hexnan+0x10e>
 800badc:	f1a8 0204 	sub.w	r2, r8, #4
 800bae0:	4623      	mov	r3, r4
 800bae2:	f853 1b04 	ldr.w	r1, [r3], #4
 800bae6:	f842 1f04 	str.w	r1, [r2, #4]!
 800baea:	429f      	cmp	r7, r3
 800baec:	d2f9      	bcs.n	800bae2 <__hexnan+0xaa>
 800baee:	1b3b      	subs	r3, r7, r4
 800baf0:	f023 0303 	bic.w	r3, r3, #3
 800baf4:	3304      	adds	r3, #4
 800baf6:	3e03      	subs	r6, #3
 800baf8:	3401      	adds	r4, #1
 800bafa:	42a6      	cmp	r6, r4
 800bafc:	bf38      	it	cc
 800bafe:	2304      	movcc	r3, #4
 800bb00:	4443      	add	r3, r8
 800bb02:	2200      	movs	r2, #0
 800bb04:	f843 2b04 	str.w	r2, [r3], #4
 800bb08:	429f      	cmp	r7, r3
 800bb0a:	d2fb      	bcs.n	800bb04 <__hexnan+0xcc>
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	b91b      	cbnz	r3, 800bb18 <__hexnan+0xe0>
 800bb10:	4547      	cmp	r7, r8
 800bb12:	d126      	bne.n	800bb62 <__hexnan+0x12a>
 800bb14:	2301      	movs	r3, #1
 800bb16:	603b      	str	r3, [r7, #0]
 800bb18:	2005      	movs	r0, #5
 800bb1a:	e025      	b.n	800bb68 <__hexnan+0x130>
 800bb1c:	3501      	adds	r5, #1
 800bb1e:	2d08      	cmp	r5, #8
 800bb20:	f10b 0b01 	add.w	fp, fp, #1
 800bb24:	dd06      	ble.n	800bb34 <__hexnan+0xfc>
 800bb26:	4544      	cmp	r4, r8
 800bb28:	d9c3      	bls.n	800bab2 <__hexnan+0x7a>
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb30:	2501      	movs	r5, #1
 800bb32:	3c04      	subs	r4, #4
 800bb34:	6822      	ldr	r2, [r4, #0]
 800bb36:	f000 000f 	and.w	r0, r0, #15
 800bb3a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bb3e:	6020      	str	r0, [r4, #0]
 800bb40:	e7b7      	b.n	800bab2 <__hexnan+0x7a>
 800bb42:	2508      	movs	r5, #8
 800bb44:	e7b5      	b.n	800bab2 <__hexnan+0x7a>
 800bb46:	9b01      	ldr	r3, [sp, #4]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d0df      	beq.n	800bb0c <__hexnan+0xd4>
 800bb4c:	f1c3 0320 	rsb	r3, r3, #32
 800bb50:	f04f 32ff 	mov.w	r2, #4294967295
 800bb54:	40da      	lsrs	r2, r3
 800bb56:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bb5a:	4013      	ands	r3, r2
 800bb5c:	f846 3c04 	str.w	r3, [r6, #-4]
 800bb60:	e7d4      	b.n	800bb0c <__hexnan+0xd4>
 800bb62:	3f04      	subs	r7, #4
 800bb64:	e7d2      	b.n	800bb0c <__hexnan+0xd4>
 800bb66:	2004      	movs	r0, #4
 800bb68:	b007      	add	sp, #28
 800bb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bb6e <__ascii_mbtowc>:
 800bb6e:	b082      	sub	sp, #8
 800bb70:	b901      	cbnz	r1, 800bb74 <__ascii_mbtowc+0x6>
 800bb72:	a901      	add	r1, sp, #4
 800bb74:	b142      	cbz	r2, 800bb88 <__ascii_mbtowc+0x1a>
 800bb76:	b14b      	cbz	r3, 800bb8c <__ascii_mbtowc+0x1e>
 800bb78:	7813      	ldrb	r3, [r2, #0]
 800bb7a:	600b      	str	r3, [r1, #0]
 800bb7c:	7812      	ldrb	r2, [r2, #0]
 800bb7e:	1e10      	subs	r0, r2, #0
 800bb80:	bf18      	it	ne
 800bb82:	2001      	movne	r0, #1
 800bb84:	b002      	add	sp, #8
 800bb86:	4770      	bx	lr
 800bb88:	4610      	mov	r0, r2
 800bb8a:	e7fb      	b.n	800bb84 <__ascii_mbtowc+0x16>
 800bb8c:	f06f 0001 	mvn.w	r0, #1
 800bb90:	e7f8      	b.n	800bb84 <__ascii_mbtowc+0x16>

0800bb92 <_realloc_r>:
 800bb92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb96:	4680      	mov	r8, r0
 800bb98:	4614      	mov	r4, r2
 800bb9a:	460e      	mov	r6, r1
 800bb9c:	b921      	cbnz	r1, 800bba8 <_realloc_r+0x16>
 800bb9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bba2:	4611      	mov	r1, r2
 800bba4:	f7fd be3e 	b.w	8009824 <_malloc_r>
 800bba8:	b92a      	cbnz	r2, 800bbb6 <_realloc_r+0x24>
 800bbaa:	f7fd fdc7 	bl	800973c <_free_r>
 800bbae:	4625      	mov	r5, r4
 800bbb0:	4628      	mov	r0, r5
 800bbb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbb6:	f000 f842 	bl	800bc3e <_malloc_usable_size_r>
 800bbba:	4284      	cmp	r4, r0
 800bbbc:	4607      	mov	r7, r0
 800bbbe:	d802      	bhi.n	800bbc6 <_realloc_r+0x34>
 800bbc0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbc4:	d812      	bhi.n	800bbec <_realloc_r+0x5a>
 800bbc6:	4621      	mov	r1, r4
 800bbc8:	4640      	mov	r0, r8
 800bbca:	f7fd fe2b 	bl	8009824 <_malloc_r>
 800bbce:	4605      	mov	r5, r0
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	d0ed      	beq.n	800bbb0 <_realloc_r+0x1e>
 800bbd4:	42bc      	cmp	r4, r7
 800bbd6:	4622      	mov	r2, r4
 800bbd8:	4631      	mov	r1, r6
 800bbda:	bf28      	it	cs
 800bbdc:	463a      	movcs	r2, r7
 800bbde:	f7fc ff1c 	bl	8008a1a <memcpy>
 800bbe2:	4631      	mov	r1, r6
 800bbe4:	4640      	mov	r0, r8
 800bbe6:	f7fd fda9 	bl	800973c <_free_r>
 800bbea:	e7e1      	b.n	800bbb0 <_realloc_r+0x1e>
 800bbec:	4635      	mov	r5, r6
 800bbee:	e7df      	b.n	800bbb0 <_realloc_r+0x1e>

0800bbf0 <__ascii_wctomb>:
 800bbf0:	b149      	cbz	r1, 800bc06 <__ascii_wctomb+0x16>
 800bbf2:	2aff      	cmp	r2, #255	; 0xff
 800bbf4:	bf85      	ittet	hi
 800bbf6:	238a      	movhi	r3, #138	; 0x8a
 800bbf8:	6003      	strhi	r3, [r0, #0]
 800bbfa:	700a      	strbls	r2, [r1, #0]
 800bbfc:	f04f 30ff 	movhi.w	r0, #4294967295
 800bc00:	bf98      	it	ls
 800bc02:	2001      	movls	r0, #1
 800bc04:	4770      	bx	lr
 800bc06:	4608      	mov	r0, r1
 800bc08:	4770      	bx	lr
	...

0800bc0c <fiprintf>:
 800bc0c:	b40e      	push	{r1, r2, r3}
 800bc0e:	b503      	push	{r0, r1, lr}
 800bc10:	4601      	mov	r1, r0
 800bc12:	ab03      	add	r3, sp, #12
 800bc14:	4805      	ldr	r0, [pc, #20]	; (800bc2c <fiprintf+0x20>)
 800bc16:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc1a:	6800      	ldr	r0, [r0, #0]
 800bc1c:	9301      	str	r3, [sp, #4]
 800bc1e:	f000 f83f 	bl	800bca0 <_vfiprintf_r>
 800bc22:	b002      	add	sp, #8
 800bc24:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc28:	b003      	add	sp, #12
 800bc2a:	4770      	bx	lr
 800bc2c:	20000078 	.word	0x20000078

0800bc30 <abort>:
 800bc30:	b508      	push	{r3, lr}
 800bc32:	2006      	movs	r0, #6
 800bc34:	f000 fa0c 	bl	800c050 <raise>
 800bc38:	2001      	movs	r0, #1
 800bc3a:	f7f6 f8fe 	bl	8001e3a <_exit>

0800bc3e <_malloc_usable_size_r>:
 800bc3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc42:	1f18      	subs	r0, r3, #4
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	bfbc      	itt	lt
 800bc48:	580b      	ldrlt	r3, [r1, r0]
 800bc4a:	18c0      	addlt	r0, r0, r3
 800bc4c:	4770      	bx	lr

0800bc4e <__sfputc_r>:
 800bc4e:	6893      	ldr	r3, [r2, #8]
 800bc50:	3b01      	subs	r3, #1
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	b410      	push	{r4}
 800bc56:	6093      	str	r3, [r2, #8]
 800bc58:	da08      	bge.n	800bc6c <__sfputc_r+0x1e>
 800bc5a:	6994      	ldr	r4, [r2, #24]
 800bc5c:	42a3      	cmp	r3, r4
 800bc5e:	db01      	blt.n	800bc64 <__sfputc_r+0x16>
 800bc60:	290a      	cmp	r1, #10
 800bc62:	d103      	bne.n	800bc6c <__sfputc_r+0x1e>
 800bc64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc68:	f000 b934 	b.w	800bed4 <__swbuf_r>
 800bc6c:	6813      	ldr	r3, [r2, #0]
 800bc6e:	1c58      	adds	r0, r3, #1
 800bc70:	6010      	str	r0, [r2, #0]
 800bc72:	7019      	strb	r1, [r3, #0]
 800bc74:	4608      	mov	r0, r1
 800bc76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <__sfputs_r>:
 800bc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc7e:	4606      	mov	r6, r0
 800bc80:	460f      	mov	r7, r1
 800bc82:	4614      	mov	r4, r2
 800bc84:	18d5      	adds	r5, r2, r3
 800bc86:	42ac      	cmp	r4, r5
 800bc88:	d101      	bne.n	800bc8e <__sfputs_r+0x12>
 800bc8a:	2000      	movs	r0, #0
 800bc8c:	e007      	b.n	800bc9e <__sfputs_r+0x22>
 800bc8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc92:	463a      	mov	r2, r7
 800bc94:	4630      	mov	r0, r6
 800bc96:	f7ff ffda 	bl	800bc4e <__sfputc_r>
 800bc9a:	1c43      	adds	r3, r0, #1
 800bc9c:	d1f3      	bne.n	800bc86 <__sfputs_r+0xa>
 800bc9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bca0 <_vfiprintf_r>:
 800bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca4:	460d      	mov	r5, r1
 800bca6:	b09d      	sub	sp, #116	; 0x74
 800bca8:	4614      	mov	r4, r2
 800bcaa:	4698      	mov	r8, r3
 800bcac:	4606      	mov	r6, r0
 800bcae:	b118      	cbz	r0, 800bcb8 <_vfiprintf_r+0x18>
 800bcb0:	6a03      	ldr	r3, [r0, #32]
 800bcb2:	b90b      	cbnz	r3, 800bcb8 <_vfiprintf_r+0x18>
 800bcb4:	f7fc fd98 	bl	80087e8 <__sinit>
 800bcb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcba:	07d9      	lsls	r1, r3, #31
 800bcbc:	d405      	bmi.n	800bcca <_vfiprintf_r+0x2a>
 800bcbe:	89ab      	ldrh	r3, [r5, #12]
 800bcc0:	059a      	lsls	r2, r3, #22
 800bcc2:	d402      	bmi.n	800bcca <_vfiprintf_r+0x2a>
 800bcc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcc6:	f7fc fea6 	bl	8008a16 <__retarget_lock_acquire_recursive>
 800bcca:	89ab      	ldrh	r3, [r5, #12]
 800bccc:	071b      	lsls	r3, r3, #28
 800bcce:	d501      	bpl.n	800bcd4 <_vfiprintf_r+0x34>
 800bcd0:	692b      	ldr	r3, [r5, #16]
 800bcd2:	b99b      	cbnz	r3, 800bcfc <_vfiprintf_r+0x5c>
 800bcd4:	4629      	mov	r1, r5
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	f000 f93a 	bl	800bf50 <__swsetup_r>
 800bcdc:	b170      	cbz	r0, 800bcfc <_vfiprintf_r+0x5c>
 800bcde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bce0:	07dc      	lsls	r4, r3, #31
 800bce2:	d504      	bpl.n	800bcee <_vfiprintf_r+0x4e>
 800bce4:	f04f 30ff 	mov.w	r0, #4294967295
 800bce8:	b01d      	add	sp, #116	; 0x74
 800bcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcee:	89ab      	ldrh	r3, [r5, #12]
 800bcf0:	0598      	lsls	r0, r3, #22
 800bcf2:	d4f7      	bmi.n	800bce4 <_vfiprintf_r+0x44>
 800bcf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcf6:	f7fc fe8f 	bl	8008a18 <__retarget_lock_release_recursive>
 800bcfa:	e7f3      	b.n	800bce4 <_vfiprintf_r+0x44>
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	9309      	str	r3, [sp, #36]	; 0x24
 800bd00:	2320      	movs	r3, #32
 800bd02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd06:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd0a:	2330      	movs	r3, #48	; 0x30
 800bd0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bec0 <_vfiprintf_r+0x220>
 800bd10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd14:	f04f 0901 	mov.w	r9, #1
 800bd18:	4623      	mov	r3, r4
 800bd1a:	469a      	mov	sl, r3
 800bd1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd20:	b10a      	cbz	r2, 800bd26 <_vfiprintf_r+0x86>
 800bd22:	2a25      	cmp	r2, #37	; 0x25
 800bd24:	d1f9      	bne.n	800bd1a <_vfiprintf_r+0x7a>
 800bd26:	ebba 0b04 	subs.w	fp, sl, r4
 800bd2a:	d00b      	beq.n	800bd44 <_vfiprintf_r+0xa4>
 800bd2c:	465b      	mov	r3, fp
 800bd2e:	4622      	mov	r2, r4
 800bd30:	4629      	mov	r1, r5
 800bd32:	4630      	mov	r0, r6
 800bd34:	f7ff ffa2 	bl	800bc7c <__sfputs_r>
 800bd38:	3001      	adds	r0, #1
 800bd3a:	f000 80a9 	beq.w	800be90 <_vfiprintf_r+0x1f0>
 800bd3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd40:	445a      	add	r2, fp
 800bd42:	9209      	str	r2, [sp, #36]	; 0x24
 800bd44:	f89a 3000 	ldrb.w	r3, [sl]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	f000 80a1 	beq.w	800be90 <_vfiprintf_r+0x1f0>
 800bd4e:	2300      	movs	r3, #0
 800bd50:	f04f 32ff 	mov.w	r2, #4294967295
 800bd54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd58:	f10a 0a01 	add.w	sl, sl, #1
 800bd5c:	9304      	str	r3, [sp, #16]
 800bd5e:	9307      	str	r3, [sp, #28]
 800bd60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd64:	931a      	str	r3, [sp, #104]	; 0x68
 800bd66:	4654      	mov	r4, sl
 800bd68:	2205      	movs	r2, #5
 800bd6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd6e:	4854      	ldr	r0, [pc, #336]	; (800bec0 <_vfiprintf_r+0x220>)
 800bd70:	f7f4 fa4e 	bl	8000210 <memchr>
 800bd74:	9a04      	ldr	r2, [sp, #16]
 800bd76:	b9d8      	cbnz	r0, 800bdb0 <_vfiprintf_r+0x110>
 800bd78:	06d1      	lsls	r1, r2, #27
 800bd7a:	bf44      	itt	mi
 800bd7c:	2320      	movmi	r3, #32
 800bd7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd82:	0713      	lsls	r3, r2, #28
 800bd84:	bf44      	itt	mi
 800bd86:	232b      	movmi	r3, #43	; 0x2b
 800bd88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd8c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd90:	2b2a      	cmp	r3, #42	; 0x2a
 800bd92:	d015      	beq.n	800bdc0 <_vfiprintf_r+0x120>
 800bd94:	9a07      	ldr	r2, [sp, #28]
 800bd96:	4654      	mov	r4, sl
 800bd98:	2000      	movs	r0, #0
 800bd9a:	f04f 0c0a 	mov.w	ip, #10
 800bd9e:	4621      	mov	r1, r4
 800bda0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bda4:	3b30      	subs	r3, #48	; 0x30
 800bda6:	2b09      	cmp	r3, #9
 800bda8:	d94d      	bls.n	800be46 <_vfiprintf_r+0x1a6>
 800bdaa:	b1b0      	cbz	r0, 800bdda <_vfiprintf_r+0x13a>
 800bdac:	9207      	str	r2, [sp, #28]
 800bdae:	e014      	b.n	800bdda <_vfiprintf_r+0x13a>
 800bdb0:	eba0 0308 	sub.w	r3, r0, r8
 800bdb4:	fa09 f303 	lsl.w	r3, r9, r3
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	9304      	str	r3, [sp, #16]
 800bdbc:	46a2      	mov	sl, r4
 800bdbe:	e7d2      	b.n	800bd66 <_vfiprintf_r+0xc6>
 800bdc0:	9b03      	ldr	r3, [sp, #12]
 800bdc2:	1d19      	adds	r1, r3, #4
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	9103      	str	r1, [sp, #12]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	bfbb      	ittet	lt
 800bdcc:	425b      	neglt	r3, r3
 800bdce:	f042 0202 	orrlt.w	r2, r2, #2
 800bdd2:	9307      	strge	r3, [sp, #28]
 800bdd4:	9307      	strlt	r3, [sp, #28]
 800bdd6:	bfb8      	it	lt
 800bdd8:	9204      	strlt	r2, [sp, #16]
 800bdda:	7823      	ldrb	r3, [r4, #0]
 800bddc:	2b2e      	cmp	r3, #46	; 0x2e
 800bdde:	d10c      	bne.n	800bdfa <_vfiprintf_r+0x15a>
 800bde0:	7863      	ldrb	r3, [r4, #1]
 800bde2:	2b2a      	cmp	r3, #42	; 0x2a
 800bde4:	d134      	bne.n	800be50 <_vfiprintf_r+0x1b0>
 800bde6:	9b03      	ldr	r3, [sp, #12]
 800bde8:	1d1a      	adds	r2, r3, #4
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	9203      	str	r2, [sp, #12]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	bfb8      	it	lt
 800bdf2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdf6:	3402      	adds	r4, #2
 800bdf8:	9305      	str	r3, [sp, #20]
 800bdfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bed0 <_vfiprintf_r+0x230>
 800bdfe:	7821      	ldrb	r1, [r4, #0]
 800be00:	2203      	movs	r2, #3
 800be02:	4650      	mov	r0, sl
 800be04:	f7f4 fa04 	bl	8000210 <memchr>
 800be08:	b138      	cbz	r0, 800be1a <_vfiprintf_r+0x17a>
 800be0a:	9b04      	ldr	r3, [sp, #16]
 800be0c:	eba0 000a 	sub.w	r0, r0, sl
 800be10:	2240      	movs	r2, #64	; 0x40
 800be12:	4082      	lsls	r2, r0
 800be14:	4313      	orrs	r3, r2
 800be16:	3401      	adds	r4, #1
 800be18:	9304      	str	r3, [sp, #16]
 800be1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be1e:	4829      	ldr	r0, [pc, #164]	; (800bec4 <_vfiprintf_r+0x224>)
 800be20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be24:	2206      	movs	r2, #6
 800be26:	f7f4 f9f3 	bl	8000210 <memchr>
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d03f      	beq.n	800beae <_vfiprintf_r+0x20e>
 800be2e:	4b26      	ldr	r3, [pc, #152]	; (800bec8 <_vfiprintf_r+0x228>)
 800be30:	bb1b      	cbnz	r3, 800be7a <_vfiprintf_r+0x1da>
 800be32:	9b03      	ldr	r3, [sp, #12]
 800be34:	3307      	adds	r3, #7
 800be36:	f023 0307 	bic.w	r3, r3, #7
 800be3a:	3308      	adds	r3, #8
 800be3c:	9303      	str	r3, [sp, #12]
 800be3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be40:	443b      	add	r3, r7
 800be42:	9309      	str	r3, [sp, #36]	; 0x24
 800be44:	e768      	b.n	800bd18 <_vfiprintf_r+0x78>
 800be46:	fb0c 3202 	mla	r2, ip, r2, r3
 800be4a:	460c      	mov	r4, r1
 800be4c:	2001      	movs	r0, #1
 800be4e:	e7a6      	b.n	800bd9e <_vfiprintf_r+0xfe>
 800be50:	2300      	movs	r3, #0
 800be52:	3401      	adds	r4, #1
 800be54:	9305      	str	r3, [sp, #20]
 800be56:	4619      	mov	r1, r3
 800be58:	f04f 0c0a 	mov.w	ip, #10
 800be5c:	4620      	mov	r0, r4
 800be5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be62:	3a30      	subs	r2, #48	; 0x30
 800be64:	2a09      	cmp	r2, #9
 800be66:	d903      	bls.n	800be70 <_vfiprintf_r+0x1d0>
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d0c6      	beq.n	800bdfa <_vfiprintf_r+0x15a>
 800be6c:	9105      	str	r1, [sp, #20]
 800be6e:	e7c4      	b.n	800bdfa <_vfiprintf_r+0x15a>
 800be70:	fb0c 2101 	mla	r1, ip, r1, r2
 800be74:	4604      	mov	r4, r0
 800be76:	2301      	movs	r3, #1
 800be78:	e7f0      	b.n	800be5c <_vfiprintf_r+0x1bc>
 800be7a:	ab03      	add	r3, sp, #12
 800be7c:	9300      	str	r3, [sp, #0]
 800be7e:	462a      	mov	r2, r5
 800be80:	4b12      	ldr	r3, [pc, #72]	; (800becc <_vfiprintf_r+0x22c>)
 800be82:	a904      	add	r1, sp, #16
 800be84:	4630      	mov	r0, r6
 800be86:	f7fb fe4d 	bl	8007b24 <_printf_float>
 800be8a:	4607      	mov	r7, r0
 800be8c:	1c78      	adds	r0, r7, #1
 800be8e:	d1d6      	bne.n	800be3e <_vfiprintf_r+0x19e>
 800be90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be92:	07d9      	lsls	r1, r3, #31
 800be94:	d405      	bmi.n	800bea2 <_vfiprintf_r+0x202>
 800be96:	89ab      	ldrh	r3, [r5, #12]
 800be98:	059a      	lsls	r2, r3, #22
 800be9a:	d402      	bmi.n	800bea2 <_vfiprintf_r+0x202>
 800be9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be9e:	f7fc fdbb 	bl	8008a18 <__retarget_lock_release_recursive>
 800bea2:	89ab      	ldrh	r3, [r5, #12]
 800bea4:	065b      	lsls	r3, r3, #25
 800bea6:	f53f af1d 	bmi.w	800bce4 <_vfiprintf_r+0x44>
 800beaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800beac:	e71c      	b.n	800bce8 <_vfiprintf_r+0x48>
 800beae:	ab03      	add	r3, sp, #12
 800beb0:	9300      	str	r3, [sp, #0]
 800beb2:	462a      	mov	r2, r5
 800beb4:	4b05      	ldr	r3, [pc, #20]	; (800becc <_vfiprintf_r+0x22c>)
 800beb6:	a904      	add	r1, sp, #16
 800beb8:	4630      	mov	r0, r6
 800beba:	f7fc f8d7 	bl	800806c <_printf_i>
 800bebe:	e7e4      	b.n	800be8a <_vfiprintf_r+0x1ea>
 800bec0:	0800e6b1 	.word	0x0800e6b1
 800bec4:	0800e6bb 	.word	0x0800e6bb
 800bec8:	08007b25 	.word	0x08007b25
 800becc:	0800bc7d 	.word	0x0800bc7d
 800bed0:	0800e6b7 	.word	0x0800e6b7

0800bed4 <__swbuf_r>:
 800bed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bed6:	460e      	mov	r6, r1
 800bed8:	4614      	mov	r4, r2
 800beda:	4605      	mov	r5, r0
 800bedc:	b118      	cbz	r0, 800bee6 <__swbuf_r+0x12>
 800bede:	6a03      	ldr	r3, [r0, #32]
 800bee0:	b90b      	cbnz	r3, 800bee6 <__swbuf_r+0x12>
 800bee2:	f7fc fc81 	bl	80087e8 <__sinit>
 800bee6:	69a3      	ldr	r3, [r4, #24]
 800bee8:	60a3      	str	r3, [r4, #8]
 800beea:	89a3      	ldrh	r3, [r4, #12]
 800beec:	071a      	lsls	r2, r3, #28
 800beee:	d525      	bpl.n	800bf3c <__swbuf_r+0x68>
 800bef0:	6923      	ldr	r3, [r4, #16]
 800bef2:	b31b      	cbz	r3, 800bf3c <__swbuf_r+0x68>
 800bef4:	6823      	ldr	r3, [r4, #0]
 800bef6:	6922      	ldr	r2, [r4, #16]
 800bef8:	1a98      	subs	r0, r3, r2
 800befa:	6963      	ldr	r3, [r4, #20]
 800befc:	b2f6      	uxtb	r6, r6
 800befe:	4283      	cmp	r3, r0
 800bf00:	4637      	mov	r7, r6
 800bf02:	dc04      	bgt.n	800bf0e <__swbuf_r+0x3a>
 800bf04:	4621      	mov	r1, r4
 800bf06:	4628      	mov	r0, r5
 800bf08:	f7ff fa3a 	bl	800b380 <_fflush_r>
 800bf0c:	b9e0      	cbnz	r0, 800bf48 <__swbuf_r+0x74>
 800bf0e:	68a3      	ldr	r3, [r4, #8]
 800bf10:	3b01      	subs	r3, #1
 800bf12:	60a3      	str	r3, [r4, #8]
 800bf14:	6823      	ldr	r3, [r4, #0]
 800bf16:	1c5a      	adds	r2, r3, #1
 800bf18:	6022      	str	r2, [r4, #0]
 800bf1a:	701e      	strb	r6, [r3, #0]
 800bf1c:	6962      	ldr	r2, [r4, #20]
 800bf1e:	1c43      	adds	r3, r0, #1
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d004      	beq.n	800bf2e <__swbuf_r+0x5a>
 800bf24:	89a3      	ldrh	r3, [r4, #12]
 800bf26:	07db      	lsls	r3, r3, #31
 800bf28:	d506      	bpl.n	800bf38 <__swbuf_r+0x64>
 800bf2a:	2e0a      	cmp	r6, #10
 800bf2c:	d104      	bne.n	800bf38 <__swbuf_r+0x64>
 800bf2e:	4621      	mov	r1, r4
 800bf30:	4628      	mov	r0, r5
 800bf32:	f7ff fa25 	bl	800b380 <_fflush_r>
 800bf36:	b938      	cbnz	r0, 800bf48 <__swbuf_r+0x74>
 800bf38:	4638      	mov	r0, r7
 800bf3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf3c:	4621      	mov	r1, r4
 800bf3e:	4628      	mov	r0, r5
 800bf40:	f000 f806 	bl	800bf50 <__swsetup_r>
 800bf44:	2800      	cmp	r0, #0
 800bf46:	d0d5      	beq.n	800bef4 <__swbuf_r+0x20>
 800bf48:	f04f 37ff 	mov.w	r7, #4294967295
 800bf4c:	e7f4      	b.n	800bf38 <__swbuf_r+0x64>
	...

0800bf50 <__swsetup_r>:
 800bf50:	b538      	push	{r3, r4, r5, lr}
 800bf52:	4b2a      	ldr	r3, [pc, #168]	; (800bffc <__swsetup_r+0xac>)
 800bf54:	4605      	mov	r5, r0
 800bf56:	6818      	ldr	r0, [r3, #0]
 800bf58:	460c      	mov	r4, r1
 800bf5a:	b118      	cbz	r0, 800bf64 <__swsetup_r+0x14>
 800bf5c:	6a03      	ldr	r3, [r0, #32]
 800bf5e:	b90b      	cbnz	r3, 800bf64 <__swsetup_r+0x14>
 800bf60:	f7fc fc42 	bl	80087e8 <__sinit>
 800bf64:	89a3      	ldrh	r3, [r4, #12]
 800bf66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf6a:	0718      	lsls	r0, r3, #28
 800bf6c:	d422      	bmi.n	800bfb4 <__swsetup_r+0x64>
 800bf6e:	06d9      	lsls	r1, r3, #27
 800bf70:	d407      	bmi.n	800bf82 <__swsetup_r+0x32>
 800bf72:	2309      	movs	r3, #9
 800bf74:	602b      	str	r3, [r5, #0]
 800bf76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf7a:	81a3      	strh	r3, [r4, #12]
 800bf7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf80:	e034      	b.n	800bfec <__swsetup_r+0x9c>
 800bf82:	0758      	lsls	r0, r3, #29
 800bf84:	d512      	bpl.n	800bfac <__swsetup_r+0x5c>
 800bf86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf88:	b141      	cbz	r1, 800bf9c <__swsetup_r+0x4c>
 800bf8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf8e:	4299      	cmp	r1, r3
 800bf90:	d002      	beq.n	800bf98 <__swsetup_r+0x48>
 800bf92:	4628      	mov	r0, r5
 800bf94:	f7fd fbd2 	bl	800973c <_free_r>
 800bf98:	2300      	movs	r3, #0
 800bf9a:	6363      	str	r3, [r4, #52]	; 0x34
 800bf9c:	89a3      	ldrh	r3, [r4, #12]
 800bf9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bfa2:	81a3      	strh	r3, [r4, #12]
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	6063      	str	r3, [r4, #4]
 800bfa8:	6923      	ldr	r3, [r4, #16]
 800bfaa:	6023      	str	r3, [r4, #0]
 800bfac:	89a3      	ldrh	r3, [r4, #12]
 800bfae:	f043 0308 	orr.w	r3, r3, #8
 800bfb2:	81a3      	strh	r3, [r4, #12]
 800bfb4:	6923      	ldr	r3, [r4, #16]
 800bfb6:	b94b      	cbnz	r3, 800bfcc <__swsetup_r+0x7c>
 800bfb8:	89a3      	ldrh	r3, [r4, #12]
 800bfba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bfbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfc2:	d003      	beq.n	800bfcc <__swsetup_r+0x7c>
 800bfc4:	4621      	mov	r1, r4
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	f000 f884 	bl	800c0d4 <__smakebuf_r>
 800bfcc:	89a0      	ldrh	r0, [r4, #12]
 800bfce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfd2:	f010 0301 	ands.w	r3, r0, #1
 800bfd6:	d00a      	beq.n	800bfee <__swsetup_r+0x9e>
 800bfd8:	2300      	movs	r3, #0
 800bfda:	60a3      	str	r3, [r4, #8]
 800bfdc:	6963      	ldr	r3, [r4, #20]
 800bfde:	425b      	negs	r3, r3
 800bfe0:	61a3      	str	r3, [r4, #24]
 800bfe2:	6923      	ldr	r3, [r4, #16]
 800bfe4:	b943      	cbnz	r3, 800bff8 <__swsetup_r+0xa8>
 800bfe6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bfea:	d1c4      	bne.n	800bf76 <__swsetup_r+0x26>
 800bfec:	bd38      	pop	{r3, r4, r5, pc}
 800bfee:	0781      	lsls	r1, r0, #30
 800bff0:	bf58      	it	pl
 800bff2:	6963      	ldrpl	r3, [r4, #20]
 800bff4:	60a3      	str	r3, [r4, #8]
 800bff6:	e7f4      	b.n	800bfe2 <__swsetup_r+0x92>
 800bff8:	2000      	movs	r0, #0
 800bffa:	e7f7      	b.n	800bfec <__swsetup_r+0x9c>
 800bffc:	20000078 	.word	0x20000078

0800c000 <_raise_r>:
 800c000:	291f      	cmp	r1, #31
 800c002:	b538      	push	{r3, r4, r5, lr}
 800c004:	4604      	mov	r4, r0
 800c006:	460d      	mov	r5, r1
 800c008:	d904      	bls.n	800c014 <_raise_r+0x14>
 800c00a:	2316      	movs	r3, #22
 800c00c:	6003      	str	r3, [r0, #0]
 800c00e:	f04f 30ff 	mov.w	r0, #4294967295
 800c012:	bd38      	pop	{r3, r4, r5, pc}
 800c014:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c016:	b112      	cbz	r2, 800c01e <_raise_r+0x1e>
 800c018:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c01c:	b94b      	cbnz	r3, 800c032 <_raise_r+0x32>
 800c01e:	4620      	mov	r0, r4
 800c020:	f000 f830 	bl	800c084 <_getpid_r>
 800c024:	462a      	mov	r2, r5
 800c026:	4601      	mov	r1, r0
 800c028:	4620      	mov	r0, r4
 800c02a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c02e:	f000 b817 	b.w	800c060 <_kill_r>
 800c032:	2b01      	cmp	r3, #1
 800c034:	d00a      	beq.n	800c04c <_raise_r+0x4c>
 800c036:	1c59      	adds	r1, r3, #1
 800c038:	d103      	bne.n	800c042 <_raise_r+0x42>
 800c03a:	2316      	movs	r3, #22
 800c03c:	6003      	str	r3, [r0, #0]
 800c03e:	2001      	movs	r0, #1
 800c040:	e7e7      	b.n	800c012 <_raise_r+0x12>
 800c042:	2400      	movs	r4, #0
 800c044:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c048:	4628      	mov	r0, r5
 800c04a:	4798      	blx	r3
 800c04c:	2000      	movs	r0, #0
 800c04e:	e7e0      	b.n	800c012 <_raise_r+0x12>

0800c050 <raise>:
 800c050:	4b02      	ldr	r3, [pc, #8]	; (800c05c <raise+0xc>)
 800c052:	4601      	mov	r1, r0
 800c054:	6818      	ldr	r0, [r3, #0]
 800c056:	f7ff bfd3 	b.w	800c000 <_raise_r>
 800c05a:	bf00      	nop
 800c05c:	20000078 	.word	0x20000078

0800c060 <_kill_r>:
 800c060:	b538      	push	{r3, r4, r5, lr}
 800c062:	4d07      	ldr	r5, [pc, #28]	; (800c080 <_kill_r+0x20>)
 800c064:	2300      	movs	r3, #0
 800c066:	4604      	mov	r4, r0
 800c068:	4608      	mov	r0, r1
 800c06a:	4611      	mov	r1, r2
 800c06c:	602b      	str	r3, [r5, #0]
 800c06e:	f7f5 fed4 	bl	8001e1a <_kill>
 800c072:	1c43      	adds	r3, r0, #1
 800c074:	d102      	bne.n	800c07c <_kill_r+0x1c>
 800c076:	682b      	ldr	r3, [r5, #0]
 800c078:	b103      	cbz	r3, 800c07c <_kill_r+0x1c>
 800c07a:	6023      	str	r3, [r4, #0]
 800c07c:	bd38      	pop	{r3, r4, r5, pc}
 800c07e:	bf00      	nop
 800c080:	200051fc 	.word	0x200051fc

0800c084 <_getpid_r>:
 800c084:	f7f5 bec1 	b.w	8001e0a <_getpid>

0800c088 <__swhatbuf_r>:
 800c088:	b570      	push	{r4, r5, r6, lr}
 800c08a:	460c      	mov	r4, r1
 800c08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c090:	2900      	cmp	r1, #0
 800c092:	b096      	sub	sp, #88	; 0x58
 800c094:	4615      	mov	r5, r2
 800c096:	461e      	mov	r6, r3
 800c098:	da0d      	bge.n	800c0b6 <__swhatbuf_r+0x2e>
 800c09a:	89a3      	ldrh	r3, [r4, #12]
 800c09c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c0a0:	f04f 0100 	mov.w	r1, #0
 800c0a4:	bf0c      	ite	eq
 800c0a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c0aa:	2340      	movne	r3, #64	; 0x40
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	6031      	str	r1, [r6, #0]
 800c0b0:	602b      	str	r3, [r5, #0]
 800c0b2:	b016      	add	sp, #88	; 0x58
 800c0b4:	bd70      	pop	{r4, r5, r6, pc}
 800c0b6:	466a      	mov	r2, sp
 800c0b8:	f000 f848 	bl	800c14c <_fstat_r>
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	dbec      	blt.n	800c09a <__swhatbuf_r+0x12>
 800c0c0:	9901      	ldr	r1, [sp, #4]
 800c0c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c0c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c0ca:	4259      	negs	r1, r3
 800c0cc:	4159      	adcs	r1, r3
 800c0ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0d2:	e7eb      	b.n	800c0ac <__swhatbuf_r+0x24>

0800c0d4 <__smakebuf_r>:
 800c0d4:	898b      	ldrh	r3, [r1, #12]
 800c0d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0d8:	079d      	lsls	r5, r3, #30
 800c0da:	4606      	mov	r6, r0
 800c0dc:	460c      	mov	r4, r1
 800c0de:	d507      	bpl.n	800c0f0 <__smakebuf_r+0x1c>
 800c0e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0e4:	6023      	str	r3, [r4, #0]
 800c0e6:	6123      	str	r3, [r4, #16]
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	6163      	str	r3, [r4, #20]
 800c0ec:	b002      	add	sp, #8
 800c0ee:	bd70      	pop	{r4, r5, r6, pc}
 800c0f0:	ab01      	add	r3, sp, #4
 800c0f2:	466a      	mov	r2, sp
 800c0f4:	f7ff ffc8 	bl	800c088 <__swhatbuf_r>
 800c0f8:	9900      	ldr	r1, [sp, #0]
 800c0fa:	4605      	mov	r5, r0
 800c0fc:	4630      	mov	r0, r6
 800c0fe:	f7fd fb91 	bl	8009824 <_malloc_r>
 800c102:	b948      	cbnz	r0, 800c118 <__smakebuf_r+0x44>
 800c104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c108:	059a      	lsls	r2, r3, #22
 800c10a:	d4ef      	bmi.n	800c0ec <__smakebuf_r+0x18>
 800c10c:	f023 0303 	bic.w	r3, r3, #3
 800c110:	f043 0302 	orr.w	r3, r3, #2
 800c114:	81a3      	strh	r3, [r4, #12]
 800c116:	e7e3      	b.n	800c0e0 <__smakebuf_r+0xc>
 800c118:	89a3      	ldrh	r3, [r4, #12]
 800c11a:	6020      	str	r0, [r4, #0]
 800c11c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c120:	81a3      	strh	r3, [r4, #12]
 800c122:	9b00      	ldr	r3, [sp, #0]
 800c124:	6163      	str	r3, [r4, #20]
 800c126:	9b01      	ldr	r3, [sp, #4]
 800c128:	6120      	str	r0, [r4, #16]
 800c12a:	b15b      	cbz	r3, 800c144 <__smakebuf_r+0x70>
 800c12c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c130:	4630      	mov	r0, r6
 800c132:	f000 f81d 	bl	800c170 <_isatty_r>
 800c136:	b128      	cbz	r0, 800c144 <__smakebuf_r+0x70>
 800c138:	89a3      	ldrh	r3, [r4, #12]
 800c13a:	f023 0303 	bic.w	r3, r3, #3
 800c13e:	f043 0301 	orr.w	r3, r3, #1
 800c142:	81a3      	strh	r3, [r4, #12]
 800c144:	89a3      	ldrh	r3, [r4, #12]
 800c146:	431d      	orrs	r5, r3
 800c148:	81a5      	strh	r5, [r4, #12]
 800c14a:	e7cf      	b.n	800c0ec <__smakebuf_r+0x18>

0800c14c <_fstat_r>:
 800c14c:	b538      	push	{r3, r4, r5, lr}
 800c14e:	4d07      	ldr	r5, [pc, #28]	; (800c16c <_fstat_r+0x20>)
 800c150:	2300      	movs	r3, #0
 800c152:	4604      	mov	r4, r0
 800c154:	4608      	mov	r0, r1
 800c156:	4611      	mov	r1, r2
 800c158:	602b      	str	r3, [r5, #0]
 800c15a:	f7f5 febd 	bl	8001ed8 <_fstat>
 800c15e:	1c43      	adds	r3, r0, #1
 800c160:	d102      	bne.n	800c168 <_fstat_r+0x1c>
 800c162:	682b      	ldr	r3, [r5, #0]
 800c164:	b103      	cbz	r3, 800c168 <_fstat_r+0x1c>
 800c166:	6023      	str	r3, [r4, #0]
 800c168:	bd38      	pop	{r3, r4, r5, pc}
 800c16a:	bf00      	nop
 800c16c:	200051fc 	.word	0x200051fc

0800c170 <_isatty_r>:
 800c170:	b538      	push	{r3, r4, r5, lr}
 800c172:	4d06      	ldr	r5, [pc, #24]	; (800c18c <_isatty_r+0x1c>)
 800c174:	2300      	movs	r3, #0
 800c176:	4604      	mov	r4, r0
 800c178:	4608      	mov	r0, r1
 800c17a:	602b      	str	r3, [r5, #0]
 800c17c:	f7f5 febc 	bl	8001ef8 <_isatty>
 800c180:	1c43      	adds	r3, r0, #1
 800c182:	d102      	bne.n	800c18a <_isatty_r+0x1a>
 800c184:	682b      	ldr	r3, [r5, #0]
 800c186:	b103      	cbz	r3, 800c18a <_isatty_r+0x1a>
 800c188:	6023      	str	r3, [r4, #0]
 800c18a:	bd38      	pop	{r3, r4, r5, pc}
 800c18c:	200051fc 	.word	0x200051fc

0800c190 <_init>:
 800c190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c192:	bf00      	nop
 800c194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c196:	bc08      	pop	{r3}
 800c198:	469e      	mov	lr, r3
 800c19a:	4770      	bx	lr

0800c19c <_fini>:
 800c19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c19e:	bf00      	nop
 800c1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1a2:	bc08      	pop	{r3}
 800c1a4:	469e      	mov	lr, r3
 800c1a6:	4770      	bx	lr
